[
    {
        "name": "geom",
        "trans": [
            "【geom】Contains the Geometry interface hierarchy and supporting classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "geom【Contains】the Geometry interface hierarchy and supporting classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "geom Contains【the】Geometry interface hierarchy and supporting classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "geom Contains the【Geometry】interface hierarchy and supporting classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "geom Contains the Geometry【interface】hierarchy and supporting classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "hierarchy",
        "trans": [
            "geom Contains the Geometry interface【hierarchy】and supporting classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "geom Contains the Geometry interface hierarchy【and】supporting classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "supporting",
        "trans": [
            "geom Contains the Geometry interface hierarchy and【supporting】classes.",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "classes.",
        "trans": [
            "geom Contains the Geometry interface hierarchy and supporting【classes.】",
            "　　　包含几何接口层次结构和支持类。"
        ]
    },
    {
        "name": "geom.impl",
        "trans": [
            "【geom.impl】Implementations of interfaces for geometric structures.",
            "　　　实现接口的几何结构。"
        ]
    },
    {
        "name": "Implementations",
        "trans": [
            "geom.impl【Implementations】of interfaces for geometric structures.",
            "　　　实现接口的几何结构。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "geom.impl Implementations【of】interfaces for geometric structures.",
            "　　　实现接口的几何结构。"
        ]
    },
    {
        "name": "interfaces",
        "trans": [
            "geom.impl Implementations of【interfaces】for geometric structures.",
            "　　　实现接口的几何结构。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "geom.impl Implementations of interfaces【for】geometric structures.",
            "　　　实现接口的几何结构。"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "geom.impl Implementations of interfaces for【geometric】structures.",
            "　　　实现接口的几何结构。"
        ]
    },
    {
        "name": "structures.",
        "trans": [
            "geom.impl Implementations of interfaces for geometric【structures.】",
            "　　　实现接口的几何结构。"
        ]
    },
    {
        "name": "geom.prep",
        "trans": [
            "【geom.prep】Classes to perform optimized geometric operations on suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "geom.prep【Classes】to perform optimized geometric operations on suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "geom.prep Classes【to】perform optimized geometric operations on suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "geom.prep Classes to【perform】optimized geometric operations on suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "optimized",
        "trans": [
            "geom.prep Classes to perform【optimized】geometric operations on suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "geom.prep Classes to perform optimized【geometric】operations on suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "operations",
        "trans": [
            "geom.prep Classes to perform optimized geometric【operations】on suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "geom.prep Classes to perform optimized geometric operations【on】suitably prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "suitably",
        "trans": [
            "geom.prep Classes to perform optimized geometric operations on【suitably】prepared geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "prepared",
        "trans": [
            "geom.prep Classes to perform optimized geometric operations on suitably【prepared】geometries.",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "geom.prep Classes to perform optimized geometric operations on suitably prepared【geometries.】",
            "　　　类来执行优化几何操作适当准备的几何图形。"
        ]
    },
    {
        "name": "geom.util",
        "trans": [
            "【geom.util】Provides classes that parse and modify Geometry objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "geom.util【Provides】classes that parse and modify Geometry objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "geom.util Provides【classes】that parse and modify Geometry objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "geom.util Provides classes【that】parse and modify Geometry objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "parse",
        "trans": [
            "geom.util Provides classes that【parse】and modify Geometry objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "geom.util Provides classes that parse【and】modify Geometry objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "modify",
        "trans": [
            "geom.util Provides classes that parse and【modify】Geometry objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "geom.util Provides classes that parse and modify【Geometry】objects.",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "objects.",
        "trans": [
            "geom.util Provides classes that parse and modify Geometry【objects.】",
            "　　　提供了解析和修改几何对象的类。"
        ]
    },
    {
        "name": "io",
        "trans": [
            "【io】Contains the interfaces for converting JTS objects to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "io【Contains】the interfaces for converting JTS objects to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "io Contains【the】interfaces for converting JTS objects to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "interfaces",
        "trans": [
            "io Contains the【interfaces】for converting JTS objects to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "io Contains the interfaces【for】converting JTS objects to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "converting",
        "trans": [
            "io Contains the interfaces for【converting】JTS objects to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "io Contains the interfaces for converting【JTS】objects to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "objects",
        "trans": [
            "io Contains the interfaces for converting JTS【objects】to and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "io Contains the interfaces for converting JTS objects【to】and from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "io Contains the interfaces for converting JTS objects to【and】from other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "io Contains the interfaces for converting JTS objects to and【from】other formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "other",
        "trans": [
            "io Contains the interfaces for converting JTS objects to and from【other】formats.",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "formats.",
        "trans": [
            "io Contains the interfaces for converting JTS objects to and from other【formats.】",
            "　　　包含接口转换JTS对象和从其他格式。"
        ]
    },
    {
        "name": "algorithm",
        "trans": [
            "【algorithm】Contains classes and interfaces implementing fundamental computational geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "algorithm【Contains】classes and interfaces implementing fundamental computational geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "algorithm Contains【classes】and interfaces implementing fundamental computational geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "algorithm Contains classes【and】interfaces implementing fundamental computational geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "interfaces",
        "trans": [
            "algorithm Contains classes and【interfaces】implementing fundamental computational geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "implementing",
        "trans": [
            "algorithm Contains classes and interfaces【implementing】fundamental computational geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "fundamental",
        "trans": [
            "algorithm Contains classes and interfaces implementing【fundamental】computational geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "computational",
        "trans": [
            "algorithm Contains classes and interfaces implementing fundamental【computational】geometry algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "algorithm Contains classes and interfaces implementing fundamental computational【geometry】algorithms.",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "algorithms.",
        "trans": [
            "algorithm Contains classes and interfaces implementing fundamental computational geometry【algorithms.】",
            "　　　包含类和接口实现基本计算几何算法。"
        ]
    },
    {
        "name": "algorithm.construct",
        "trans": [
            "【algorithm.construct】Provides classes that implement various kinds of geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "algorithm.construct【Provides】classes that implement various kinds of geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "algorithm.construct Provides【classes】that implement various kinds of geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "algorithm.construct Provides classes【that】implement various kinds of geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "algorithm.construct Provides classes that【implement】various kinds of geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "various",
        "trans": [
            "algorithm.construct Provides classes that implement【various】kinds of geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "kinds",
        "trans": [
            "algorithm.construct Provides classes that implement various【kinds】of geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "algorithm.construct Provides classes that implement various kinds【of】geometric constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "algorithm.construct Provides classes that implement various kinds of【geometric】constructions.",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "constructions.",
        "trans": [
            "algorithm.construct Provides classes that implement various kinds of geometric【constructions.】",
            "　　　提供类,实现各种各样的几何结构。"
        ]
    },
    {
        "name": "algorithm.distance",
        "trans": [
            "【algorithm.distance】Classes to compute distance metrics between geometries.",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "algorithm.distance【Classes】to compute distance metrics between geometries.",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "algorithm.distance Classes【to】compute distance metrics between geometries.",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "algorithm.distance Classes to【compute】distance metrics between geometries.",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "algorithm.distance Classes to compute【distance】metrics between geometries.",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "metrics",
        "trans": [
            "algorithm.distance Classes to compute distance【metrics】between geometries.",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "algorithm.distance Classes to compute distance metrics【between】geometries.",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "algorithm.distance Classes to compute distance metrics between【geometries.】",
            "　　　类计算几何图形之间的距离度量。"
        ]
    },
    {
        "name": "algorithm.locate",
        "trans": [
            "【algorithm.locate】Classes to determine the topological location of points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "algorithm.locate【Classes】to determine the topological location of points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "algorithm.locate Classes【to】determine the topological location of points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "determine",
        "trans": [
            "algorithm.locate Classes to【determine】the topological location of points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "algorithm.locate Classes to determine【the】topological location of points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "algorithm.locate Classes to determine the【topological】location of points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "location",
        "trans": [
            "algorithm.locate Classes to determine the topological【location】of points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "algorithm.locate Classes to determine the topological location【of】points in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "algorithm.locate Classes to determine the topological location of【points】in geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "algorithm.locate Classes to determine the topological location of points【in】geometries.",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "algorithm.locate Classes to determine the topological location of points in【geometries.】",
            "　　　类来确定几何图形的拓扑位置点。"
        ]
    },
    {
        "name": "algorithm.match",
        "trans": [
            "【algorithm.match】Classes to compute matching metrics between geometries.",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "algorithm.match【Classes】to compute matching metrics between geometries.",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "algorithm.match Classes【to】compute matching metrics between geometries.",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "algorithm.match Classes to【compute】matching metrics between geometries.",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "matching",
        "trans": [
            "algorithm.match Classes to compute【matching】metrics between geometries.",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "metrics",
        "trans": [
            "algorithm.match Classes to compute matching【metrics】between geometries.",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "algorithm.match Classes to compute matching metrics【between】geometries.",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "algorithm.match Classes to compute matching metrics between【geometries.】",
            "　　　类来计算几何图形之间的匹配度量。"
        ]
    },
    {
        "name": "densify",
        "trans": [
            "【densify】Classes to perform densification on geometries.",
            "　　　类对几何图形进行致密化。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "densify【Classes】to perform densification on geometries.",
            "　　　类对几何图形进行致密化。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "densify Classes【to】perform densification on geometries.",
            "　　　类对几何图形进行致密化。"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "densify Classes to【perform】densification on geometries.",
            "　　　类对几何图形进行致密化。"
        ]
    },
    {
        "name": "densification",
        "trans": [
            "densify Classes to perform【densification】on geometries.",
            "　　　类对几何图形进行致密化。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "densify Classes to perform densification【on】geometries.",
            "　　　类对几何图形进行致密化。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "densify Classes to perform densification on【geometries.】",
            "　　　类对几何图形进行致密化。"
        ]
    },
    {
        "name": "dissolve",
        "trans": [
            "【dissolve】",
            "　　　org.locationtech.jts.dissolve"
        ]
    },
    {
        "name": "linearref",
        "trans": [
            "【linearref】Contains classes and interfaces implementing linear referencing on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "linearref【Contains】classes and interfaces implementing linear referencing on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "linearref Contains【classes】and interfaces implementing linear referencing on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "and",
        "trans": [
            "linearref Contains classes【and】interfaces implementing linear referencing on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "interfaces",
        "trans": [
            "linearref Contains classes and【interfaces】implementing linear referencing on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "implementing",
        "trans": [
            "linearref Contains classes and interfaces【implementing】linear referencing on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "linearref Contains classes and interfaces implementing【linear】referencing on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "referencing",
        "trans": [
            "linearref Contains classes and interfaces implementing linear【referencing】on linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "on",
        "trans": [
            "linearref Contains classes and interfaces implementing linear referencing【on】linear geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "linearref Contains classes and interfaces implementing linear referencing on【linear】geometries",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "linearref Contains classes and interfaces implementing linear referencing on linear【geometries】",
            "　　　包含类和接口实现线性引用线性几何图形"
        ]
    },
    {
        "name": "operation.buffer",
        "trans": [
            "【operation.buffer】Provides classes for computing buffers of geometries",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "operation.buffer【Provides】classes for computing buffers of geometries",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "operation.buffer Provides【classes】for computing buffers of geometries",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "for",
        "trans": [
            "operation.buffer Provides classes【for】computing buffers of geometries",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "operation.buffer Provides classes for【computing】buffers of geometries",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "buffers",
        "trans": [
            "operation.buffer Provides classes for computing【buffers】of geometries",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.buffer Provides classes for computing buffers【of】geometries",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "operation.buffer Provides classes for computing buffers of【geometries】",
            "　　　提供了计算几何图形的缓冲区类"
        ]
    },
    {
        "name": "operation.buffer.validate",
        "trans": [
            "【operation.buffer.validate】Classes to perform validation of the results of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "operation.buffer.validate【Classes】to perform validation of the results of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.buffer.validate Classes【to】perform validation of the results of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "operation.buffer.validate Classes to【perform】validation of the results of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "validation",
        "trans": [
            "operation.buffer.validate Classes to perform【validation】of the results of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.buffer.validate Classes to perform validation【of】the results of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "operation.buffer.validate Classes to perform validation of【the】results of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "results",
        "trans": [
            "operation.buffer.validate Classes to perform validation of the【results】of buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.buffer.validate Classes to perform validation of the results【of】buffer operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "operation.buffer.validate Classes to perform validation of the results of【buffer】operations.",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "operation.buffer.validate Classes to perform validation of the results of buffer【operations.】",
            "　　　类来执行验证的缓冲区操作的结果。"
        ]
    },
    {
        "name": "operation.distance",
        "trans": [
            "【operation.distance】Provides classes for computing the distance between geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "operation.distance【Provides】classes for computing the distance between geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "operation.distance Provides【classes】for computing the distance between geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "for",
        "trans": [
            "operation.distance Provides classes【for】computing the distance between geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "operation.distance Provides classes for【computing】the distance between geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "the",
        "trans": [
            "operation.distance Provides classes for computing【the】distance between geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "operation.distance Provides classes for computing the【distance】between geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "between",
        "trans": [
            "operation.distance Provides classes for computing the distance【between】geometries",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "operation.distance Provides classes for computing the distance between【geometries】",
            "　　　提供类计算几何图形之间的距离"
        ]
    },
    {
        "name": "operation.distance3d",
        "trans": [
            "【operation.distance3d】",
            "　　　org.locationtech.jts.operation.distance3d"
        ]
    },
    {
        "name": "operation.linemerge",
        "trans": [
            "【operation.linemerge】Classes to perform line merging.",
            "　　　org.locationtech.jts.operation.linemerge"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "operation.linemerge【Classes】to perform line merging.",
            "　　　org.locationtech.jts.operation.linemerge"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.linemerge Classes【to】perform line merging.",
            "　　　org.locationtech.jts.operation.linemerge"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "operation.linemerge Classes to【perform】line merging.",
            "　　　org.locationtech.jts.operation.linemerge"
        ]
    },
    {
        "name": "line",
        "trans": [
            "operation.linemerge Classes to perform【line】merging.",
            "　　　org.locationtech.jts.operation.linemerge"
        ]
    },
    {
        "name": "merging.",
        "trans": [
            "operation.linemerge Classes to perform line【merging.】",
            "　　　org.locationtech.jts.operation.linemerge"
        ]
    },
    {
        "name": "operation.overlay",
        "trans": [
            "【operation.overlay】Contains classes that perform a topological overlay to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "operation.overlay【Contains】classes that perform a topological overlay to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "operation.overlay Contains【classes】that perform a topological overlay to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "operation.overlay Contains classes【that】perform a topological overlay to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "operation.overlay Contains classes that【perform】a topological overlay to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "operation.overlay Contains classes that perform【a】topological overlay to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "operation.overlay Contains classes that perform a【topological】overlay to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "operation.overlay Contains classes that perform a topological【overlay】to compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.overlay Contains classes that perform a topological overlay【to】compute boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "operation.overlay Contains classes that perform a topological overlay to【compute】boolean spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "operation.overlay Contains classes that perform a topological overlay to compute【boolean】spatial functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "operation.overlay Contains classes that perform a topological overlay to compute boolean【spatial】functions.",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "functions.",
        "trans": [
            "operation.overlay Contains classes that perform a topological overlay to compute boolean spatial【functions.】",
            "　　　包含的类执行拓扑叠加计算布尔空间函数。"
        ]
    },
    {
        "name": "operation.overlay.snap",
        "trans": [
            "【operation.overlay.snap】Classes to perform snapping on geometries to prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "operation.overlay.snap【Classes】to perform snapping on geometries to prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.overlay.snap Classes【to】perform snapping on geometries to prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "operation.overlay.snap Classes to【perform】snapping on geometries to prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "snapping",
        "trans": [
            "operation.overlay.snap Classes to perform【snapping】on geometries to prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "operation.overlay.snap Classes to perform snapping【on】geometries to prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "operation.overlay.snap Classes to perform snapping on【geometries】to prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.overlay.snap Classes to perform snapping on geometries【to】prepare them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "prepare",
        "trans": [
            "operation.overlay.snap Classes to perform snapping on geometries to【prepare】them for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "them",
        "trans": [
            "operation.overlay.snap Classes to perform snapping on geometries to prepare【them】for overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "operation.overlay.snap Classes to perform snapping on geometries to prepare them【for】overlay operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "operation.overlay.snap Classes to perform snapping on geometries to prepare them for【overlay】operations.",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "operation.overlay.snap Classes to perform snapping on geometries to prepare them for overlay【operations.】",
            "　　　类对几何图形进行拍摄准备覆盖操作。"
        ]
    },
    {
        "name": "operation.overlay.validate",
        "trans": [
            "【operation.overlay.validate】Classes to validate the results of overlay operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "operation.overlay.validate【Classes】to validate the results of overlay operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.overlay.validate Classes【to】validate the results of overlay operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "validate",
        "trans": [
            "operation.overlay.validate Classes to【validate】the results of overlay operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "operation.overlay.validate Classes to validate【the】results of overlay operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "results",
        "trans": [
            "operation.overlay.validate Classes to validate the【results】of overlay operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.overlay.validate Classes to validate the results【of】overlay operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "operation.overlay.validate Classes to validate the results of【overlay】operations.",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "operation.overlay.validate Classes to validate the results of overlay【operations.】",
            "　　　类来验证叠加操作的结果。"
        ]
    },
    {
        "name": "operation.overlayng",
        "trans": [
            "【operation.overlayng】Contains classes that perform vector overlay to compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "operation.overlayng【Contains】classes that perform vector overlay to compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "operation.overlayng Contains【classes】that perform vector overlay to compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "that",
        "trans": [
            "operation.overlayng Contains classes【that】perform vector overlay to compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "operation.overlayng Contains classes that【perform】vector overlay to compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "vector",
        "trans": [
            "operation.overlayng Contains classes that perform【vector】overlay to compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "operation.overlayng Contains classes that perform vector【overlay】to compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.overlayng Contains classes that perform vector overlay【to】compute boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "operation.overlayng Contains classes that perform vector overlay to【compute】boolean set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "operation.overlayng Contains classes that perform vector overlay to compute【boolean】set-theoretic spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "set-theoretic",
        "trans": [
            "operation.overlayng Contains classes that perform vector overlay to compute boolean【set-theoretic】spatial functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "operation.overlayng Contains classes that perform vector overlay to compute boolean set-theoretic【spatial】functions.",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "functions.",
        "trans": [
            "operation.overlayng Contains classes that perform vector overlay to compute boolean set-theoretic spatial【functions.】",
            "　　　包含的类进行矢量叠加"
        ]
    },
    {
        "name": "operation.polygonize",
        "trans": [
            "【operation.polygonize】An API for polygonizing sets of lines.",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "An",
        "trans": [
            "operation.polygonize【An】API for polygonizing sets of lines.",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "API",
        "trans": [
            "operation.polygonize An【API】for polygonizing sets of lines.",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "for",
        "trans": [
            "operation.polygonize An API【for】polygonizing sets of lines.",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "polygonizing",
        "trans": [
            "operation.polygonize An API for【polygonizing】sets of lines.",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "operation.polygonize An API for polygonizing【sets】of lines.",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.polygonize An API for polygonizing sets【of】lines.",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "lines.",
        "trans": [
            "operation.polygonize An API for polygonizing sets of【lines.】",
            "　　　org.locationtech.jts.operation.polygonize"
        ]
    },
    {
        "name": "operation.predicate",
        "trans": [
            "【operation.predicate】Classes which implement topological predicates optimized for particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "operation.predicate【Classes】which implement topological predicates optimized for particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "operation.predicate Classes【which】implement topological predicates optimized for particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "operation.predicate Classes which【implement】topological predicates optimized for particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "operation.predicate Classes which implement【topological】predicates optimized for particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "predicates",
        "trans": [
            "operation.predicate Classes which implement topological【predicates】optimized for particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "optimized",
        "trans": [
            "operation.predicate Classes which implement topological predicates【optimized】for particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "operation.predicate Classes which implement topological predicates optimized【for】particular kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "particular",
        "trans": [
            "operation.predicate Classes which implement topological predicates optimized for【particular】kinds of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "kinds",
        "trans": [
            "operation.predicate Classes which implement topological predicates optimized for particular【kinds】of geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.predicate Classes which implement topological predicates optimized for particular kinds【of】geometries.",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "operation.predicate Classes which implement topological predicates optimized for particular kinds of【geometries.】",
            "　　　类的实现拓扑谓词针对特定的几何形状进行了优化。"
        ]
    },
    {
        "name": "operation.relate",
        "trans": [
            "【operation.relate】Contains classes to implement the computation of the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "operation.relate【Contains】classes to implement the computation of the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "operation.relate Contains【classes】to implement the computation of the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.relate Contains classes【to】implement the computation of the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "operation.relate Contains classes to【implement】the computation of the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "operation.relate Contains classes to implement【the】computation of the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "computation",
        "trans": [
            "operation.relate Contains classes to implement the【computation】of the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.relate Contains classes to implement the computation【of】the spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "operation.relate Contains classes to implement the computation of【the】spatial relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "operation.relate Contains classes to implement the computation of the【spatial】relationships of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "relationships",
        "trans": [
            "operation.relate Contains classes to implement the computation of the spatial【relationships】of Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.relate Contains classes to implement the computation of the spatial relationships【of】Geometrys.",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "Geometrys.",
        "trans": [
            "operation.relate Contains classes to implement the computation of the spatial relationships of【Geometrys.】",
            "　　　包含的类实现的计算几何的空间关系。"
        ]
    },
    {
        "name": "operation.union",
        "trans": [
            "【operation.union】Classes to perform efficient unioning of collections of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "operation.union【Classes】to perform efficient unioning of collections of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "operation.union Classes【to】perform efficient unioning of collections of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "operation.union Classes to【perform】efficient unioning of collections of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "efficient",
        "trans": [
            "operation.union Classes to perform【efficient】unioning of collections of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "unioning",
        "trans": [
            "operation.union Classes to perform efficient【unioning】of collections of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.union Classes to perform efficient unioning【of】collections of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "collections",
        "trans": [
            "operation.union Classes to perform efficient unioning of【collections】of geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.union Classes to perform efficient unioning of collections【of】geometries.",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "operation.union Classes to perform efficient unioning of collections of【geometries.】",
            "　　　类来执行有效的联盟集合的几何图形。"
        ]
    },
    {
        "name": "operation.valid",
        "trans": [
            "【operation.valid】Provides classes for testing the validity of geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "operation.valid【Provides】classes for testing the validity of geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "operation.valid Provides【classes】for testing the validity of geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "operation.valid Provides classes【for】testing the validity of geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "testing",
        "trans": [
            "operation.valid Provides classes for【testing】the validity of geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "operation.valid Provides classes for testing【the】validity of geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "validity",
        "trans": [
            "operation.valid Provides classes for testing the【validity】of geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "operation.valid Provides classes for testing the validity【of】geometries.",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "operation.valid Provides classes for testing the validity of【geometries.】",
            "　　　提供了测试类几何图形的有效性。"
        ]
    },
    {
        "name": "simplify",
        "trans": [
            "【simplify】Classes which implement algorithms for simplifying or generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "simplify【Classes】which implement algorithms for simplifying or generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "simplify Classes【which】implement algorithms for simplifying or generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "simplify Classes which【implement】algorithms for simplifying or generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "algorithms",
        "trans": [
            "simplify Classes which implement【algorithms】for simplifying or generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "simplify Classes which implement algorithms【for】simplifying or generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "simplifying",
        "trans": [
            "simplify Classes which implement algorithms for【simplifying】or generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "or",
        "trans": [
            "simplify Classes which implement algorithms for simplifying【or】generalizing geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "generalizing",
        "trans": [
            "simplify Classes which implement algorithms for simplifying or【generalizing】geometries.",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "simplify Classes which implement algorithms for simplifying or generalizing【geometries.】",
            "　　　类的实现算法简化或概括的几何图形。"
        ]
    },
    {
        "name": "triangulate",
        "trans": [
            "【triangulate】Classes to compute Delaunay triangulations.",
            "　　　类来计算德劳内三角剖。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "triangulate【Classes】to compute Delaunay triangulations.",
            "　　　类来计算德劳内三角剖。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "triangulate Classes【to】compute Delaunay triangulations.",
            "　　　类来计算德劳内三角剖。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "triangulate Classes to【compute】Delaunay triangulations.",
            "　　　类来计算德劳内三角剖。"
        ]
    },
    {
        "name": "Delaunay",
        "trans": [
            "triangulate Classes to compute【Delaunay】triangulations.",
            "　　　类来计算德劳内三角剖。"
        ]
    },
    {
        "name": "triangulations.",
        "trans": [
            "triangulate Classes to compute Delaunay【triangulations.】",
            "　　　类来计算德劳内三角剖。"
        ]
    },
    {
        "name": "org.locationtech.jts",
        "trans": [
            "【org.locationtech.jts】",
            "　　　org.locationtech.jts"
        ]
    },
    {
        "name": "CoordinateFilter",
        "trans": [
            "【CoordinateFilter】An interface for classes which use the values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "CoordinateFilter【An】interface for classes which use the values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "CoordinateFilter An【interface】for classes which use the values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CoordinateFilter An interface【for】classes which use the values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "CoordinateFilter An interface for【classes】which use the values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "CoordinateFilter An interface for classes【which】use the values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "use",
        "trans": [
            "CoordinateFilter An interface for classes which【use】the values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateFilter An interface for classes which use【the】values of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "values",
        "trans": [
            "CoordinateFilter An interface for classes which use the【values】of the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateFilter An interface for classes which use the values【of】the coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateFilter An interface for classes which use the values of【the】coordinates in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "CoordinateFilter An interface for classes which use the values of the【coordinates】in a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoordinateFilter An interface for classes which use the values of the coordinates【in】a Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateFilter An interface for classes which use the values of the coordinates in【a】Geometry.",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "CoordinateFilter An interface for classes which use the values of the coordinates in a【Geometry.】",
            "　　　一个接口的类使用几何坐标的值。"
        ]
    },
    {
        "name": "awt",
        "trans": [
            "【awt】Classes to perform conversions from Java2D shape objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "awt【Classes】to perform conversions from Java2D shape objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "awt Classes【to】perform conversions from Java2D shape objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "perform",
        "trans": [
            "awt Classes to【perform】conversions from Java2D shape objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "conversions",
        "trans": [
            "awt Classes to perform【conversions】from Java2D shape objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "awt Classes to perform conversions【from】Java2D shape objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "Java2D",
        "trans": [
            "awt Classes to perform conversions from【Java2D】shape objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "shape",
        "trans": [
            "awt Classes to perform conversions from Java2D【shape】objects.",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "objects.",
        "trans": [
            "awt Classes to perform conversions from Java2D shape【objects.】",
            "　　　从Java2D形状对象类来执行转换。"
        ]
    },
    {
        "name": "edgegraph",
        "trans": [
            "【edgegraph】",
            "　　　org.locationtech.jts.edgegraph"
        ]
    },
    {
        "name": "geomgraph",
        "trans": [
            "【geomgraph】Contains classes that implement topology graphs.",
            "　　　包含类,实现拓扑图形。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "geomgraph【Contains】classes that implement topology graphs.",
            "　　　包含类,实现拓扑图形。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "geomgraph Contains【classes】that implement topology graphs.",
            "　　　包含类,实现拓扑图形。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "geomgraph Contains classes【that】implement topology graphs.",
            "　　　包含类,实现拓扑图形。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "geomgraph Contains classes that【implement】topology graphs.",
            "　　　包含类,实现拓扑图形。"
        ]
    },
    {
        "name": "topology",
        "trans": [
            "geomgraph Contains classes that implement【topology】graphs.",
            "　　　包含类,实现拓扑图形。"
        ]
    },
    {
        "name": "graphs.",
        "trans": [
            "geomgraph Contains classes that implement topology【graphs.】",
            "　　　包含类,实现拓扑图形。"
        ]
    },
    {
        "name": "geomgraph.index",
        "trans": [
            "【geomgraph.index】Contains classes that implement indexes for performing noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "geomgraph.index【Contains】classes that implement indexes for performing noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "geomgraph.index Contains【classes】that implement indexes for performing noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "geomgraph.index Contains classes【that】implement indexes for performing noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "geomgraph.index Contains classes that【implement】indexes for performing noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "indexes",
        "trans": [
            "geomgraph.index Contains classes that implement【indexes】for performing noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "geomgraph.index Contains classes that implement indexes【for】performing noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "performing",
        "trans": [
            "geomgraph.index Contains classes that implement indexes for【performing】noding on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "noding",
        "trans": [
            "geomgraph.index Contains classes that implement indexes for performing【noding】on geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "geomgraph.index Contains classes that implement indexes for performing noding【on】geometry graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "geomgraph.index Contains classes that implement indexes for performing noding on【geometry】graph edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "geomgraph.index Contains classes that implement indexes for performing noding on geometry【graph】edges.",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "edges.",
        "trans": [
            "geomgraph.index Contains classes that implement indexes for performing noding on geometry graph【edges.】",
            "　　　包含类,实现索引上执行节点几何图形边缘。"
        ]
    },
    {
        "name": "index",
        "trans": [
            "【index】Provides classes for various kinds of spatial indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "index【Provides】classes for various kinds of spatial indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "index Provides【classes】for various kinds of spatial indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "index Provides classes【for】various kinds of spatial indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "various",
        "trans": [
            "index Provides classes for【various】kinds of spatial indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "kinds",
        "trans": [
            "index Provides classes for various【kinds】of spatial indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "index Provides classes for various kinds【of】spatial indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "index Provides classes for various kinds of【spatial】indexes.",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "indexes.",
        "trans": [
            "index Provides classes for various kinds of spatial【indexes.】",
            "　　　提供了各种各样的类空间索引。"
        ]
    },
    {
        "name": "index.bintree",
        "trans": [
            "【index.bintree】Contains classes that implement a Binary Interval Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "index.bintree【Contains】classes that implement a Binary Interval Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "index.bintree Contains【classes】that implement a Binary Interval Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "that",
        "trans": [
            "index.bintree Contains classes【that】implement a Binary Interval Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "index.bintree Contains classes that【implement】a Binary Interval Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "a",
        "trans": [
            "index.bintree Contains classes that implement【a】Binary Interval Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "Binary",
        "trans": [
            "index.bintree Contains classes that implement a【Binary】Interval Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "Interval",
        "trans": [
            "index.bintree Contains classes that implement a Binary【Interval】Tree index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "Tree",
        "trans": [
            "index.bintree Contains classes that implement a Binary Interval【Tree】index",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "index",
        "trans": [
            "index.bintree Contains classes that implement a Binary Interval Tree【index】",
            "　　　包含类,实现二叉区间树索引"
        ]
    },
    {
        "name": "index.chain",
        "trans": [
            "【index.chain】Contains classes that implement Monotone Chains",
            "　　　包含类,实现单调链"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "index.chain【Contains】classes that implement Monotone Chains",
            "　　　包含类,实现单调链"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "index.chain Contains【classes】that implement Monotone Chains",
            "　　　包含类,实现单调链"
        ]
    },
    {
        "name": "that",
        "trans": [
            "index.chain Contains classes【that】implement Monotone Chains",
            "　　　包含类,实现单调链"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "index.chain Contains classes that【implement】Monotone Chains",
            "　　　包含类,实现单调链"
        ]
    },
    {
        "name": "Monotone",
        "trans": [
            "index.chain Contains classes that implement【Monotone】Chains",
            "　　　包含类,实现单调链"
        ]
    },
    {
        "name": "Chains",
        "trans": [
            "index.chain Contains classes that implement Monotone【Chains】",
            "　　　包含类,实现单调链"
        ]
    },
    {
        "name": "index.hprtree",
        "trans": [
            "【index.hprtree】",
            "　　　org.locationtech.jts.index.hprtree"
        ]
    },
    {
        "name": "index.intervalrtree",
        "trans": [
            "【index.intervalrtree】Contains classes to implement an R-tree index for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "index.intervalrtree【Contains】classes to implement an R-tree index for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "index.intervalrtree Contains【classes】to implement an R-tree index for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "index.intervalrtree Contains classes【to】implement an R-tree index for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "index.intervalrtree Contains classes to【implement】an R-tree index for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "index.intervalrtree Contains classes to implement【an】R-tree index for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "R-tree",
        "trans": [
            "index.intervalrtree Contains classes to implement an【R-tree】index for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "index",
        "trans": [
            "index.intervalrtree Contains classes to implement an R-tree【index】for one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "index.intervalrtree Contains classes to implement an R-tree index【for】one-dimensional intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "one-dimensional",
        "trans": [
            "index.intervalrtree Contains classes to implement an R-tree index for【one-dimensional】intervals.",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "intervals.",
        "trans": [
            "index.intervalrtree Contains classes to implement an R-tree index for one-dimensional【intervals.】",
            "　　　包含类实现一维区间的r - tree索引。"
        ]
    },
    {
        "name": "index.kdtree",
        "trans": [
            "【index.kdtree】Contains classes which implement a k-D tree index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "index.kdtree【Contains】classes which implement a k-D tree index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "index.kdtree Contains【classes】which implement a k-D tree index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "index.kdtree Contains classes【which】implement a k-D tree index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "index.kdtree Contains classes which【implement】a k-D tree index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "index.kdtree Contains classes which implement【a】k-D tree index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "k-D",
        "trans": [
            "index.kdtree Contains classes which implement a【k-D】tree index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "tree",
        "trans": [
            "index.kdtree Contains classes which implement a k-D【tree】index over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "index",
        "trans": [
            "index.kdtree Contains classes which implement a k-D tree【index】over 2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "over",
        "trans": [
            "index.kdtree Contains classes which implement a k-D tree index【over】2-D point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "2-D",
        "trans": [
            "index.kdtree Contains classes which implement a k-D tree index over【2-D】point data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "index.kdtree Contains classes which implement a k-D tree index over 2-D【point】data.",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "data.",
        "trans": [
            "index.kdtree Contains classes which implement a k-D tree index over 2-D point【data.】",
            "　　　包含类实现一个k d树索引在二维点数据。"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】The internal representation of a list of coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "CoordinateSequence【The】internal representation of a list of coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "internal",
        "trans": [
            "CoordinateSequence The【internal】representation of a list of coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "CoordinateSequence The internal【representation】of a list of coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateSequence The internal representation【of】a list of coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence The internal representation of【a】list of coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "CoordinateSequence The internal representation of a【list】of coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateSequence The internal representation of a list【of】coordinates inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "CoordinateSequence The internal representation of a list of【coordinates】inside a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "inside",
        "trans": [
            "CoordinateSequence The internal representation of a list of coordinates【inside】a Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence The internal representation of a list of coordinates inside【a】Geometry.",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "CoordinateSequence The internal representation of a list of coordinates inside a【Geometry.】",
            "　　　列表的内部表示的坐标几何。"
        ]
    },
    {
        "name": "CoordinateSequenceFactory",
        "trans": [
            "【CoordinateSequenceFactory】A factory to create concrete instances of CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "CoordinateSequenceFactory【A】factory to create concrete instances of CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "factory",
        "trans": [
            "CoordinateSequenceFactory A【factory】to create concrete instances of CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "CoordinateSequenceFactory A factory【to】create concrete instances of CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "create",
        "trans": [
            "CoordinateSequenceFactory A factory to【create】concrete instances of CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "concrete",
        "trans": [
            "CoordinateSequenceFactory A factory to create【concrete】instances of CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "instances",
        "trans": [
            "CoordinateSequenceFactory A factory to create concrete【instances】of CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateSequenceFactory A factory to create concrete instances【of】CoordinateSequences.",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "CoordinateSequences.",
        "trans": [
            "CoordinateSequenceFactory A factory to create concrete instances of【CoordinateSequences.】",
            "　　　一个工厂来创建CoordinateSequences的具体实例。"
        ]
    },
    {
        "name": "CoordinateSequenceFilter",
        "trans": [
            "【CoordinateSequenceFilter】An interface for classes which process the coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "CoordinateSequenceFilter【An】interface for classes which process the coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "CoordinateSequenceFilter An【interface】for classes which process the coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CoordinateSequenceFilter An interface【for】classes which process the coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "CoordinateSequenceFilter An interface for【classes】which process the coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "CoordinateSequenceFilter An interface for classes【which】process the coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "process",
        "trans": [
            "CoordinateSequenceFilter An interface for classes which【process】the coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateSequenceFilter An interface for classes which process【the】coordinates in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "CoordinateSequenceFilter An interface for classes which process the【coordinates】in a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoordinateSequenceFilter An interface for classes which process the coordinates【in】a CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequenceFilter An interface for classes which process the coordinates in【a】CoordinateSequence.",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "CoordinateSequence.",
        "trans": [
            "CoordinateSequenceFilter An interface for classes which process the coordinates in a【CoordinateSequence.】",
            "　　　一个接口的类处理CoordinateSequence坐标。"
        ]
    },
    {
        "name": "GeometryComponentFilter",
        "trans": [
            "【GeometryComponentFilter】Geometry classes support the concept of applying a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "GeometryComponentFilter【Geometry】classes support the concept of applying a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "GeometryComponentFilter Geometry【classes】support the concept of applying a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "support",
        "trans": [
            "GeometryComponentFilter Geometry classes【support】the concept of applying a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryComponentFilter Geometry classes support【the】concept of applying a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "concept",
        "trans": [
            "GeometryComponentFilter Geometry classes support the【concept】of applying a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept【of】applying a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "applying",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept of【applying】a GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept of applying【a】GeometryComponentFilter filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "GeometryComponentFilter",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept of applying a【GeometryComponentFilter】filter to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "filter",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept of applying a GeometryComponentFilter【filter】to the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "to",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept of applying a GeometryComponentFilter filter【to】the Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept of applying a GeometryComponentFilter filter to【the】Geometry.",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "GeometryComponentFilter Geometry classes support the concept of applying a GeometryComponentFilter filter to the【Geometry.】",
            "　　　几何类支持应用的概念"
        ]
    },
    {
        "name": "GeometryFilter",
        "trans": [
            "【GeometryFilter】GeometryCollection classes support the concept of applying a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "GeometryCollection",
        "trans": [
            "GeometryFilter【GeometryCollection】classes support the concept of applying a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "GeometryFilter GeometryCollection【classes】support the concept of applying a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "support",
        "trans": [
            "GeometryFilter GeometryCollection classes【support】the concept of applying a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryFilter GeometryCollection classes support【the】concept of applying a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "concept",
        "trans": [
            "GeometryFilter GeometryCollection classes support the【concept】of applying a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryFilter GeometryCollection classes support the concept【of】applying a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "applying",
        "trans": [
            "GeometryFilter GeometryCollection classes support the concept of【applying】a GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryFilter GeometryCollection classes support the concept of applying【a】GeometryFilter to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "GeometryFilter",
        "trans": [
            "GeometryFilter GeometryCollection classes support the concept of applying a【GeometryFilter】to the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "to",
        "trans": [
            "GeometryFilter GeometryCollection classes support the concept of applying a GeometryFilter【to】the Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryFilter GeometryCollection classes support the concept of applying a GeometryFilter to【the】Geometry.",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "GeometryFilter GeometryCollection classes support the concept of applying a GeometryFilter to the【Geometry.】",
            "　　　GeometryCollection类支持的概念"
        ]
    },
    {
        "name": "Lineal",
        "trans": [
            "【Lineal】Identifies Geometry subclasses which are 1-dimensional and have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Identifies",
        "trans": [
            "Lineal【Identifies】Geometry subclasses which are 1-dimensional and have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Lineal Identifies【Geometry】subclasses which are 1-dimensional and have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "subclasses",
        "trans": [
            "Lineal Identifies Geometry【subclasses】which are 1-dimensional and have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Lineal Identifies Geometry subclasses【which】are 1-dimensional and have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "are",
        "trans": [
            "Lineal Identifies Geometry subclasses which【are】1-dimensional and have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "1-dimensional",
        "trans": [
            "Lineal Identifies Geometry subclasses which are【1-dimensional】and have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Lineal Identifies Geometry subclasses which are 1-dimensional【and】have components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "have",
        "trans": [
            "Lineal Identifies Geometry subclasses which are 1-dimensional and【have】components which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "components",
        "trans": [
            "Lineal Identifies Geometry subclasses which are 1-dimensional and have【components】which are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Lineal Identifies Geometry subclasses which are 1-dimensional and have components【which】are LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "are",
        "trans": [
            "Lineal Identifies Geometry subclasses which are 1-dimensional and have components which【are】LineStrings.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "LineStrings.",
        "trans": [
            "Lineal Identifies Geometry subclasses which are 1-dimensional and have components which are【LineStrings.】",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Polygonal",
        "trans": [
            "【Polygonal】Identifies Geometry subclasses which are 2-dimensional and have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Identifies",
        "trans": [
            "Polygonal【Identifies】Geometry subclasses which are 2-dimensional and have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Polygonal Identifies【Geometry】subclasses which are 2-dimensional and have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "subclasses",
        "trans": [
            "Polygonal Identifies Geometry【subclasses】which are 2-dimensional and have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Polygonal Identifies Geometry subclasses【which】are 2-dimensional and have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "are",
        "trans": [
            "Polygonal Identifies Geometry subclasses which【are】2-dimensional and have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "2-dimensional",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are【2-dimensional】and have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are 2-dimensional【and】have components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "have",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are 2-dimensional and【have】components which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "components",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are 2-dimensional and have【components】which have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are 2-dimensional and have components【which】have Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "have",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are 2-dimensional and have components which【have】Lineal boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Lineal",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are 2-dimensional and have components which have【Lineal】boundaries.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "boundaries.",
        "trans": [
            "Polygonal Identifies Geometry subclasses which are 2-dimensional and have components which have Lineal【boundaries.】",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "index.quadtree",
        "trans": [
            "【index.quadtree】Contains classes that implement a Quadtree spatial index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "index.quadtree【Contains】classes that implement a Quadtree spatial index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "index.quadtree Contains【classes】that implement a Quadtree spatial index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "that",
        "trans": [
            "index.quadtree Contains classes【that】implement a Quadtree spatial index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "index.quadtree Contains classes that【implement】a Quadtree spatial index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "a",
        "trans": [
            "index.quadtree Contains classes that implement【a】Quadtree spatial index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "Quadtree",
        "trans": [
            "index.quadtree Contains classes that implement a【Quadtree】spatial index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "index.quadtree Contains classes that implement a Quadtree【spatial】index",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "index",
        "trans": [
            "index.quadtree Contains classes that implement a Quadtree spatial【index】",
            "　　　包含的类实现一个四叉树空间索引"
        ]
    },
    {
        "name": "index.strtree",
        "trans": [
            "【index.strtree】Contains 2-D and 1-D versions of the Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "index.strtree【Contains】2-D and 1-D versions of the Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "2-D",
        "trans": [
            "index.strtree Contains【2-D】and 1-D versions of the Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "index.strtree Contains 2-D【and】1-D versions of the Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "1-D",
        "trans": [
            "index.strtree Contains 2-D and【1-D】versions of the Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "versions",
        "trans": [
            "index.strtree Contains 2-D and 1-D【versions】of the Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions【of】the Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions of【the】Sort-Tile-Recursive (STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "Sort-Tile-Recursive",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions of the【Sort-Tile-Recursive】(STR) tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "(STR)",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions of the Sort-Tile-Recursive【(STR)】tree, a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "tree,",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions of the Sort-Tile-Recursive (STR)【tree,】a query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions of the Sort-Tile-Recursive (STR) tree,【a】query-only R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "query-only",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions of the Sort-Tile-Recursive (STR) tree, a【query-only】R-tree.",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "R-tree.",
        "trans": [
            "index.strtree Contains 2-D and 1-D versions of the Sort-Tile-Recursive (STR) tree, a query-only【R-tree.】",
            "　　　包含二维和一维版本的Sort-Tile-Recursive (STR)树,只进行查询的r - tree。"
        ]
    },
    {
        "name": "index.sweepline",
        "trans": [
            "【index.sweepline】Contains classes which implement a sweepline algorithm for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "index.sweepline【Contains】classes which implement a sweepline algorithm for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "index.sweepline Contains【classes】which implement a sweepline algorithm for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "index.sweepline Contains classes【which】implement a sweepline algorithm for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "index.sweepline Contains classes which【implement】a sweepline algorithm for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "index.sweepline Contains classes which implement【a】sweepline algorithm for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "sweepline",
        "trans": [
            "index.sweepline Contains classes which implement a【sweepline】algorithm for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "algorithm",
        "trans": [
            "index.sweepline Contains classes which implement a sweepline【algorithm】for scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "index.sweepline Contains classes which implement a sweepline algorithm【for】scanning geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "scanning",
        "trans": [
            "index.sweepline Contains classes which implement a sweepline algorithm for【scanning】geometric data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "index.sweepline Contains classes which implement a sweepline algorithm for scanning【geometric】data structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "data",
        "trans": [
            "index.sweepline Contains classes which implement a sweepline algorithm for scanning geometric【data】structures.",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "structures.",
        "trans": [
            "index.sweepline Contains classes which implement a sweepline algorithm for scanning geometric data【structures.】",
            "　　　包含类实现一个sweepline扫描几何算法的数据结构。"
        ]
    },
    {
        "name": "math",
        "trans": [
            "【math】",
            "　　　org.locationtech.jts.math"
        ]
    },
    {
        "name": "noding",
        "trans": [
            "【noding】Classes to compute nodings for arrangements of line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "noding【Classes】to compute nodings for arrangements of line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "noding Classes【to】compute nodings for arrangements of line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "noding Classes to【compute】nodings for arrangements of line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "nodings",
        "trans": [
            "noding Classes to compute【nodings】for arrangements of line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "noding Classes to compute nodings【for】arrangements of line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "arrangements",
        "trans": [
            "noding Classes to compute nodings for【arrangements】of line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "noding Classes to compute nodings for arrangements【of】line segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "line",
        "trans": [
            "noding Classes to compute nodings for arrangements of【line】segments and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "noding Classes to compute nodings for arrangements of line【segments】and line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "noding Classes to compute nodings for arrangements of line segments【and】line segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "line",
        "trans": [
            "noding Classes to compute nodings for arrangements of line segments and【line】segment sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "noding Classes to compute nodings for arrangements of line segments and line【segment】sequences.",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "sequences.",
        "trans": [
            "noding Classes to compute nodings for arrangements of line segments and line segment【sequences.】",
            "　　　类计算nodings线段与线段序列的安排。"
        ]
    },
    {
        "name": "noding.snap",
        "trans": [
            "【noding.snap】",
            "　　　org.locationtech.jts.noding.snap"
        ]
    },
    {
        "name": "noding.snapround",
        "trans": [
            "【noding.snapround】Contains classes to implement the Snap Rounding algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "noding.snapround【Contains】classes to implement the Snap Rounding algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "noding.snapround Contains【classes】to implement the Snap Rounding algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "noding.snapround Contains classes【to】implement the Snap Rounding algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "noding.snapround Contains classes to【implement】the Snap Rounding algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "noding.snapround Contains classes to implement【the】Snap Rounding algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "Snap",
        "trans": [
            "noding.snapround Contains classes to implement the【Snap】Rounding algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "Rounding",
        "trans": [
            "noding.snapround Contains classes to implement the Snap【Rounding】algorithm for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "algorithm",
        "trans": [
            "noding.snapround Contains classes to implement the Snap Rounding【algorithm】for noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "noding.snapround Contains classes to implement the Snap Rounding algorithm【for】noding linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "noding",
        "trans": [
            "noding.snapround Contains classes to implement the Snap Rounding algorithm for【noding】linestrings.",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "linestrings.",
        "trans": [
            "noding.snapround Contains classes to implement the Snap Rounding algorithm for noding【linestrings.】",
            "　　　包含的类来实现快速舍入节点线算法。"
        ]
    },
    {
        "name": "Puntal",
        "trans": [
            "【Puntal】Identifies Geometry subclasses which are 0-dimensional and with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Identifies",
        "trans": [
            "Puntal【Identifies】Geometry subclasses which are 0-dimensional and with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Puntal Identifies【Geometry】subclasses which are 0-dimensional and with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "subclasses",
        "trans": [
            "Puntal Identifies Geometry【subclasses】which are 0-dimensional and with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Puntal Identifies Geometry subclasses【which】are 0-dimensional and with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "are",
        "trans": [
            "Puntal Identifies Geometry subclasses which【are】0-dimensional and with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "0-dimensional",
        "trans": [
            "Puntal Identifies Geometry subclasses which are【0-dimensional】and with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Puntal Identifies Geometry subclasses which are 0-dimensional【and】with components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "with",
        "trans": [
            "Puntal Identifies Geometry subclasses which are 0-dimensional and【with】components which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "components",
        "trans": [
            "Puntal Identifies Geometry subclasses which are 0-dimensional and with【components】which are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Puntal Identifies Geometry subclasses which are 0-dimensional and with components【which】are Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "are",
        "trans": [
            "Puntal Identifies Geometry subclasses which are 0-dimensional and with components which【are】Points.",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "Points.",
        "trans": [
            "Puntal Identifies Geometry subclasses which are 0-dimensional and with components which are【Points.】",
            "　　　确定几何子类的"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "【operation】Provides classes for implementing operations on geometries",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "operation【Provides】classes for implementing operations on geometries",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "operation Provides【classes】for implementing operations on geometries",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "for",
        "trans": [
            "operation Provides classes【for】implementing operations on geometries",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "implementing",
        "trans": [
            "operation Provides classes for【implementing】operations on geometries",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "operations",
        "trans": [
            "operation Provides classes for implementing【operations】on geometries",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "on",
        "trans": [
            "operation Provides classes for implementing operations【on】geometries",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "operation Provides classes for implementing operations on【geometries】",
            "　　　提供了对几何图形类实现操作"
        ]
    },
    {
        "name": "planargraph",
        "trans": [
            "【planargraph】Contains classes to implement a planar graph data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "planargraph【Contains】classes to implement a planar graph data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "planargraph Contains【classes】to implement a planar graph data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "planargraph Contains classes【to】implement a planar graph data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "planargraph Contains classes to【implement】a planar graph data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "planargraph Contains classes to implement【a】planar graph data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "planargraph Contains classes to implement a【planar】graph data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "planargraph Contains classes to implement a planar【graph】data structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "data",
        "trans": [
            "planargraph Contains classes to implement a planar graph【data】structure.",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "structure.",
        "trans": [
            "planargraph Contains classes to implement a planar graph data【structure.】",
            "　　　包含的类实现一个数据结构平面图。"
        ]
    },
    {
        "name": "planargraph.algorithm",
        "trans": [
            "【planargraph.algorithm】Classes which implement graph algorithms on planar graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "planargraph.algorithm【Classes】which implement graph algorithms on planar graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "planargraph.algorithm Classes【which】implement graph algorithms on planar graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "planargraph.algorithm Classes which【implement】graph algorithms on planar graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "planargraph.algorithm Classes which implement【graph】algorithms on planar graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "algorithms",
        "trans": [
            "planargraph.algorithm Classes which implement graph【algorithms】on planar graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "planargraph.algorithm Classes which implement graph algorithms【on】planar graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "planargraph.algorithm Classes which implement graph algorithms on【planar】graphs.",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "graphs.",
        "trans": [
            "planargraph.algorithm Classes which implement graph algorithms on planar【graphs.】",
            "　　　类的实现图算法在平面图形。"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "【precision】Provides classes for analyzing and manipulating the precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "precision【Provides】classes for analyzing and manipulating the precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "precision Provides【classes】for analyzing and manipulating the precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "for",
        "trans": [
            "precision Provides classes【for】analyzing and manipulating the precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "analyzing",
        "trans": [
            "precision Provides classes for【analyzing】and manipulating the precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "and",
        "trans": [
            "precision Provides classes for analyzing【and】manipulating the precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "manipulating",
        "trans": [
            "precision Provides classes for analyzing and【manipulating】the precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "the",
        "trans": [
            "precision Provides classes for analyzing and manipulating【the】precision of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "precision Provides classes for analyzing and manipulating the【precision】of Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "of",
        "trans": [
            "precision Provides classes for analyzing and manipulating the precision【of】Geometries.",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "Geometries.",
        "trans": [
            "precision Provides classes for analyzing and manipulating the precision of【Geometries.】",
            "　　　提供了分析和类"
        ]
    },
    {
        "name": "shape",
        "trans": [
            "【shape】",
            "　　　org.locationtech.jts.shape"
        ]
    },
    {
        "name": "shape.fractal",
        "trans": [
            "【shape.fractal】",
            "　　　org.locationtech.jts.shape.fractal"
        ]
    },
    {
        "name": "shape.random",
        "trans": [
            "【shape.random】",
            "　　　org.locationtech.jts.shape.random"
        ]
    },
    {
        "name": "triangulate.quadedge",
        "trans": [
            "【triangulate.quadedge】Classes to implement a topological subdivision of quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "triangulate.quadedge【Classes】to implement a topological subdivision of quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "to",
        "trans": [
            "triangulate.quadedge Classes【to】implement a topological subdivision of quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "implement",
        "trans": [
            "triangulate.quadedge Classes to【implement】a topological subdivision of quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "a",
        "trans": [
            "triangulate.quadedge Classes to implement【a】topological subdivision of quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "triangulate.quadedge Classes to implement a【topological】subdivision of quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "subdivision",
        "trans": [
            "triangulate.quadedge Classes to implement a topological【subdivision】of quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "of",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision【of】quadeges, to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "quadeges,",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of【quadeges,】to support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "to",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of quadeges,【to】support creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "support",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of quadeges, to【support】creating triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "creating",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of quadeges, to support【creating】triangulations and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "triangulations",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of quadeges, to support creating【triangulations】and Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "and",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of quadeges, to support creating triangulations【and】Voronoi diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "Voronoi",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of quadeges, to support creating triangulations and【Voronoi】diagrams.",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "diagrams.",
        "trans": [
            "triangulate.quadedge Classes to implement a topological subdivision of quadeges, to support creating triangulations and Voronoi【diagrams.】",
            "　　　类来实现拓扑quadeges细分,以支持创建剖分"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】A lightweight class used to store coordinates on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Coordinate【A】lightweight class used to store coordinates on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "lightweight",
        "trans": [
            "Coordinate A【lightweight】class used to store coordinates on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "class",
        "trans": [
            "Coordinate A lightweight【class】used to store coordinates on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "used",
        "trans": [
            "Coordinate A lightweight class【used】to store coordinates on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Coordinate A lightweight class used【to】store coordinates on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "store",
        "trans": [
            "Coordinate A lightweight class used to【store】coordinates on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "Coordinate A lightweight class used to store【coordinates】on the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "Coordinate A lightweight class used to store coordinates【on】the 2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate A lightweight class used to store coordinates on【the】2-dimensional Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "2-dimensional",
        "trans": [
            "Coordinate A lightweight class used to store coordinates on the【2-dimensional】Cartesian plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "Coordinate A lightweight class used to store coordinates on the 2-dimensional【Cartesian】plane.",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "plane.",
        "trans": [
            "Coordinate A lightweight class used to store coordinates on the 2-dimensional Cartesian【plane.】",
            "　　　一个轻量级的类用于存储二维笛卡尔平面上的坐标。"
        ]
    },
    {
        "name": "util",
        "trans": [
            "【util】Contains support classes for the Java Topology Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "util【Contains】support classes for the Java Topology Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "support",
        "trans": [
            "util Contains【support】classes for the Java Topology Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "util Contains support【classes】for the Java Topology Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "util Contains support classes【for】the Java Topology Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "util Contains support classes for【the】Java Topology Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "Java",
        "trans": [
            "util Contains support classes for the【Java】Topology Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "Topology",
        "trans": [
            "util Contains support classes for the Java【Topology】Suite.",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "Suite.",
        "trans": [
            "util Contains support classes for the Java Topology【Suite.】",
            "　　　套件包含Java支持类拓扑。"
        ]
    },
    {
        "name": "Coordinate.DimensionalComparator",
        "trans": [
            "【Coordinate.DimensionalComparator】Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "Compares",
        "trans": [
            "Coordinate.DimensionalComparator【Compares】two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "two",
        "trans": [
            "Coordinate.DimensionalComparator Compares【two】Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "Coordinates,",
        "trans": [
            "Coordinate.DimensionalComparator Compares two【Coordinates,】allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "allowing",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates,【allowing】for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing【for】either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "either",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for【either】a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either【a】2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "2-dimensional",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a【2-dimensional】or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "or",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional【or】3-dimensional comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "3-dimensional",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or【3-dimensional】comparison, and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "comparison,",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional【comparison,】and handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison,【and】handling NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "handling",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and【handling】NaN values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "NaN",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling【NaN】values correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "values",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN【values】correctly.",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "correctly.",
        "trans": [
            "Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values【correctly.】",
            "　　　比较两个坐标,使二维"
        ]
    },
    {
        "name": "CoordinateArrays",
        "trans": [
            "【CoordinateArrays】Useful utility functions for handling Coordinate arrays",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "Useful",
        "trans": [
            "CoordinateArrays【Useful】utility functions for handling Coordinate arrays",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "CoordinateArrays Useful【utility】functions for handling Coordinate arrays",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "CoordinateArrays Useful utility【functions】for handling Coordinate arrays",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CoordinateArrays Useful utility functions【for】handling Coordinate arrays",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "handling",
        "trans": [
            "CoordinateArrays Useful utility functions for【handling】Coordinate arrays",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "CoordinateArrays Useful utility functions for handling【Coordinate】arrays",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "CoordinateArrays Useful utility functions for handling Coordinate【arrays】",
            "　　　有用的实用函数处理坐标数组"
        ]
    },
    {
        "name": "CoordinateArrays.BidirectionalComparator",
        "trans": [
            "【CoordinateArrays.BidirectionalComparator】A Comparator for Coordinate arrays modulo their directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "A",
        "trans": [
            "CoordinateArrays.BidirectionalComparator【A】Comparator for Coordinate arrays modulo their directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "Comparator",
        "trans": [
            "CoordinateArrays.BidirectionalComparator A【Comparator】for Coordinate arrays modulo their directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CoordinateArrays.BidirectionalComparator A Comparator【for】Coordinate arrays modulo their directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "CoordinateArrays.BidirectionalComparator A Comparator for【Coordinate】arrays modulo their directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "CoordinateArrays.BidirectionalComparator A Comparator for Coordinate【arrays】modulo their directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "modulo",
        "trans": [
            "CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays【modulo】their directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "their",
        "trans": [
            "CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays modulo【their】directionality.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "directionality.",
        "trans": [
            "CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays modulo their【directionality.】",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "CoordinateArrays.ForwardComparator",
        "trans": [
            "【CoordinateArrays.ForwardComparator】A Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "A",
        "trans": [
            "CoordinateArrays.ForwardComparator【A】Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "Comparator",
        "trans": [
            "CoordinateArrays.ForwardComparator A【Comparator】for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator【for】Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for【Coordinate】arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate【arrays】in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays【in】the forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in【the】forward direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "forward",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the【forward】direction of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "direction",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward【direction】of their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction【of】their coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "their",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of【their】coordinates, using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "coordinates,",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their【coordinates,】using lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "using",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates,【using】lexicographic ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "lexicographic",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates, using【lexicographic】ordering.",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "ordering.",
        "trans": [
            "CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic【ordering.】",
            "　　　比较器的坐标数组"
        ]
    },
    {
        "name": "CoordinateList",
        "trans": [
            "【CoordinateList】A list of Coordinates, which may be set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "A",
        "trans": [
            "CoordinateList【A】list of Coordinates, which may be set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "list",
        "trans": [
            "CoordinateList A【list】of Coordinates, which may be set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateList A list【of】Coordinates, which may be set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "Coordinates,",
        "trans": [
            "CoordinateList A list of【Coordinates,】which may be set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "which",
        "trans": [
            "CoordinateList A list of Coordinates,【which】may be set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "may",
        "trans": [
            "CoordinateList A list of Coordinates, which【may】be set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "be",
        "trans": [
            "CoordinateList A list of Coordinates, which may【be】set to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "set",
        "trans": [
            "CoordinateList A list of Coordinates, which may be【set】to prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "to",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set【to】prevent repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "prevent",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to【prevent】repeated coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "repeated",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to prevent【repeated】coordinates from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to prevent repeated【coordinates】from occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "from",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to prevent repeated coordinates【from】occurring in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "occurring",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to prevent repeated coordinates from【occurring】in the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to prevent repeated coordinates from occurring【in】the list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to prevent repeated coordinates from occurring in【the】list.",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "list.",
        "trans": [
            "CoordinateList A list of Coordinates, which may be set to prevent repeated coordinates from occurring in the【list.】",
            "　　　的坐标,这可能"
        ]
    },
    {
        "name": "Coordinates",
        "trans": [
            "【Coordinates】Useful utility functions for handling Coordinate objects.",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "Useful",
        "trans": [
            "Coordinates【Useful】utility functions for handling Coordinate objects.",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "Coordinates Useful【utility】functions for handling Coordinate objects.",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "Coordinates Useful utility【functions】for handling Coordinate objects.",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Coordinates Useful utility functions【for】handling Coordinate objects.",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "handling",
        "trans": [
            "Coordinates Useful utility functions for【handling】Coordinate objects.",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "Coordinates Useful utility functions for handling【Coordinate】objects.",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "objects.",
        "trans": [
            "Coordinates Useful utility functions for handling Coordinate【objects.】",
            "　　　有用的实用函数处理协调对象。"
        ]
    },
    {
        "name": "CoordinateSequenceComparator",
        "trans": [
            "【CoordinateSequenceComparator】Compares two CoordinateSequences.",
            "　　　比较两个CoordinateSequences。"
        ]
    },
    {
        "name": "Compares",
        "trans": [
            "CoordinateSequenceComparator【Compares】two CoordinateSequences.",
            "　　　比较两个CoordinateSequences。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "CoordinateSequenceComparator Compares【two】CoordinateSequences.",
            "　　　比较两个CoordinateSequences。"
        ]
    },
    {
        "name": "CoordinateSequences.",
        "trans": [
            "CoordinateSequenceComparator Compares two【CoordinateSequences.】",
            "　　　比较两个CoordinateSequences。"
        ]
    },
    {
        "name": "CoordinateSequences",
        "trans": [
            "【CoordinateSequences】Utility functions for manipulating CoordinateSequences",
            "　　　效用函数操纵CoordinateSequences"
        ]
    },
    {
        "name": "Utility",
        "trans": [
            "CoordinateSequences【Utility】functions for manipulating CoordinateSequences",
            "　　　效用函数操纵CoordinateSequences"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "CoordinateSequences Utility【functions】for manipulating CoordinateSequences",
            "　　　效用函数操纵CoordinateSequences"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CoordinateSequences Utility functions【for】manipulating CoordinateSequences",
            "　　　效用函数操纵CoordinateSequences"
        ]
    },
    {
        "name": "manipulating",
        "trans": [
            "CoordinateSequences Utility functions for【manipulating】CoordinateSequences",
            "　　　效用函数操纵CoordinateSequences"
        ]
    },
    {
        "name": "CoordinateSequences",
        "trans": [
            "CoordinateSequences Utility functions for manipulating【CoordinateSequences】",
            "　　　效用函数操纵CoordinateSequences"
        ]
    },
    {
        "name": "CoordinateXY",
        "trans": [
            "【CoordinateXY】Coordinate subclass supporting XY ordinates.",
            "　　　协调支持子类XY纵坐标。"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "CoordinateXY【Coordinate】subclass supporting XY ordinates.",
            "　　　协调支持子类XY纵坐标。"
        ]
    },
    {
        "name": "subclass",
        "trans": [
            "CoordinateXY Coordinate【subclass】supporting XY ordinates.",
            "　　　协调支持子类XY纵坐标。"
        ]
    },
    {
        "name": "supporting",
        "trans": [
            "CoordinateXY Coordinate subclass【supporting】XY ordinates.",
            "　　　协调支持子类XY纵坐标。"
        ]
    },
    {
        "name": "XY",
        "trans": [
            "CoordinateXY Coordinate subclass supporting【XY】ordinates.",
            "　　　协调支持子类XY纵坐标。"
        ]
    },
    {
        "name": "ordinates.",
        "trans": [
            "CoordinateXY Coordinate subclass supporting XY【ordinates.】",
            "　　　协调支持子类XY纵坐标。"
        ]
    },
    {
        "name": "CoordinateXYM",
        "trans": [
            "【CoordinateXYM】Coordinate subclass supporting XYM ordinates.",
            "　　　协调支持子类XYM纵坐标。"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "CoordinateXYM【Coordinate】subclass supporting XYM ordinates.",
            "　　　协调支持子类XYM纵坐标。"
        ]
    },
    {
        "name": "subclass",
        "trans": [
            "CoordinateXYM Coordinate【subclass】supporting XYM ordinates.",
            "　　　协调支持子类XYM纵坐标。"
        ]
    },
    {
        "name": "supporting",
        "trans": [
            "CoordinateXYM Coordinate subclass【supporting】XYM ordinates.",
            "　　　协调支持子类XYM纵坐标。"
        ]
    },
    {
        "name": "XYM",
        "trans": [
            "CoordinateXYM Coordinate subclass supporting【XYM】ordinates.",
            "　　　协调支持子类XYM纵坐标。"
        ]
    },
    {
        "name": "ordinates.",
        "trans": [
            "CoordinateXYM Coordinate subclass supporting XYM【ordinates.】",
            "　　　协调支持子类XYM纵坐标。"
        ]
    },
    {
        "name": "CoordinateXYZM",
        "trans": [
            "【CoordinateXYZM】Coordinate subclass supporting XYZM ordinates.",
            "　　　协调支持子类XYZM纵坐标。"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "CoordinateXYZM【Coordinate】subclass supporting XYZM ordinates.",
            "　　　协调支持子类XYZM纵坐标。"
        ]
    },
    {
        "name": "subclass",
        "trans": [
            "CoordinateXYZM Coordinate【subclass】supporting XYZM ordinates.",
            "　　　协调支持子类XYZM纵坐标。"
        ]
    },
    {
        "name": "supporting",
        "trans": [
            "CoordinateXYZM Coordinate subclass【supporting】XYZM ordinates.",
            "　　　协调支持子类XYZM纵坐标。"
        ]
    },
    {
        "name": "XYZM",
        "trans": [
            "CoordinateXYZM Coordinate subclass supporting【XYZM】ordinates.",
            "　　　协调支持子类XYZM纵坐标。"
        ]
    },
    {
        "name": "ordinates.",
        "trans": [
            "CoordinateXYZM Coordinate subclass supporting XYZM【ordinates.】",
            "　　　协调支持子类XYZM纵坐标。"
        ]
    },
    {
        "name": "Dimension",
        "trans": [
            "【Dimension】Provides constants representing the dimensions of a point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "Dimension【Provides】constants representing the dimensions of a point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "constants",
        "trans": [
            "Dimension Provides【constants】representing the dimensions of a point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "Dimension Provides constants【representing】the dimensions of a point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Dimension Provides constants representing【the】dimensions of a point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "dimensions",
        "trans": [
            "Dimension Provides constants representing the【dimensions】of a point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Dimension Provides constants representing the dimensions【of】a point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Dimension Provides constants representing the dimensions of【a】point, a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "point,",
        "trans": [
            "Dimension Provides constants representing the dimensions of a【point,】a curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Dimension Provides constants representing the dimensions of a point,【a】curve and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "curve",
        "trans": [
            "Dimension Provides constants representing the dimensions of a point, a【curve】and a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Dimension Provides constants representing the dimensions of a point, a curve【and】a surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Dimension Provides constants representing the dimensions of a point, a curve and【a】surface.",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "surface.",
        "trans": [
            "Dimension Provides constants representing the dimensions of a point, a curve and a【surface.】",
            "　　　提供常量代表一个点的尺寸,曲线和曲面。"
        ]
    },
    {
        "name": "Envelope",
        "trans": [
            "【Envelope】Defines a rectangular region of the 2D coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "Defines",
        "trans": [
            "Envelope【Defines】a rectangular region of the 2D coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Envelope Defines【a】rectangular region of the 2D coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "rectangular",
        "trans": [
            "Envelope Defines a【rectangular】region of the 2D coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "region",
        "trans": [
            "Envelope Defines a rectangular【region】of the 2D coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Envelope Defines a rectangular region【of】the 2D coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Envelope Defines a rectangular region of【the】2D coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "2D",
        "trans": [
            "Envelope Defines a rectangular region of the【2D】coordinate plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "Envelope Defines a rectangular region of the 2D【coordinate】plane.",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "plane.",
        "trans": [
            "Envelope Defines a rectangular region of the 2D coordinate【plane.】",
            "　　　定义了一个矩形区域的二维坐标平面。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "【Geometry】A representation of a planar, linear vector geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Geometry【A】representation of a planar, linear vector geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "Geometry A【representation】of a planar, linear vector geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Geometry A representation【of】a planar, linear vector geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Geometry A representation of【a】planar, linear vector geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "planar,",
        "trans": [
            "Geometry A representation of a【planar,】linear vector geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "Geometry A representation of a planar,【linear】vector geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "vector",
        "trans": [
            "Geometry A representation of a planar, linear【vector】geometry.",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "Geometry A representation of a planar, linear vector【geometry.】",
            "　　　平面的表示,线性向量几何。"
        ]
    },
    {
        "name": "GeometryCollection",
        "trans": [
            "【GeometryCollection】Models a collection of Geometrys of arbitrary type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "GeometryCollection【Models】a collection of Geometrys of arbitrary type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryCollection Models【a】collection of Geometrys of arbitrary type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "GeometryCollection Models a【collection】of Geometrys of arbitrary type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryCollection Models a collection【of】Geometrys of arbitrary type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GeometryCollection Models a collection of【Geometrys】of arbitrary type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryCollection Models a collection of Geometrys【of】arbitrary type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "arbitrary",
        "trans": [
            "GeometryCollection Models a collection of Geometrys of【arbitrary】type and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "type",
        "trans": [
            "GeometryCollection Models a collection of Geometrys of arbitrary【type】and dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "and",
        "trans": [
            "GeometryCollection Models a collection of Geometrys of arbitrary type【and】dimension.",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "dimension.",
        "trans": [
            "GeometryCollection Models a collection of Geometrys of arbitrary type and【dimension.】",
            "　　　模型的几何形状的集合"
        ]
    },
    {
        "name": "GeometryCollectionIterator",
        "trans": [
            "【GeometryCollectionIterator】Iterates over all Geometrys in a Geometry, (which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "Iterates",
        "trans": [
            "GeometryCollectionIterator【Iterates】over all Geometrys in a Geometry, (which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "over",
        "trans": [
            "GeometryCollectionIterator Iterates【over】all Geometrys in a Geometry, (which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "all",
        "trans": [
            "GeometryCollectionIterator Iterates over【all】Geometrys in a Geometry, (which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GeometryCollectionIterator Iterates over all【Geometrys】in a Geometry, (which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys【in】a Geometry, (which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in【a】Geometry, (which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "Geometry,",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a【Geometry,】(which may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "(which",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry,【(which】may be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "may",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which【may】be either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "be",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may【be】either a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "either",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may be【either】a collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may be either【a】collection or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may be either a【collection】or an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "or",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may be either a collection【or】an atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may be either a collection or【an】atomic geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "atomic",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may be either a collection or an【atomic】geometry).",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "geometry).",
        "trans": [
            "GeometryCollectionIterator Iterates over all Geometrys in a Geometry, (which may be either a collection or an atomic【geometry).】",
            "　　　遍历所有几何几何,"
        ]
    },
    {
        "name": "GeometryFactory",
        "trans": [
            "【GeometryFactory】Supplies a set of utility methods for building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "Supplies",
        "trans": [
            "GeometryFactory【Supplies】a set of utility methods for building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryFactory Supplies【a】set of utility methods for building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "set",
        "trans": [
            "GeometryFactory Supplies a【set】of utility methods for building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryFactory Supplies a set【of】utility methods for building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "GeometryFactory Supplies a set of【utility】methods for building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "methods",
        "trans": [
            "GeometryFactory Supplies a set of utility【methods】for building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryFactory Supplies a set of utility methods【for】building Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "building",
        "trans": [
            "GeometryFactory Supplies a set of utility methods for【building】Geometry objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "GeometryFactory Supplies a set of utility methods for building【Geometry】objects from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "objects",
        "trans": [
            "GeometryFactory Supplies a set of utility methods for building Geometry【objects】from lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "from",
        "trans": [
            "GeometryFactory Supplies a set of utility methods for building Geometry objects【from】lists of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "lists",
        "trans": [
            "GeometryFactory Supplies a set of utility methods for building Geometry objects from【lists】of Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryFactory Supplies a set of utility methods for building Geometry objects from lists【of】Coordinates.",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "Coordinates.",
        "trans": [
            "GeometryFactory Supplies a set of utility methods for building Geometry objects from lists of【Coordinates.】",
            "　　　提供一套实用程序方法构建几何对象列表"
        ]
    },
    {
        "name": "IntersectionMatrix",
        "trans": [
            "【IntersectionMatrix】Models a Dimensionally Extended Nine-Intersection Model (DE-9IM) matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "IntersectionMatrix【Models】a Dimensionally Extended Nine-Intersection Model (DE-9IM) matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IntersectionMatrix Models【a】Dimensionally Extended Nine-Intersection Model (DE-9IM) matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "Dimensionally",
        "trans": [
            "IntersectionMatrix Models a【Dimensionally】Extended Nine-Intersection Model (DE-9IM) matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "Extended",
        "trans": [
            "IntersectionMatrix Models a Dimensionally【Extended】Nine-Intersection Model (DE-9IM) matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "Nine-Intersection",
        "trans": [
            "IntersectionMatrix Models a Dimensionally Extended【Nine-Intersection】Model (DE-9IM) matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "Model",
        "trans": [
            "IntersectionMatrix Models a Dimensionally Extended Nine-Intersection【Model】(DE-9IM) matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "(DE-9IM)",
        "trans": [
            "IntersectionMatrix Models a Dimensionally Extended Nine-Intersection Model【(DE-9IM)】matrix.",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "matrix.",
        "trans": [
            "IntersectionMatrix Models a Dimensionally Extended Nine-Intersection Model (DE-9IM)【matrix.】",
            "　　　模型一维扩展Nine-Intersection模型(DE-9IM)矩阵。"
        ]
    },
    {
        "name": "LinearRing",
        "trans": [
            "【LinearRing】Models an OGC SFS LinearRing.",
            "　　　OGC SFS线性模型。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "LinearRing【Models】an OGC SFS LinearRing.",
            "　　　OGC SFS线性模型。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "LinearRing Models【an】OGC SFS LinearRing.",
            "　　　OGC SFS线性模型。"
        ]
    },
    {
        "name": "OGC",
        "trans": [
            "LinearRing Models an【OGC】SFS LinearRing.",
            "　　　OGC SFS线性模型。"
        ]
    },
    {
        "name": "SFS",
        "trans": [
            "LinearRing Models an OGC【SFS】LinearRing.",
            "　　　OGC SFS线性模型。"
        ]
    },
    {
        "name": "LinearRing.",
        "trans": [
            "LinearRing Models an OGC SFS【LinearRing.】",
            "　　　OGC SFS线性模型。"
        ]
    },
    {
        "name": "LineSegment",
        "trans": [
            "【LineSegment】Represents a line segment defined by two Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "LineSegment【Represents】a line segment defined by two Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineSegment Represents【a】line segment defined by two Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "line",
        "trans": [
            "LineSegment Represents a【line】segment defined by two Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "LineSegment Represents a line【segment】defined by two Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "LineSegment Represents a line segment【defined】by two Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "LineSegment Represents a line segment defined【by】two Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "LineSegment Represents a line segment defined by【two】Coordinates.",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "Coordinates.",
        "trans": [
            "LineSegment Represents a line segment defined by two【Coordinates.】",
            "　　　代表一个线段由两个坐标定义的。"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "【LineString】Models an OGC-style LineString.",
            "　　　一个OGC-style LineString模型。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "LineString【Models】an OGC-style LineString.",
            "　　　一个OGC-style LineString模型。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "LineString Models【an】OGC-style LineString.",
            "　　　一个OGC-style LineString模型。"
        ]
    },
    {
        "name": "OGC-style",
        "trans": [
            "LineString Models an【OGC-style】LineString.",
            "　　　一个OGC-style LineString模型。"
        ]
    },
    {
        "name": "LineString.",
        "trans": [
            "LineString Models an OGC-style【LineString.】",
            "　　　一个OGC-style LineString模型。"
        ]
    },
    {
        "name": "LengthIndexedLine",
        "trans": [
            "【LengthIndexedLine】Supports linear referencing along a linear Geometry using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "Supports",
        "trans": [
            "LengthIndexedLine【Supports】linear referencing along a linear Geometry using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LengthIndexedLine Supports【linear】referencing along a linear Geometry using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "referencing",
        "trans": [
            "LengthIndexedLine Supports linear【referencing】along a linear Geometry using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "along",
        "trans": [
            "LengthIndexedLine Supports linear referencing【along】a linear Geometry using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LengthIndexedLine Supports linear referencing along【a】linear Geometry using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a【linear】Geometry using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear【Geometry】using the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "using",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry【using】the length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using【the】length along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "length",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using the【length】along the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "along",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using the length【along】the line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using the length along【the】line as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "line",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using the length along the【line】as the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "as",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using the length along the line【as】the index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using the length along the line as【the】index.",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "index.",
        "trans": [
            "LengthIndexedLine Supports linear referencing along a linear Geometry using the length along the line as the【index.】",
            "　　　支持线性引用沿着一条线性几何"
        ]
    },
    {
        "name": "LengthLocationMap",
        "trans": [
            "【LengthLocationMap】Computes the LinearLocation for a given length along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "LengthLocationMap【Computes】the LinearLocation for a given length along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LengthLocationMap Computes【the】LinearLocation for a given length along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "LinearLocation",
        "trans": [
            "LengthLocationMap Computes the【LinearLocation】for a given length along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "for",
        "trans": [
            "LengthLocationMap Computes the LinearLocation【for】a given length along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LengthLocationMap Computes the LinearLocation for【a】given length along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "given",
        "trans": [
            "LengthLocationMap Computes the LinearLocation for a【given】length along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "length",
        "trans": [
            "LengthLocationMap Computes the LinearLocation for a given【length】along a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "along",
        "trans": [
            "LengthLocationMap Computes the LinearLocation for a given length【along】a linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LengthLocationMap Computes the LinearLocation for a given length along【a】linear Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LengthLocationMap Computes the LinearLocation for a given length along a【linear】Geometry.",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "LengthLocationMap Computes the LinearLocation for a given length along a linear【Geometry.】",
            "　　　计算LinearLocation对于一个给定的长度"
        ]
    },
    {
        "name": "LinearGeometryBuilder",
        "trans": [
            "【LinearGeometryBuilder】Builds a linear geometry (LineString or MultiLineString) incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "Builds",
        "trans": [
            "LinearGeometryBuilder【Builds】a linear geometry (LineString or MultiLineString) incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LinearGeometryBuilder Builds【a】linear geometry (LineString or MultiLineString) incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LinearGeometryBuilder Builds a【linear】geometry (LineString or MultiLineString) incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "LinearGeometryBuilder Builds a linear【geometry】(LineString or MultiLineString) incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "(LineString",
        "trans": [
            "LinearGeometryBuilder Builds a linear geometry【(LineString】or MultiLineString) incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "or",
        "trans": [
            "LinearGeometryBuilder Builds a linear geometry (LineString【or】MultiLineString) incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "MultiLineString)",
        "trans": [
            "LinearGeometryBuilder Builds a linear geometry (LineString or【MultiLineString)】incrementally (point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "incrementally",
        "trans": [
            "LinearGeometryBuilder Builds a linear geometry (LineString or MultiLineString)【incrementally】(point-by-point).",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "(point-by-point).",
        "trans": [
            "LinearGeometryBuilder Builds a linear geometry (LineString or MultiLineString) incrementally【(point-by-point).】",
            "　　　建立一个线性几何(LineString或MultiLineString)"
        ]
    },
    {
        "name": "LinearIterator",
        "trans": [
            "【LinearIterator】An iterator over the components and coordinates of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "An",
        "trans": [
            "LinearIterator【An】iterator over the components and coordinates of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "iterator",
        "trans": [
            "LinearIterator An【iterator】over the components and coordinates of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "over",
        "trans": [
            "LinearIterator An iterator【over】the components and coordinates of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LinearIterator An iterator over【the】components and coordinates of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "components",
        "trans": [
            "LinearIterator An iterator over the【components】and coordinates of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "and",
        "trans": [
            "LinearIterator An iterator over the components【and】coordinates of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "LinearIterator An iterator over the components and【coordinates】of a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LinearIterator An iterator over the components and coordinates【of】a linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LinearIterator An iterator over the components and coordinates of【a】linear geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LinearIterator An iterator over the components and coordinates of a【linear】geometry (LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "LinearIterator An iterator over the components and coordinates of a linear【geometry】(LineStrings and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "(LineStrings",
        "trans": [
            "LinearIterator An iterator over the components and coordinates of a linear geometry【(LineStrings】and MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "and",
        "trans": [
            "LinearIterator An iterator over the components and coordinates of a linear geometry (LineStrings【and】MultiLineStrings.",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "MultiLineStrings.",
        "trans": [
            "LinearIterator An iterator over the components and coordinates of a linear geometry (LineStrings and【MultiLineStrings.】",
            "　　　迭代器组件和坐标的线性几何"
        ]
    },
    {
        "name": "LinearLocation",
        "trans": [
            "【LinearLocation】Represents a location along a LineString or MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "LinearLocation【Represents】a location along a LineString or MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LinearLocation Represents【a】location along a LineString or MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "location",
        "trans": [
            "LinearLocation Represents a【location】along a LineString or MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "along",
        "trans": [
            "LinearLocation Represents a location【along】a LineString or MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LinearLocation Represents a location along【a】LineString or MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "LinearLocation Represents a location along a【LineString】or MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "or",
        "trans": [
            "LinearLocation Represents a location along a LineString【or】MultiLineString.",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "MultiLineString.",
        "trans": [
            "LinearLocation Represents a location along a LineString or【MultiLineString.】",
            "　　　代表一个位置沿LineString或MultiLineString。"
        ]
    },
    {
        "name": "Location",
        "trans": [
            "【Location】Constants representing the different topological locations which can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "Constants",
        "trans": [
            "Location【Constants】representing the different topological locations which can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "Location Constants【representing】the different topological locations which can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Location Constants representing【the】different topological locations which can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "different",
        "trans": [
            "Location Constants representing the【different】topological locations which can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "Location Constants representing the different【topological】locations which can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "locations",
        "trans": [
            "Location Constants representing the different topological【locations】which can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Location Constants representing the different topological locations【which】can occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "can",
        "trans": [
            "Location Constants representing the different topological locations which【can】occur in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "occur",
        "trans": [
            "Location Constants representing the different topological locations which can【occur】in a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Location Constants representing the different topological locations which can occur【in】a Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Location Constants representing the different topological locations which can occur in【a】Geometry.",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "Location Constants representing the different topological locations which can occur in a【Geometry.】",
            "　　　常量代表不同的拓扑位置"
        ]
    },
    {
        "name": "MultiLineString",
        "trans": [
            "【MultiLineString】Models a collection of LineStrings.",
            "　　　模型线的集合。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "MultiLineString【Models】a collection of LineStrings.",
            "　　　模型线的集合。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MultiLineString Models【a】collection of LineStrings.",
            "　　　模型线的集合。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "MultiLineString Models a【collection】of LineStrings.",
            "　　　模型线的集合。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MultiLineString Models a collection【of】LineStrings.",
            "　　　模型线的集合。"
        ]
    },
    {
        "name": "LineStrings.",
        "trans": [
            "MultiLineString Models a collection of【LineStrings.】",
            "　　　模型线的集合。"
        ]
    },
    {
        "name": "MultiPoint",
        "trans": [
            "【MultiPoint】Models a collection of Points.",
            "　　　模型的集合点。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "MultiPoint【Models】a collection of Points.",
            "　　　模型的集合点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MultiPoint Models【a】collection of Points.",
            "　　　模型的集合点。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "MultiPoint Models a【collection】of Points.",
            "　　　模型的集合点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MultiPoint Models a collection【of】Points.",
            "　　　模型的集合点。"
        ]
    },
    {
        "name": "Points.",
        "trans": [
            "MultiPoint Models a collection of【Points.】",
            "　　　模型的集合点。"
        ]
    },
    {
        "name": "MultiPolygon",
        "trans": [
            "【MultiPolygon】Models a collection of Polygons.",
            "　　　模型的多边形集合。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "MultiPolygon【Models】a collection of Polygons.",
            "　　　模型的多边形集合。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MultiPolygon Models【a】collection of Polygons.",
            "　　　模型的多边形集合。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "MultiPolygon Models a【collection】of Polygons.",
            "　　　模型的多边形集合。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MultiPolygon Models a collection【of】Polygons.",
            "　　　模型的多边形集合。"
        ]
    },
    {
        "name": "Polygons.",
        "trans": [
            "MultiPolygon Models a collection of【Polygons.】",
            "　　　模型的多边形集合。"
        ]
    },
    {
        "name": "OctagonalEnvelope",
        "trans": [
            "【OctagonalEnvelope】A bounding container for a Geometry which is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "OctagonalEnvelope【A】bounding container for a Geometry which is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "bounding",
        "trans": [
            "OctagonalEnvelope A【bounding】container for a Geometry which is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "container",
        "trans": [
            "OctagonalEnvelope A bounding【container】for a Geometry which is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "OctagonalEnvelope A bounding container【for】a Geometry which is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OctagonalEnvelope A bounding container for【a】Geometry which is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "OctagonalEnvelope A bounding container for a【Geometry】which is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry【which】is in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which【is】in the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which is【in】the shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which is in【the】shape of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "shape",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which is in the【shape】of a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which is in the shape【of】a general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which is in the shape of【a】general octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "general",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which is in the shape of a【general】octagon.",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "octagon.",
        "trans": [
            "OctagonalEnvelope A bounding container for a Geometry which is in the shape of a general【octagon.】",
            "　　　边界容器的几何形状的八边形。"
        ]
    },
    {
        "name": "Point",
        "trans": [
            "【Point】Represents a single point.",
            "　　　代表一个单点。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "Point【Represents】a single point.",
            "　　　代表一个单点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Point Represents【a】single point.",
            "　　　代表一个单点。"
        ]
    },
    {
        "name": "single",
        "trans": [
            "Point Represents a【single】point.",
            "　　　代表一个单点。"
        ]
    },
    {
        "name": "point.",
        "trans": [
            "Point Represents a single【point.】",
            "　　　代表一个单点。"
        ]
    },
    {
        "name": "Polygon",
        "trans": [
            "【Polygon】Represents a polygon with linear edges, which may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "Polygon【Represents】a polygon with linear edges, which may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Polygon Represents【a】polygon with linear edges, which may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "polygon",
        "trans": [
            "Polygon Represents a【polygon】with linear edges, which may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "with",
        "trans": [
            "Polygon Represents a polygon【with】linear edges, which may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "Polygon Represents a polygon with【linear】edges, which may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "edges,",
        "trans": [
            "Polygon Represents a polygon with linear【edges,】which may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Polygon Represents a polygon with linear edges,【which】may include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "may",
        "trans": [
            "Polygon Represents a polygon with linear edges, which【may】include holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "include",
        "trans": [
            "Polygon Represents a polygon with linear edges, which may【include】holes.",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "holes.",
        "trans": [
            "Polygon Represents a polygon with linear edges, which may include【holes.】",
            "　　　代表一个多边形与线性边缘,其中可能包括漏洞。"
        ]
    },
    {
        "name": "Position",
        "trans": [
            "【Position】Indicates the position of a location relative to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "Position【Indicates】the position of a location relative to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Position Indicates【the】position of a location relative to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "position",
        "trans": [
            "Position Indicates the【position】of a location relative to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Position Indicates the position【of】a location relative to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Position Indicates the position of【a】location relative to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "location",
        "trans": [
            "Position Indicates the position of a【location】relative to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "Position Indicates the position of a location【relative】to a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Position Indicates the position of a location relative【to】a node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Position Indicates the position of a location relative to【a】node or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "node",
        "trans": [
            "Position Indicates the position of a location relative to a【node】or edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "or",
        "trans": [
            "Position Indicates the position of a location relative to a node【or】edge component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "Position Indicates the position of a location relative to a node or【edge】component of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "component",
        "trans": [
            "Position Indicates the position of a location relative to a node or edge【component】of a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Position Indicates the position of a location relative to a node or edge component【of】a planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Position Indicates the position of a location relative to a node or edge component of【a】planar topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "Position Indicates the position of a location relative to a node or edge component of a【planar】topological structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "Position Indicates the position of a location relative to a node or edge component of a planar【topological】structure.",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "structure.",
        "trans": [
            "Position Indicates the position of a location relative to a node or edge component of a planar topological【structure.】",
            "　　　表示位置相对的位置"
        ]
    },
    {
        "name": "PrecisionModel",
        "trans": [
            "【PrecisionModel】Specifies the precision model of the Coordinates in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "Specifies",
        "trans": [
            "PrecisionModel【Specifies】the precision model of the Coordinates in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PrecisionModel Specifies【the】precision model of the Coordinates in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "PrecisionModel Specifies the【precision】model of the Coordinates in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "model",
        "trans": [
            "PrecisionModel Specifies the precision【model】of the Coordinates in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PrecisionModel Specifies the precision model【of】the Coordinates in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PrecisionModel Specifies the precision model of【the】Coordinates in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "Coordinates",
        "trans": [
            "PrecisionModel Specifies the precision model of the【Coordinates】in a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "PrecisionModel Specifies the precision model of the Coordinates【in】a Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PrecisionModel Specifies the precision model of the Coordinates in【a】Geometry.",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "PrecisionModel Specifies the precision model of the Coordinates in a【Geometry.】",
            "　　　指定的坐标几何的精确模型。"
        ]
    },
    {
        "name": "PrecisionModel.Type",
        "trans": [
            "【PrecisionModel.Type】The types of Precision Model which JTS supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "PrecisionModel.Type【The】types of Precision Model which JTS supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "types",
        "trans": [
            "PrecisionModel.Type The【types】of Precision Model which JTS supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PrecisionModel.Type The types【of】Precision Model which JTS supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "Precision",
        "trans": [
            "PrecisionModel.Type The types of【Precision】Model which JTS supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "Model",
        "trans": [
            "PrecisionModel.Type The types of Precision【Model】which JTS supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "PrecisionModel.Type The types of Precision Model【which】JTS supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "PrecisionModel.Type The types of Precision Model which【JTS】supports.",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "supports.",
        "trans": [
            "PrecisionModel.Type The types of Precision Model which JTS【supports.】",
            "　　　JTS支持的类型的精确模型。"
        ]
    },
    {
        "name": "Quadrant",
        "trans": [
            "【Quadrant】Utility functions for working with quadrants of the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "Utility",
        "trans": [
            "Quadrant【Utility】functions for working with quadrants of the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "Quadrant Utility【functions】for working with quadrants of the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Quadrant Utility functions【for】working with quadrants of the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "working",
        "trans": [
            "Quadrant Utility functions for【working】with quadrants of the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "with",
        "trans": [
            "Quadrant Utility functions for working【with】quadrants of the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "quadrants",
        "trans": [
            "Quadrant Utility functions for working with【quadrants】of the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Quadrant Utility functions for working with quadrants【of】the Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Quadrant Utility functions for working with quadrants of【the】Euclidean plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "Euclidean",
        "trans": [
            "Quadrant Utility functions for working with quadrants of the【Euclidean】plane.",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "plane.",
        "trans": [
            "Quadrant Utility functions for working with quadrants of the Euclidean【plane.】",
            "　　　效用函数来处理象限的欧几里得平面。"
        ]
    },
    {
        "name": "Triangle",
        "trans": [
            "【Triangle】Represents a planar triangle, and provides methods for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "Triangle【Represents】a planar triangle, and provides methods for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Triangle Represents【a】planar triangle, and provides methods for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "Triangle Represents a【planar】triangle, and provides methods for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "triangle,",
        "trans": [
            "Triangle Represents a planar【triangle,】and provides methods for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Triangle Represents a planar triangle,【and】provides methods for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "provides",
        "trans": [
            "Triangle Represents a planar triangle, and【provides】methods for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "methods",
        "trans": [
            "Triangle Represents a planar triangle, and provides【methods】for calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Triangle Represents a planar triangle, and provides methods【for】calculating various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "calculating",
        "trans": [
            "Triangle Represents a planar triangle, and provides methods for【calculating】various properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "various",
        "trans": [
            "Triangle Represents a planar triangle, and provides methods for calculating【various】properties of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "properties",
        "trans": [
            "Triangle Represents a planar triangle, and provides methods for calculating various【properties】of triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Triangle Represents a planar triangle, and provides methods for calculating various properties【of】triangles.",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "triangles.",
        "trans": [
            "Triangle Represents a planar triangle, and provides methods for calculating various properties of【triangles.】",
            "　　　代表一个平面三角形,并提供了计算方法不同"
        ]
    },
    {
        "name": "LocationIndexedLine",
        "trans": [
            "【LocationIndexedLine】Supports linear referencing along a linear Geometry using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "Supports",
        "trans": [
            "LocationIndexedLine【Supports】linear referencing along a linear Geometry using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LocationIndexedLine Supports【linear】referencing along a linear Geometry using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "referencing",
        "trans": [
            "LocationIndexedLine Supports linear【referencing】along a linear Geometry using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "along",
        "trans": [
            "LocationIndexedLine Supports linear referencing【along】a linear Geometry using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LocationIndexedLine Supports linear referencing along【a】linear Geometry using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LocationIndexedLine Supports linear referencing along a【linear】Geometry using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "LocationIndexedLine Supports linear referencing along a linear【Geometry】using LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "using",
        "trans": [
            "LocationIndexedLine Supports linear referencing along a linear Geometry【using】LinearLocations as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "LinearLocations",
        "trans": [
            "LocationIndexedLine Supports linear referencing along a linear Geometry using【LinearLocations】as the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "as",
        "trans": [
            "LocationIndexedLine Supports linear referencing along a linear Geometry using LinearLocations【as】the index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LocationIndexedLine Supports linear referencing along a linear Geometry using LinearLocations as【the】index.",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "index.",
        "trans": [
            "LocationIndexedLine Supports linear referencing along a linear Geometry using LinearLocations as the【index.】",
            "　　　支持线性参考"
        ]
    },
    {
        "name": "io.gml2",
        "trans": [
            "【io.gml2】Classes to read and write the GML2 geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "Classes",
        "trans": [
            "io.gml2【Classes】to read and write the GML2 geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "io.gml2 Classes【to】read and write the GML2 geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "read",
        "trans": [
            "io.gml2 Classes to【read】and write the GML2 geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "io.gml2 Classes to read【and】write the GML2 geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "write",
        "trans": [
            "io.gml2 Classes to read and【write】the GML2 geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "io.gml2 Classes to read and write【the】GML2 geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "GML2",
        "trans": [
            "io.gml2 Classes to read and write the【GML2】geometry format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "io.gml2 Classes to read and write the GML2【geometry】format.",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "format.",
        "trans": [
            "io.gml2 Classes to read and write the GML2 geometry【format.】",
            "　　　类来读取和写入GML2几何格式。"
        ]
    },
    {
        "name": "io.kml",
        "trans": [
            "【io.kml】",
            "　　　org.locationtech.jts.io.kml"
        ]
    },
    {
        "name": "PointOnGeometryLocator",
        "trans": [
            "【PointOnGeometryLocator】An interface for classes which determine the Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "An",
        "trans": [
            "PointOnGeometryLocator【An】interface for classes which determine the Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "PointOnGeometryLocator An【interface】for classes which determine the Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PointOnGeometryLocator An interface【for】classes which determine the Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "PointOnGeometryLocator An interface for【classes】which determine the Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "which",
        "trans": [
            "PointOnGeometryLocator An interface for classes【which】determine the Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "determine",
        "trans": [
            "PointOnGeometryLocator An interface for classes which【determine】the Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointOnGeometryLocator An interface for classes which determine【the】Location of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "Location",
        "trans": [
            "PointOnGeometryLocator An interface for classes which determine the【Location】of points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PointOnGeometryLocator An interface for classes which determine the Location【of】points in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "points",
        "trans": [
            "PointOnGeometryLocator An interface for classes which determine the Location of【points】in a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "in",
        "trans": [
            "PointOnGeometryLocator An interface for classes which determine the Location of points【in】a Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointOnGeometryLocator An interface for classes which determine the Location of points in【a】Geometry.",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "PointOnGeometryLocator An interface for classes which determine the Location of points in a【Geometry.】",
            "　　　一个接口类的确定的位置"
        ]
    },
    {
        "name": "IndexedPointInAreaLocator",
        "trans": [
            "【IndexedPointInAreaLocator】Determines the Location of Coordinates relative to an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "Determines",
        "trans": [
            "IndexedPointInAreaLocator【Determines】the Location of Coordinates relative to an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "the",
        "trans": [
            "IndexedPointInAreaLocator Determines【the】Location of Coordinates relative to an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "Location",
        "trans": [
            "IndexedPointInAreaLocator Determines the【Location】of Coordinates relative to an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location【of】Coordinates relative to an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "Coordinates",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of【Coordinates】relative to an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates【relative】to an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "to",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative【to】an areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "an",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative to【an】areal geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "areal",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative to an【areal】geometry, using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "geometry,",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative to an areal【geometry,】using indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "using",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative to an areal geometry,【using】indexing for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "indexing",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative to an areal geometry, using【indexing】for efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "for",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative to an areal geometry, using indexing【for】efficiency.",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "efficiency.",
        "trans": [
            "IndexedPointInAreaLocator Determines the Location of Coordinates relative to an areal geometry, using indexing for【efficiency.】",
            "　　　相对于确定的位置坐标"
        ]
    },
    {
        "name": "SimplePointInAreaLocator",
        "trans": [
            "【SimplePointInAreaLocator】Computes the location of points relative to a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "SimplePointInAreaLocator【Computes】the location of points relative to a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SimplePointInAreaLocator Computes【the】location of points relative to a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "location",
        "trans": [
            "SimplePointInAreaLocator Computes the【location】of points relative to a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimplePointInAreaLocator Computes the location【of】points relative to a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "points",
        "trans": [
            "SimplePointInAreaLocator Computes the location of【points】relative to a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points【relative】to a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative【to】a Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to【a】Polygonal Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "Polygonal",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to a【Polygonal】Geometry, using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "Geometry,",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to a Polygonal【Geometry,】using a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to a Polygonal Geometry,【using】a simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to a Polygonal Geometry, using【a】simple O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "simple",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to a Polygonal Geometry, using a【simple】O(n) algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "O(n)",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to a Polygonal Geometry, using a simple【O(n)】algorithm.",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "algorithm.",
        "trans": [
            "SimplePointInAreaLocator Computes the location of points relative to a Polygonal Geometry, using a simple O(n)【algorithm.】",
            "　　　计算点的位置"
        ]
    },
    {
        "name": "DiscreteHausdorffDistance",
        "trans": [
            "【DiscreteHausdorffDistance】An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "An",
        "trans": [
            "DiscreteHausdorffDistance【An】algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "algorithm",
        "trans": [
            "DiscreteHausdorffDistance An【algorithm】for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "for",
        "trans": [
            "DiscreteHausdorffDistance An algorithm【for】computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for【computing】a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing【a】distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a【distance】metric which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "metric",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance【metric】which is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "which",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric【which】is an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "is",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which【is】an approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "an",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is【an】approximation to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "approximation",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an【approximation】to the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "to",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation【to】the Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to【the】Hausdorff Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "Hausdorff",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the【Hausdorff】Distance based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "Distance",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff【Distance】based on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "based",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance【based】on a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "on",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based【on】a discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on【a】discretization of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "discretization",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a【discretization】of the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "of",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization【of】the input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of【the】input Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "input",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the【input】Geometry.",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "DiscreteHausdorffDistance An algorithm for computing a distance metric which is an approximation to the Hausdorff Distance based on a discretization of the input【Geometry.】",
            "　　　计算一个距离度量的算法"
        ]
    },
    {
        "name": "DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter",
        "trans": [
            "【DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter】",
            "　　　DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter"
        ]
    },
    {
        "name": "DiscreteHausdorffDistance.MaxPointDistanceFilter",
        "trans": [
            "【DiscreteHausdorffDistance.MaxPointDistanceFilter】",
            "　　　DiscreteHausdorffDistance.MaxPointDistanceFilter"
        ]
    },
    {
        "name": "DistanceToPoint",
        "trans": [
            "【DistanceToPoint】Computes the Euclidean distance (L2 metric) from a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "DistanceToPoint【Computes】the Euclidean distance (L2 metric) from a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DistanceToPoint Computes【the】Euclidean distance (L2 metric) from a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "Euclidean",
        "trans": [
            "DistanceToPoint Computes the【Euclidean】distance (L2 metric) from a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "DistanceToPoint Computes the Euclidean【distance】(L2 metric) from a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "(L2",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance【(L2】metric) from a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "metric)",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance (L2【metric)】from a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance (L2 metric)【from】a Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance (L2 metric) from【a】Coordinate to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance (L2 metric) from a【Coordinate】to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance (L2 metric) from a Coordinate【to】a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance (L2 metric) from a Coordinate to【a】Geometry.",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "DistanceToPoint Computes the Euclidean distance (L2 metric) from a Coordinate to a【Geometry.】",
            "　　　计算欧氏距离(L2度量)从一个坐标几何学。"
        ]
    },
    {
        "name": "PointPairDistance",
        "trans": [
            "【PointPairDistance】Contains a pair of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "PointPairDistance【Contains】a pair of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointPairDistance Contains【a】pair of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "pair",
        "trans": [
            "PointPairDistance Contains a【pair】of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PointPairDistance Contains a pair【of】points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "PointPairDistance Contains a pair of【points】and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "PointPairDistance Contains a pair of points【and】the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointPairDistance Contains a pair of points and【the】distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "PointPairDistance Contains a pair of points and the【distance】between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "PointPairDistance Contains a pair of points and the distance【between】them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "them.",
        "trans": [
            "PointPairDistance Contains a pair of points and the distance between【them.】",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "PreparedGeometry",
        "trans": [
            "【PreparedGeometry】An interface for classes which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "An",
        "trans": [
            "PreparedGeometry【An】interface for classes which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "PreparedGeometry An【interface】for classes which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PreparedGeometry An interface【for】classes which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "PreparedGeometry An interface for【classes】which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "which",
        "trans": [
            "PreparedGeometry An interface for classes【which】prepare Geometrys in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "prepare",
        "trans": [
            "PreparedGeometry An interface for classes which【prepare】Geometrys in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "PreparedGeometry An interface for classes which prepare【Geometrys】in order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "in",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys【in】order to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "order",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in【order】to optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "to",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order【to】optimize the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "optimize",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to【optimize】the performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize【the】performance of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "performance",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the【performance】of repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance【of】repeated calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "repeated",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of【repeated】calls to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "calls",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of repeated【calls】to specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "to",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of repeated calls【to】specific geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "specific",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of repeated calls to【specific】geometric operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of repeated calls to specific【geometric】operations.",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "PreparedGeometry An interface for classes which prepare Geometrys in order to optimize the performance of repeated calls to specific geometric【operations.】",
            "　　　一个接口类的几何做准备"
        ]
    },
    {
        "name": "PreparedGeometryFactory",
        "trans": [
            "【PreparedGeometryFactory】A factory for creating PreparedGeometrys.",
            "　　　一个工厂来创建PreparedGeometrys。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "PreparedGeometryFactory【A】factory for creating PreparedGeometrys.",
            "　　　一个工厂来创建PreparedGeometrys。"
        ]
    },
    {
        "name": "factory",
        "trans": [
            "PreparedGeometryFactory A【factory】for creating PreparedGeometrys.",
            "　　　一个工厂来创建PreparedGeometrys。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PreparedGeometryFactory A factory【for】creating PreparedGeometrys.",
            "　　　一个工厂来创建PreparedGeometrys。"
        ]
    },
    {
        "name": "creating",
        "trans": [
            "PreparedGeometryFactory A factory for【creating】PreparedGeometrys.",
            "　　　一个工厂来创建PreparedGeometrys。"
        ]
    },
    {
        "name": "PreparedGeometrys.",
        "trans": [
            "PreparedGeometryFactory A factory for creating【PreparedGeometrys.】",
            "　　　一个工厂来创建PreparedGeometrys。"
        ]
    },
    {
        "name": "PreparedLineString",
        "trans": [
            "【PreparedLineString】A prepared version for Lineal geometries.",
            "　　　准备版本直系几何图形。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "PreparedLineString【A】prepared version for Lineal geometries.",
            "　　　准备版本直系几何图形。"
        ]
    },
    {
        "name": "prepared",
        "trans": [
            "PreparedLineString A【prepared】version for Lineal geometries.",
            "　　　准备版本直系几何图形。"
        ]
    },
    {
        "name": "version",
        "trans": [
            "PreparedLineString A prepared【version】for Lineal geometries.",
            "　　　准备版本直系几何图形。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PreparedLineString A prepared version【for】Lineal geometries.",
            "　　　准备版本直系几何图形。"
        ]
    },
    {
        "name": "Lineal",
        "trans": [
            "PreparedLineString A prepared version for【Lineal】geometries.",
            "　　　准备版本直系几何图形。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "PreparedLineString A prepared version for Lineal【geometries.】",
            "　　　准备版本直系几何图形。"
        ]
    },
    {
        "name": "PreparedPoint",
        "trans": [
            "【PreparedPoint】A prepared version for Puntal geometries.",
            "　　　准备版本Puntal几何图形。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "PreparedPoint【A】prepared version for Puntal geometries.",
            "　　　准备版本Puntal几何图形。"
        ]
    },
    {
        "name": "prepared",
        "trans": [
            "PreparedPoint A【prepared】version for Puntal geometries.",
            "　　　准备版本Puntal几何图形。"
        ]
    },
    {
        "name": "version",
        "trans": [
            "PreparedPoint A prepared【version】for Puntal geometries.",
            "　　　准备版本Puntal几何图形。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PreparedPoint A prepared version【for】Puntal geometries.",
            "　　　准备版本Puntal几何图形。"
        ]
    },
    {
        "name": "Puntal",
        "trans": [
            "PreparedPoint A prepared version for【Puntal】geometries.",
            "　　　准备版本Puntal几何图形。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "PreparedPoint A prepared version for Puntal【geometries.】",
            "　　　准备版本Puntal几何图形。"
        ]
    },
    {
        "name": "GeometryEditor.GeometryEditorOperation",
        "trans": [
            "【GeometryEditor.GeometryEditorOperation】A interface which specifies an edit operation for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryEditor.GeometryEditorOperation【A】interface which specifies an edit operation for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A【interface】which specifies an edit operation for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A interface【which】specifies an edit operation for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "specifies",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A interface which【specifies】an edit operation for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A interface which specifies【an】edit operation for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "edit",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A interface which specifies an【edit】operation for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A interface which specifies an edit【operation】for Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A interface which specifies an edit operation【for】Geometries.",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "Geometries.",
        "trans": [
            "GeometryEditor.GeometryEditorOperation A interface which specifies an edit operation for【Geometries.】",
            "　　　一个接口指定一个几何图形的编辑操作。"
        ]
    },
    {
        "name": "GeometryMapper.MapOp",
        "trans": [
            "【GeometryMapper.MapOp】An interface for geometry functions used for mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "GeometryMapper.MapOp【An】interface for geometry functions used for mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "GeometryMapper.MapOp An【interface】for geometry functions used for mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryMapper.MapOp An interface【for】geometry functions used for mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "GeometryMapper.MapOp An interface for【geometry】functions used for mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "GeometryMapper.MapOp An interface for geometry【functions】used for mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "used",
        "trans": [
            "GeometryMapper.MapOp An interface for geometry functions【used】for mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryMapper.MapOp An interface for geometry functions used【for】mapping.",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "mapping.",
        "trans": [
            "GeometryMapper.MapOp An interface for geometry functions used for【mapping.】",
            "　　　一个接口,用于几何函数用于映射。"
        ]
    },
    {
        "name": "AffineTransformation",
        "trans": [
            "【AffineTransformation】Represents an affine transformation on the 2D Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "AffineTransformation【Represents】an affine transformation on the 2D Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "AffineTransformation Represents【an】affine transformation on the 2D Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "affine",
        "trans": [
            "AffineTransformation Represents an【affine】transformation on the 2D Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "transformation",
        "trans": [
            "AffineTransformation Represents an affine【transformation】on the 2D Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "AffineTransformation Represents an affine transformation【on】the 2D Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "AffineTransformation Represents an affine transformation on【the】2D Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "2D",
        "trans": [
            "AffineTransformation Represents an affine transformation on the【2D】Cartesian plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "AffineTransformation Represents an affine transformation on the 2D【Cartesian】plane.",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "plane.",
        "trans": [
            "AffineTransformation Represents an affine transformation on the 2D Cartesian【plane.】",
            "　　　代表了一个二维笛卡尔平面上的仿射变换。"
        ]
    },
    {
        "name": "TopologyException",
        "trans": [
            "【TopologyException】Indicates an invalid or inconsistent topological situation encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "TopologyException【Indicates】an invalid or inconsistent topological situation encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "an",
        "trans": [
            "TopologyException Indicates【an】invalid or inconsistent topological situation encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "invalid",
        "trans": [
            "TopologyException Indicates an【invalid】or inconsistent topological situation encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "or",
        "trans": [
            "TopologyException Indicates an invalid【or】inconsistent topological situation encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "inconsistent",
        "trans": [
            "TopologyException Indicates an invalid or【inconsistent】topological situation encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "TopologyException Indicates an invalid or inconsistent【topological】situation encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "situation",
        "trans": [
            "TopologyException Indicates an invalid or inconsistent topological【situation】encountered during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "encountered",
        "trans": [
            "TopologyException Indicates an invalid or inconsistent topological situation【encountered】during processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "during",
        "trans": [
            "TopologyException Indicates an invalid or inconsistent topological situation encountered【during】processing",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "processing",
        "trans": [
            "TopologyException Indicates an invalid or inconsistent topological situation encountered during【processing】",
            "　　　表示一个无效的或不一致的拓扑处理期间遇到的情况"
        ]
    },
    {
        "name": "PreparedPolygon",
        "trans": [
            "【PreparedPolygon】A prepared version for Polygonal geometries.",
            "　　　准备好的版本为多边形的几何图形。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "PreparedPolygon【A】prepared version for Polygonal geometries.",
            "　　　准备好的版本为多边形的几何图形。"
        ]
    },
    {
        "name": "prepared",
        "trans": [
            "PreparedPolygon A【prepared】version for Polygonal geometries.",
            "　　　准备好的版本为多边形的几何图形。"
        ]
    },
    {
        "name": "version",
        "trans": [
            "PreparedPolygon A prepared【version】for Polygonal geometries.",
            "　　　准备好的版本为多边形的几何图形。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PreparedPolygon A prepared version【for】Polygonal geometries.",
            "　　　准备好的版本为多边形的几何图形。"
        ]
    },
    {
        "name": "Polygonal",
        "trans": [
            "PreparedPolygon A prepared version for【Polygonal】geometries.",
            "　　　准备好的版本为多边形的几何图形。"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "PreparedPolygon A prepared version for Polygonal【geometries.】",
            "　　　准备好的版本为多边形的几何图形。"
        ]
    },
    {
        "name": "AffineTransformationBuilder",
        "trans": [
            "【AffineTransformationBuilder】Builds an AffineTransformation defined by a set of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "Builds",
        "trans": [
            "AffineTransformationBuilder【Builds】an AffineTransformation defined by a set of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "AffineTransformationBuilder Builds【an】AffineTransformation defined by a set of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "AffineTransformation",
        "trans": [
            "AffineTransformationBuilder Builds an【AffineTransformation】defined by a set of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "AffineTransformationBuilder Builds an AffineTransformation【defined】by a set of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "AffineTransformationBuilder Builds an AffineTransformation defined【by】a set of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "AffineTransformationBuilder Builds an AffineTransformation defined by【a】set of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "set",
        "trans": [
            "AffineTransformationBuilder Builds an AffineTransformation defined by a【set】of control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "AffineTransformationBuilder Builds an AffineTransformation defined by a set【of】control vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "control",
        "trans": [
            "AffineTransformationBuilder Builds an AffineTransformation defined by a set of【control】vectors.",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "vectors.",
        "trans": [
            "AffineTransformationBuilder Builds an AffineTransformation defined by a set of control【vectors.】",
            "　　　构建一个AffineTransformation定义为一组控制向量。"
        ]
    },
    {
        "name": "AffineTransformationFactory",
        "trans": [
            "【AffineTransformationFactory】Supports creating AffineTransformations defined by various kinds of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "Supports",
        "trans": [
            "AffineTransformationFactory【Supports】creating AffineTransformations defined by various kinds of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "creating",
        "trans": [
            "AffineTransformationFactory Supports【creating】AffineTransformations defined by various kinds of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "AffineTransformations",
        "trans": [
            "AffineTransformationFactory Supports creating【AffineTransformations】defined by various kinds of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations【defined】by various kinds of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "by",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined【by】various kinds of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "various",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by【various】kinds of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "kinds",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by various【kinds】of inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "of",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by various kinds【of】inputs and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "inputs",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by various kinds of【inputs】and transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "and",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by various kinds of inputs【and】transformation mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "transformation",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by various kinds of inputs and【transformation】mapping rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "mapping",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by various kinds of inputs and transformation【mapping】rules.",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "rules.",
        "trans": [
            "AffineTransformationFactory Supports creating AffineTransformations defined by various kinds of inputs and transformation mapping【rules.】",
            "　　　支持创建AffineTransformations由各种各样的定义"
        ]
    },
    {
        "name": "ComponentCoordinateExtracter",
        "trans": [
            "【ComponentCoordinateExtracter】Extracts a representative Coordinate from each connected component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "Extracts",
        "trans": [
            "ComponentCoordinateExtracter【Extracts】a representative Coordinate from each connected component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ComponentCoordinateExtracter Extracts【a】representative Coordinate from each connected component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "representative",
        "trans": [
            "ComponentCoordinateExtracter Extracts a【representative】Coordinate from each connected component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative【Coordinate】from each connected component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "from",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative Coordinate【from】each connected component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "each",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative Coordinate from【each】connected component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "connected",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative Coordinate from each【connected】component of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "component",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative Coordinate from each connected【component】of a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative Coordinate from each connected component【of】a Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative Coordinate from each connected component of【a】Geometry.",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "ComponentCoordinateExtracter Extracts a representative Coordinate from each connected component of a【Geometry.】",
            "　　　提取一个代表性的坐标"
        ]
    },
    {
        "name": "GeometryCollectionMapper",
        "trans": [
            "【GeometryCollectionMapper】Maps the members of a GeometryCollection into another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "Maps",
        "trans": [
            "GeometryCollectionMapper【Maps】the members of a GeometryCollection into another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryCollectionMapper Maps【the】members of a GeometryCollection into another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "members",
        "trans": [
            "GeometryCollectionMapper Maps the【members】of a GeometryCollection into another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryCollectionMapper Maps the members【of】a GeometryCollection into another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryCollectionMapper Maps the members of【a】GeometryCollection into another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "GeometryCollection",
        "trans": [
            "GeometryCollectionMapper Maps the members of a【GeometryCollection】into another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "into",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection【into】another GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "another",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection into【another】GeometryCollection via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "GeometryCollection",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection into another【GeometryCollection】via a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "via",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection into another GeometryCollection【via】a defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection into another GeometryCollection via【a】defined mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection into another GeometryCollection via a【defined】mapping function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "mapping",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection into another GeometryCollection via a defined【mapping】function.",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "function.",
        "trans": [
            "GeometryCollectionMapper Maps the members of a GeometryCollection into another GeometryCollection via a defined mapping【function.】",
            "　　　地图GeometryCollection的成员"
        ]
    },
    {
        "name": "GeometryCombiner",
        "trans": [
            "【GeometryCombiner】Combines Geometrys to produce a GeometryCollection of the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "Combines",
        "trans": [
            "GeometryCombiner【Combines】Geometrys to produce a GeometryCollection of the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GeometryCombiner Combines【Geometrys】to produce a GeometryCollection of the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "to",
        "trans": [
            "GeometryCombiner Combines Geometrys【to】produce a GeometryCollection of the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "produce",
        "trans": [
            "GeometryCombiner Combines Geometrys to【produce】a GeometryCollection of the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryCombiner Combines Geometrys to produce【a】GeometryCollection of the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "GeometryCollection",
        "trans": [
            "GeometryCombiner Combines Geometrys to produce a【GeometryCollection】of the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryCombiner Combines Geometrys to produce a GeometryCollection【of】the most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryCombiner Combines Geometrys to produce a GeometryCollection of【the】most appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "most",
        "trans": [
            "GeometryCombiner Combines Geometrys to produce a GeometryCollection of the【most】appropriate type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "appropriate",
        "trans": [
            "GeometryCombiner Combines Geometrys to produce a GeometryCollection of the most【appropriate】type.",
            "　　　结合几何"
        ]
    },
    {
        "name": "type.",
        "trans": [
            "GeometryCombiner Combines Geometrys to produce a GeometryCollection of the most appropriate【type.】",
            "　　　结合几何"
        ]
    },
    {
        "name": "GeometryEditor",
        "trans": [
            "【GeometryEditor】A class which supports creating new Geometrys which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryEditor【A】class which supports creating new Geometrys which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "class",
        "trans": [
            "GeometryEditor A【class】which supports creating new Geometrys which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryEditor A class【which】supports creating new Geometrys which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "supports",
        "trans": [
            "GeometryEditor A class which【supports】creating new Geometrys which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "creating",
        "trans": [
            "GeometryEditor A class which supports【creating】new Geometrys which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "new",
        "trans": [
            "GeometryEditor A class which supports creating【new】Geometrys which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GeometryEditor A class which supports creating new【Geometrys】which are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys【which】are modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "are",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which【are】modifications of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "modifications",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are【modifications】of existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications【of】existing ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "existing",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications of【existing】ones, maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "ones,",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications of existing【ones,】maintaining the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "maintaining",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications of existing ones,【maintaining】the same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications of existing ones, maintaining【the】same type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "same",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications of existing ones, maintaining the【same】type structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "type",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications of existing ones, maintaining the same【type】structure.",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "structure.",
        "trans": [
            "GeometryEditor A class which supports creating new Geometrys which are modifications of existing ones, maintaining the same type【structure.】",
            "　　　一个类支持创建新的几何"
        ]
    },
    {
        "name": "GeometryEditor.CoordinateOperation",
        "trans": [
            "【GeometryEditor.CoordinateOperation】A GeometryEditor.GeometryEditorOperation which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryEditor.CoordinateOperation【A】GeometryEditor.GeometryEditorOperation which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "GeometryEditor.GeometryEditorOperation",
        "trans": [
            "GeometryEditor.CoordinateOperation A【GeometryEditor.GeometryEditorOperation】which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation【which】edits the coordinate list of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "edits",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which【edits】the coordinate list of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits【the】coordinate list of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the【coordinate】list of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate【list】of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list【of】a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list of【a】Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list of a【Geometry.】",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "GeometryEditor.CoordinateSequenceOperation",
        "trans": [
            "【GeometryEditor.CoordinateSequenceOperation】A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation【A】GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "GeometryEditor.GeometryEditorOperation",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A【GeometryEditor.GeometryEditorOperation】which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation【which】edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "edits",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which【edits】the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits【the】CoordinateSequence of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the【CoordinateSequence】of a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence【of】a Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of【a】Geometry.",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a【Geometry.】",
            "　　　GeometryEditor。"
        ]
    },
    {
        "name": "GeometryEditor.NoOpGeometryOperation",
        "trans": [
            "【GeometryEditor.NoOpGeometryOperation】A GeometryEditorOperation which does not modify the input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation【A】GeometryEditorOperation which does not modify the input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "GeometryEditorOperation",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A【GeometryEditorOperation】which does not modify the input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation【which】does not modify the input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "does",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which【does】not modify the input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "not",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does【not】modify the input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "modify",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not【modify】the input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify【the】input geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "input",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the【input】geometry.",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the input【geometry.】",
            "　　　一个不修改GeometryEditorOperation"
        ]
    },
    {
        "name": "GeometryExtracter",
        "trans": [
            "【GeometryExtracter】Extracts the components of a given type from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "Extracts",
        "trans": [
            "GeometryExtracter【Extracts】the components of a given type from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryExtracter Extracts【the】components of a given type from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "components",
        "trans": [
            "GeometryExtracter Extracts the【components】of a given type from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryExtracter Extracts the components【of】a given type from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryExtracter Extracts the components of【a】given type from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "given",
        "trans": [
            "GeometryExtracter Extracts the components of a【given】type from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "type",
        "trans": [
            "GeometryExtracter Extracts the components of a given【type】from a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "GeometryExtracter Extracts the components of a given type【from】a Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryExtracter Extracts the components of a given type from【a】Geometry.",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "GeometryExtracter Extracts the components of a given type from a【Geometry.】",
            "　　　提取从几何给定类型的组件。"
        ]
    },
    {
        "name": "GeometryMapper",
        "trans": [
            "【GeometryMapper】Methods to map various collections of Geometrys via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "Methods",
        "trans": [
            "GeometryMapper【Methods】to map various collections of Geometrys via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "to",
        "trans": [
            "GeometryMapper Methods【to】map various collections of Geometrys via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "map",
        "trans": [
            "GeometryMapper Methods to【map】various collections of Geometrys via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "various",
        "trans": [
            "GeometryMapper Methods to map【various】collections of Geometrys via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "collections",
        "trans": [
            "GeometryMapper Methods to map various【collections】of Geometrys via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryMapper Methods to map various collections【of】Geometrys via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GeometryMapper Methods to map various collections of【Geometrys】via defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "via",
        "trans": [
            "GeometryMapper Methods to map various collections of Geometrys【via】defined mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "GeometryMapper Methods to map various collections of Geometrys via【defined】mapping functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "mapping",
        "trans": [
            "GeometryMapper Methods to map various collections of Geometrys via defined【mapping】functions.",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "functions.",
        "trans": [
            "GeometryMapper Methods to map various collections of Geometrys via defined mapping【functions.】",
            "　　　方法绘制不同的集合"
        ]
    },
    {
        "name": "GeometryTransformer",
        "trans": [
            "【GeometryTransformer】A framework for processes which transform an input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryTransformer【A】framework for processes which transform an input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "framework",
        "trans": [
            "GeometryTransformer A【framework】for processes which transform an input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryTransformer A framework【for】processes which transform an input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "processes",
        "trans": [
            "GeometryTransformer A framework for【processes】which transform an input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryTransformer A framework for processes【which】transform an input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "transform",
        "trans": [
            "GeometryTransformer A framework for processes which【transform】an input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "an",
        "trans": [
            "GeometryTransformer A framework for processes which transform【an】input Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "input",
        "trans": [
            "GeometryTransformer A framework for processes which transform an【input】Geometry into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input【Geometry】into an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "into",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry【into】an output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "an",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into【an】output Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "output",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an【output】Geometry, possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "Geometry,",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an output【Geometry,】possibly changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "possibly",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry,【possibly】changing its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "changing",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry, possibly【changing】its structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "its",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry, possibly changing【its】structure and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "structure",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry, possibly changing its【structure】and type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "and",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry, possibly changing its structure【and】type(s).",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "type(s).",
        "trans": [
            "GeometryTransformer A framework for processes which transform an input Geometry into an output Geometry, possibly changing its structure and【type(s).】",
            "　　　一个过程框架,变换一个输入几何"
        ]
    },
    {
        "name": "LinearComponentExtracter",
        "trans": [
            "【LinearComponentExtracter】Extracts all the 1-dimensional (LineString) components from a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "Extracts",
        "trans": [
            "LinearComponentExtracter【Extracts】all the 1-dimensional (LineString) components from a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "LinearComponentExtracter Extracts【all】the 1-dimensional (LineString) components from a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LinearComponentExtracter Extracts all【the】1-dimensional (LineString) components from a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "1-dimensional",
        "trans": [
            "LinearComponentExtracter Extracts all the【1-dimensional】(LineString) components from a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "(LineString)",
        "trans": [
            "LinearComponentExtracter Extracts all the 1-dimensional【(LineString)】components from a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "components",
        "trans": [
            "LinearComponentExtracter Extracts all the 1-dimensional (LineString)【components】from a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "LinearComponentExtracter Extracts all the 1-dimensional (LineString) components【from】a Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LinearComponentExtracter Extracts all the 1-dimensional (LineString) components from【a】Geometry.",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "LinearComponentExtracter Extracts all the 1-dimensional (LineString) components from a【Geometry.】",
            "　　　提取所有维(LineString)组件几何。"
        ]
    },
    {
        "name": "CoordinateArraySequence",
        "trans": [
            "【CoordinateArraySequence】A CoordinateSequence backed by an array of Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "CoordinateArraySequence【A】CoordinateSequence backed by an array of Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "CoordinateArraySequence A【CoordinateSequence】backed by an array of Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "backed",
        "trans": [
            "CoordinateArraySequence A CoordinateSequence【backed】by an array of Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "CoordinateArraySequence A CoordinateSequence backed【by】an array of Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "CoordinateArraySequence A CoordinateSequence backed by【an】array of Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "array",
        "trans": [
            "CoordinateArraySequence A CoordinateSequence backed by an【array】of Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateArraySequence A CoordinateSequence backed by an array【of】Coordinates.",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "Coordinates.",
        "trans": [
            "CoordinateArraySequence A CoordinateSequence backed by an array of【Coordinates.】",
            "　　　支持的CoordinateSequence坐标的数组。"
        ]
    },
    {
        "name": "CoordinateArraySequenceFactory",
        "trans": [
            "【CoordinateArraySequenceFactory】Creates CoordinateSequences represented as an array of Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "CoordinateArraySequenceFactory【Creates】CoordinateSequences represented as an array of Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "CoordinateSequences",
        "trans": [
            "CoordinateArraySequenceFactory Creates【CoordinateSequences】represented as an array of Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "represented",
        "trans": [
            "CoordinateArraySequenceFactory Creates CoordinateSequences【represented】as an array of Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "as",
        "trans": [
            "CoordinateArraySequenceFactory Creates CoordinateSequences represented【as】an array of Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "CoordinateArraySequenceFactory Creates CoordinateSequences represented as【an】array of Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "array",
        "trans": [
            "CoordinateArraySequenceFactory Creates CoordinateSequences represented as an【array】of Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateArraySequenceFactory Creates CoordinateSequences represented as an array【of】Coordinates.",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "Coordinates.",
        "trans": [
            "CoordinateArraySequenceFactory Creates CoordinateSequences represented as an array of【Coordinates.】",
            "　　　创建CoordinateSequences表示为坐标的数组。"
        ]
    },
    {
        "name": "PackedCoordinateSequence",
        "trans": [
            "【PackedCoordinateSequence】A CoordinateSequence implementation based on a packed arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "PackedCoordinateSequence【A】CoordinateSequence implementation based on a packed arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "PackedCoordinateSequence A【CoordinateSequence】implementation based on a packed arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "implementation",
        "trans": [
            "PackedCoordinateSequence A CoordinateSequence【implementation】based on a packed arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "based",
        "trans": [
            "PackedCoordinateSequence A CoordinateSequence implementation【based】on a packed arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "PackedCoordinateSequence A CoordinateSequence implementation based【on】a packed arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PackedCoordinateSequence A CoordinateSequence implementation based on【a】packed arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "packed",
        "trans": [
            "PackedCoordinateSequence A CoordinateSequence implementation based on a【packed】arrays.",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "arrays.",
        "trans": [
            "PackedCoordinateSequence A CoordinateSequence implementation based on a packed【arrays.】",
            "　　　CoordinateSequence实现基于数组。"
        ]
    },
    {
        "name": "PackedCoordinateSequence.Double",
        "trans": [
            "【PackedCoordinateSequence.Double】Packed coordinate sequence implementation based on doubles",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "Packed",
        "trans": [
            "PackedCoordinateSequence.Double【Packed】coordinate sequence implementation based on doubles",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "PackedCoordinateSequence.Double Packed【coordinate】sequence implementation based on doubles",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "PackedCoordinateSequence.Double Packed coordinate【sequence】implementation based on doubles",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "implementation",
        "trans": [
            "PackedCoordinateSequence.Double Packed coordinate sequence【implementation】based on doubles",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "based",
        "trans": [
            "PackedCoordinateSequence.Double Packed coordinate sequence implementation【based】on doubles",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "on",
        "trans": [
            "PackedCoordinateSequence.Double Packed coordinate sequence implementation based【on】doubles",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "doubles",
        "trans": [
            "PackedCoordinateSequence.Double Packed coordinate sequence implementation based on【doubles】",
            "　　　包装坐标序列的实现基于双打"
        ]
    },
    {
        "name": "PackedCoordinateSequence.Float",
        "trans": [
            "【PackedCoordinateSequence.Float】Packed coordinate sequence implementation based on floats",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "Packed",
        "trans": [
            "PackedCoordinateSequence.Float【Packed】coordinate sequence implementation based on floats",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "PackedCoordinateSequence.Float Packed【coordinate】sequence implementation based on floats",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "PackedCoordinateSequence.Float Packed coordinate【sequence】implementation based on floats",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "implementation",
        "trans": [
            "PackedCoordinateSequence.Float Packed coordinate sequence【implementation】based on floats",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "based",
        "trans": [
            "PackedCoordinateSequence.Float Packed coordinate sequence implementation【based】on floats",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "on",
        "trans": [
            "PackedCoordinateSequence.Float Packed coordinate sequence implementation based【on】floats",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "floats",
        "trans": [
            "PackedCoordinateSequence.Float Packed coordinate sequence implementation based on【floats】",
            "　　　包装坐标序列的实现基于浮动"
        ]
    },
    {
        "name": "PackedCoordinateSequenceFactory",
        "trans": [
            "【PackedCoordinateSequenceFactory】Builds packed array coordinate sequences.",
            "　　　建立了阵列坐标序列。"
        ]
    },
    {
        "name": "Builds",
        "trans": [
            "PackedCoordinateSequenceFactory【Builds】packed array coordinate sequences.",
            "　　　建立了阵列坐标序列。"
        ]
    },
    {
        "name": "packed",
        "trans": [
            "PackedCoordinateSequenceFactory Builds【packed】array coordinate sequences.",
            "　　　建立了阵列坐标序列。"
        ]
    },
    {
        "name": "array",
        "trans": [
            "PackedCoordinateSequenceFactory Builds packed【array】coordinate sequences.",
            "　　　建立了阵列坐标序列。"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "PackedCoordinateSequenceFactory Builds packed array【coordinate】sequences.",
            "　　　建立了阵列坐标序列。"
        ]
    },
    {
        "name": "sequences.",
        "trans": [
            "PackedCoordinateSequenceFactory Builds packed array coordinate【sequences.】",
            "　　　建立了阵列坐标序列。"
        ]
    },
    {
        "name": "InStream",
        "trans": [
            "【InStream】A interface for classes providing an input stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "InStream【A】interface for classes providing an input stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "InStream A【interface】for classes providing an input stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "InStream A interface【for】classes providing an input stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "InStream A interface for【classes】providing an input stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "providing",
        "trans": [
            "InStream A interface for classes【providing】an input stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "InStream A interface for classes providing【an】input stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "input",
        "trans": [
            "InStream A interface for classes providing an【input】stream of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "stream",
        "trans": [
            "InStream A interface for classes providing an input【stream】of bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "InStream A interface for classes providing an input stream【of】bytes.",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "bytes.",
        "trans": [
            "InStream A interface for classes providing an input stream of【bytes.】",
            "　　　一个接口类提供一个字节输入流。"
        ]
    },
    {
        "name": "OutStream",
        "trans": [
            "【OutStream】A interface for classes providing an output stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "OutStream【A】interface for classes providing an output stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "OutStream A【interface】for classes providing an output stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "OutStream A interface【for】classes providing an output stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "OutStream A interface for【classes】providing an output stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "providing",
        "trans": [
            "OutStream A interface for classes【providing】an output stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "OutStream A interface for classes providing【an】output stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "output",
        "trans": [
            "OutStream A interface for classes providing an【output】stream of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "stream",
        "trans": [
            "OutStream A interface for classes providing an output【stream】of bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OutStream A interface for classes providing an output stream【of】bytes.",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "bytes.",
        "trans": [
            "OutStream A interface for classes providing an output stream of【bytes.】",
            "　　　一个接口类提供的字节输出流。"
        ]
    },
    {
        "name": "WKBConstants",
        "trans": [
            "【WKBConstants】Constant values used by the WKB format",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "Constant",
        "trans": [
            "WKBConstants【Constant】values used by the WKB format",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "values",
        "trans": [
            "WKBConstants Constant【values】used by the WKB format",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "used",
        "trans": [
            "WKBConstants Constant values【used】by the WKB format",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "by",
        "trans": [
            "WKBConstants Constant values used【by】the WKB format",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "the",
        "trans": [
            "WKBConstants Constant values used by【the】WKB format",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "WKB",
        "trans": [
            "WKBConstants Constant values used by the【WKB】format",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "format",
        "trans": [
            "WKBConstants Constant values used by the WKB【format】",
            "　　　常量值WKB所使用的格式"
        ]
    },
    {
        "name": "ByteArrayInStream",
        "trans": [
            "【ByteArrayInStream】Allows an array of bytes to be used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "Allows",
        "trans": [
            "ByteArrayInStream【Allows】an array of bytes to be used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "ByteArrayInStream Allows【an】array of bytes to be used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "array",
        "trans": [
            "ByteArrayInStream Allows an【array】of bytes to be used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ByteArrayInStream Allows an array【of】bytes to be used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "bytes",
        "trans": [
            "ByteArrayInStream Allows an array of【bytes】to be used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "ByteArrayInStream Allows an array of bytes【to】be used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "be",
        "trans": [
            "ByteArrayInStream Allows an array of bytes to【be】used as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "used",
        "trans": [
            "ByteArrayInStream Allows an array of bytes to be【used】as an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "as",
        "trans": [
            "ByteArrayInStream Allows an array of bytes to be used【as】an InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "ByteArrayInStream Allows an array of bytes to be used as【an】InStream.",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "InStream.",
        "trans": [
            "ByteArrayInStream Allows an array of bytes to be used as an【InStream.】",
            "　　　允许使用的字节数组作为生态基。"
        ]
    },
    {
        "name": "SimilarityMeasure",
        "trans": [
            "【SimilarityMeasure】An interface for classes which measures the degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "SimilarityMeasure【An】interface for classes which measures the degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "SimilarityMeasure An【interface】for classes which measures the degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "SimilarityMeasure An interface【for】classes which measures the degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "SimilarityMeasure An interface for【classes】which measures the degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SimilarityMeasure An interface for classes【which】measures the degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "measures",
        "trans": [
            "SimilarityMeasure An interface for classes which【measures】the degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SimilarityMeasure An interface for classes which measures【the】degree of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "degree",
        "trans": [
            "SimilarityMeasure An interface for classes which measures the【degree】of similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimilarityMeasure An interface for classes which measures the degree【of】similarity between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "similarity",
        "trans": [
            "SimilarityMeasure An interface for classes which measures the degree of【similarity】between two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "SimilarityMeasure An interface for classes which measures the degree of similarity【between】two Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SimilarityMeasure An interface for classes which measures the degree of similarity between【two】Geometrys.",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "Geometrys.",
        "trans": [
            "SimilarityMeasure An interface for classes which measures the degree of similarity between two【Geometrys.】",
            "　　　一个接口类的措施之间的相似程度,两个几何。"
        ]
    },
    {
        "name": "AreaSimilarityMeasure",
        "trans": [
            "【AreaSimilarityMeasure】Measures the degree of similarity between two Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "Measures",
        "trans": [
            "AreaSimilarityMeasure【Measures】the degree of similarity between two Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "AreaSimilarityMeasure Measures【the】degree of similarity between two Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "degree",
        "trans": [
            "AreaSimilarityMeasure Measures the【degree】of similarity between two Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "AreaSimilarityMeasure Measures the degree【of】similarity between two Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "similarity",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of【similarity】between two Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "between",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity【between】two Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "two",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between【two】Geometrys using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two【Geometrys】using the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "using",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys【using】the area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using【the】area of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "area",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the【area】of intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the area【of】intersection between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the area of【intersection】between the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "between",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the area of intersection【between】the geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the area of intersection between【the】geometries.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "AreaSimilarityMeasure Measures the degree of similarity between two Geometrys using the area of intersection between the【geometries.】",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "HausdorffSimilarityMeasure",
        "trans": [
            "【HausdorffSimilarityMeasure】Measures the degree of similarity between two Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "Measures",
        "trans": [
            "HausdorffSimilarityMeasure【Measures】the degree of similarity between two Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "HausdorffSimilarityMeasure Measures【the】degree of similarity between two Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "degree",
        "trans": [
            "HausdorffSimilarityMeasure Measures the【degree】of similarity between two Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree【of】similarity between two Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "similarity",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of【similarity】between two Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "between",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity【between】two Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "two",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity between【two】Geometrys using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity between two【Geometrys】using the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "using",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity between two Geometrys【using】the Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity between two Geometrys using【the】Hausdorff distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "Hausdorff",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity between two Geometrys using the【Hausdorff】distance metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity between two Geometrys using the Hausdorff【distance】metric.",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "metric.",
        "trans": [
            "HausdorffSimilarityMeasure Measures the degree of similarity between two Geometrys using the Hausdorff distance【metric.】",
            "　　　措施之间的相似程度,两个几何"
        ]
    },
    {
        "name": "SimilarityMeasureCombiner",
        "trans": [
            "【SimilarityMeasureCombiner】Provides methods to mathematically combine SimilarityMeasure values.",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "SimilarityMeasureCombiner【Provides】methods to mathematically combine SimilarityMeasure values.",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "methods",
        "trans": [
            "SimilarityMeasureCombiner Provides【methods】to mathematically combine SimilarityMeasure values.",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SimilarityMeasureCombiner Provides methods【to】mathematically combine SimilarityMeasure values.",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "mathematically",
        "trans": [
            "SimilarityMeasureCombiner Provides methods to【mathematically】combine SimilarityMeasure values.",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "combine",
        "trans": [
            "SimilarityMeasureCombiner Provides methods to mathematically【combine】SimilarityMeasure values.",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "SimilarityMeasure",
        "trans": [
            "SimilarityMeasureCombiner Provides methods to mathematically combine【SimilarityMeasure】values.",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "values.",
        "trans": [
            "SimilarityMeasureCombiner Provides methods to mathematically combine SimilarityMeasure【values.】",
            "　　　提供数学方法结合SimilarityMeasure值。"
        ]
    },
    {
        "name": "Densifier",
        "trans": [
            "【Densifier】Densifies a Geometry by inserting extra vertices along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "Densifies",
        "trans": [
            "Densifier【Densifies】a Geometry by inserting extra vertices along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Densifier Densifies【a】Geometry by inserting extra vertices along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Densifier Densifies a【Geometry】by inserting extra vertices along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "by",
        "trans": [
            "Densifier Densifies a Geometry【by】inserting extra vertices along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "inserting",
        "trans": [
            "Densifier Densifies a Geometry by【inserting】extra vertices along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "extra",
        "trans": [
            "Densifier Densifies a Geometry by inserting【extra】vertices along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra【vertices】along the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "along",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices【along】the line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices along【the】line segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "line",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices along the【line】segments contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices along the line【segments】contained in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "contained",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices along the line segments【contained】in the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices along the line segments contained【in】the geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices along the line segments contained in【the】geometry.",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "Densifier Densifies a Geometry by inserting extra vertices along the line segments contained in the【geometry.】",
            "　　　致密的几何插入额外的顶点的线段"
        ]
    },
    {
        "name": "LineDissolver",
        "trans": [
            "【LineDissolver】Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "Dissolves",
        "trans": [
            "LineDissolver【Dissolves】the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineDissolver Dissolves【the】linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LineDissolver Dissolves the【linear】components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "components",
        "trans": [
            "LineDissolver Dissolves the linear【components】from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "from",
        "trans": [
            "LineDissolver Dissolves the linear components【from】a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineDissolver Dissolves the linear components from【a】collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "LineDissolver Dissolves the linear components from a【collection】of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection【of】Geometrys into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of【Geometrys】into a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "into",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys【into】a set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into【a】set of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "set",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a【set】of maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set【of】maximal-length Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "maximal-length",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of【maximal-length】Linestrings in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "Linestrings",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length【Linestrings】in which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "in",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings【in】which every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "which",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in【which】every unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "every",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which【every】unique segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "unique",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every【unique】segment appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique【segment】appears once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "appears",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment【appears】once only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "once",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears【once】only.",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "only.",
        "trans": [
            "LineDissolver Dissolves the linear components from a collection of Geometrys into a set of maximal-length Linestrings in which every unique segment appears once【only.】",
            "　　　溶解的线性组件"
        ]
    },
    {
        "name": "LargestEmptyCircle",
        "trans": [
            "【LargestEmptyCircle】Constructs the Largest Empty Circle for a set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "Constructs",
        "trans": [
            "LargestEmptyCircle【Constructs】the Largest Empty Circle for a set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LargestEmptyCircle Constructs【the】Largest Empty Circle for a set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "Largest",
        "trans": [
            "LargestEmptyCircle Constructs the【Largest】Empty Circle for a set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "Empty",
        "trans": [
            "LargestEmptyCircle Constructs the Largest【Empty】Circle for a set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "Circle",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty【Circle】for a set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "for",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle【for】a set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for【a】set of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "set",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a【set】of obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set【of】obstacle geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "obstacle",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set of【obstacle】geometries, up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "geometries,",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle【geometries,】up to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "up",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle geometries,【up】to a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "to",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle geometries, up【to】a specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle geometries, up to【a】specified tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle geometries, up to a【specified】tolerance.",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "tolerance.",
        "trans": [
            "LargestEmptyCircle Constructs the Largest Empty Circle for a set of obstacle geometries, up to a specified【tolerance.】",
            "　　　结构最大的一组空的圆"
        ]
    },
    {
        "name": "MaximumInscribedCircle",
        "trans": [
            "【MaximumInscribedCircle】Constructs the Maximum Inscribed Circle for a polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "Constructs",
        "trans": [
            "MaximumInscribedCircle【Constructs】the Maximum Inscribed Circle for a polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MaximumInscribedCircle Constructs【the】Maximum Inscribed Circle for a polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "Maximum",
        "trans": [
            "MaximumInscribedCircle Constructs the【Maximum】Inscribed Circle for a polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "Inscribed",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum【Inscribed】Circle for a polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "Circle",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed【Circle】for a polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle【for】a polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for【a】polygonal Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "polygonal",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a【polygonal】Geometry, up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "Geometry,",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal【Geometry,】up to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "up",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal Geometry,【up】to a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "to",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal Geometry, up【to】a specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal Geometry, up to【a】specified tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal Geometry, up to a【specified】tolerance.",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "tolerance.",
        "trans": [
            "MaximumInscribedCircle Constructs the Maximum Inscribed Circle for a polygonal Geometry, up to a specified【tolerance.】",
            "　　　结构的最大内切圆"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "【BoundaryNodeRule】An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "An",
        "trans": [
            "BoundaryNodeRule【An】interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "BoundaryNodeRule An【interface】for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "for",
        "trans": [
            "BoundaryNodeRule An interface【for】rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "rules",
        "trans": [
            "BoundaryNodeRule An interface for【rules】which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "which",
        "trans": [
            "BoundaryNodeRule An interface for rules【which】determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "determine",
        "trans": [
            "BoundaryNodeRule An interface for rules which【determine】whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine【whether】node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "node",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether【node】points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "points",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node【points】which are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "which",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points【which】are in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "are",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which【are】in boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "in",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are【in】boundaries of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "boundaries",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in【boundaries】of Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries【of】Lineal geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "Lineal",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of【Lineal】geometry components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal【geometry】components are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "components",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry【components】are in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "are",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components【are】in the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "in",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are【in】the boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in【the】boundary of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the【boundary】of the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary【of】the parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of【the】parent geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "parent",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the【parent】geometry collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent【geometry】collection.",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "collection.",
        "trans": [
            "BoundaryNodeRule An interface for rules which determine whether node points which are in boundaries of Lineal geometry components are in the boundary of the parent geometry【collection.】",
            "　　　一个接口规则确定节点的点"
        ]
    },
    {
        "name": "Angle",
        "trans": [
            "【Angle】Utility functions for working with angles.",
            "　　　效用函数来处理角度。"
        ]
    },
    {
        "name": "Utility",
        "trans": [
            "Angle【Utility】functions for working with angles.",
            "　　　效用函数来处理角度。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "Angle Utility【functions】for working with angles.",
            "　　　效用函数来处理角度。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Angle Utility functions【for】working with angles.",
            "　　　效用函数来处理角度。"
        ]
    },
    {
        "name": "working",
        "trans": [
            "Angle Utility functions for【working】with angles.",
            "　　　效用函数来处理角度。"
        ]
    },
    {
        "name": "with",
        "trans": [
            "Angle Utility functions for working【with】angles.",
            "　　　效用函数来处理角度。"
        ]
    },
    {
        "name": "angles.",
        "trans": [
            "Angle Utility functions for working with【angles.】",
            "　　　效用函数来处理角度。"
        ]
    },
    {
        "name": "LineStringExtracter",
        "trans": [
            "【LineStringExtracter】Extracts all the LineString elements from a Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "Extracts",
        "trans": [
            "LineStringExtracter【Extracts】all the LineString elements from a Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "LineStringExtracter Extracts【all】the LineString elements from a Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineStringExtracter Extracts all【the】LineString elements from a Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "LineStringExtracter Extracts all the【LineString】elements from a Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "elements",
        "trans": [
            "LineStringExtracter Extracts all the LineString【elements】from a Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "LineStringExtracter Extracts all the LineString elements【from】a Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineStringExtracter Extracts all the LineString elements from【a】Geometry.",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "LineStringExtracter Extracts all the LineString elements from a【Geometry.】",
            "　　　提取所有LineString从几何元素。"
        ]
    },
    {
        "name": "PointExtracter",
        "trans": [
            "【PointExtracter】Extracts all the 0-dimensional (Point) components from a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "Extracts",
        "trans": [
            "PointExtracter【Extracts】all the 0-dimensional (Point) components from a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "PointExtracter Extracts【all】the 0-dimensional (Point) components from a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointExtracter Extracts all【the】0-dimensional (Point) components from a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "0-dimensional",
        "trans": [
            "PointExtracter Extracts all the【0-dimensional】(Point) components from a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "(Point)",
        "trans": [
            "PointExtracter Extracts all the 0-dimensional【(Point)】components from a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "components",
        "trans": [
            "PointExtracter Extracts all the 0-dimensional (Point)【components】from a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "PointExtracter Extracts all the 0-dimensional (Point) components【from】a Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointExtracter Extracts all the 0-dimensional (Point) components from【a】Geometry.",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "PointExtracter Extracts all the 0-dimensional (Point) components from a【Geometry.】",
            "　　　提取所有0-dimensional(点)从几何组件。"
        ]
    },
    {
        "name": "PolygonExtracter",
        "trans": [
            "【PolygonExtracter】Extracts all the Polygon elements from a Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "Extracts",
        "trans": [
            "PolygonExtracter【Extracts】all the Polygon elements from a Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "PolygonExtracter Extracts【all】the Polygon elements from a Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PolygonExtracter Extracts all【the】Polygon elements from a Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "Polygon",
        "trans": [
            "PolygonExtracter Extracts all the【Polygon】elements from a Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "elements",
        "trans": [
            "PolygonExtracter Extracts all the Polygon【elements】from a Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "PolygonExtracter Extracts all the Polygon elements【from】a Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PolygonExtracter Extracts all the Polygon elements from【a】Geometry.",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "PolygonExtracter Extracts all the Polygon elements from a【Geometry.】",
            "　　　提取所有的多边形几何元素。"
        ]
    },
    {
        "name": "ShortCircuitedGeometryVisitor",
        "trans": [
            "【ShortCircuitedGeometryVisitor】A visitor to Geometry components, which allows short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ShortCircuitedGeometryVisitor【A】visitor to Geometry components, which allows short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "visitor",
        "trans": [
            "ShortCircuitedGeometryVisitor A【visitor】to Geometry components, which allows short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor【to】Geometry components, which allows short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to【Geometry】components, which allows short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "components,",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry【components,】which allows short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components,【which】allows short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "allows",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components, which【allows】short-circuiting when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "short-circuiting",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components, which allows【short-circuiting】when a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "when",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components, which allows short-circuiting【when】a defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components, which allows short-circuiting when【a】defined condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components, which allows short-circuiting when a【defined】condition holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "condition",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components, which allows short-circuiting when a defined【condition】holds.",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "holds.",
        "trans": [
            "ShortCircuitedGeometryVisitor A visitor to Geometry components, which allows short-circuiting when a defined condition【holds.】",
            "　　　一个游客几何组件,"
        ]
    },
    {
        "name": "SineStarFactory",
        "trans": [
            "【SineStarFactory】Creates geometries which are shaped like multi-armed stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "SineStarFactory【Creates】geometries which are shaped like multi-armed stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "SineStarFactory Creates【geometries】which are shaped like multi-armed stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SineStarFactory Creates geometries【which】are shaped like multi-armed stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "are",
        "trans": [
            "SineStarFactory Creates geometries which【are】shaped like multi-armed stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "shaped",
        "trans": [
            "SineStarFactory Creates geometries which are【shaped】like multi-armed stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "like",
        "trans": [
            "SineStarFactory Creates geometries which are shaped【like】multi-armed stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "multi-armed",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like【multi-armed】stars with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "stars",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed【stars】with each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "with",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars【with】each arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "each",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars with【each】arm shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "arm",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars with each【arm】shaped like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "shaped",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars with each arm【shaped】like a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "like",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars with each arm shaped【like】a sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars with each arm shaped like【a】sine wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "sine",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars with each arm shaped like a【sine】wave.",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "wave.",
        "trans": [
            "SineStarFactory Creates geometries which are shaped like multi-armed stars with each arm shaped like a sine【wave.】",
            "　　　创建几何图形的形状像multi-armed星星"
        ]
    },
    {
        "name": "EdgeEndBuilder",
        "trans": [
            "【EdgeEndBuilder】Computes the EdgeEnds which arise from a noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "EdgeEndBuilder【Computes】the EdgeEnds which arise from a noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeEndBuilder Computes【the】EdgeEnds which arise from a noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "EdgeEnds",
        "trans": [
            "EdgeEndBuilder Computes the【EdgeEnds】which arise from a noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "EdgeEndBuilder Computes the EdgeEnds【which】arise from a noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "arise",
        "trans": [
            "EdgeEndBuilder Computes the EdgeEnds which【arise】from a noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "EdgeEndBuilder Computes the EdgeEnds which arise【from】a noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeEndBuilder Computes the EdgeEnds which arise from【a】noded Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "noded",
        "trans": [
            "EdgeEndBuilder Computes the EdgeEnds which arise from a【noded】Edge.",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "Edge.",
        "trans": [
            "EdgeEndBuilder Computes the EdgeEnds which arise from a noded【Edge.】",
            "　　　计算分散开EdgeEnds源自一个优势。"
        ]
    },
    {
        "name": "EdgeEndBundle",
        "trans": [
            "【EdgeEndBundle】A collection of EdgeEnds which obey the following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "A",
        "trans": [
            "EdgeEndBundle【A】collection of EdgeEnds which obey the following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "EdgeEndBundle A【collection】of EdgeEnds which obey the following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeEndBundle A collection【of】EdgeEnds which obey the following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "EdgeEnds",
        "trans": [
            "EdgeEndBundle A collection of【EdgeEnds】which obey the following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "which",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds【which】obey the following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "obey",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which【obey】the following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey【the】following invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "following",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the【following】invariant: They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "invariant:",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following【invariant:】They originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "They",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant:【They】originate at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "originate",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They【originate】at the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "at",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate【at】the same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at【the】same node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "same",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at the【same】node and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "node",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at the same【node】and have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "and",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at the same node【and】have the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "have",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at the same node and【have】the same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at the same node and have【the】same direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "same",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at the same node and have the【same】direction.",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "direction.",
        "trans": [
            "EdgeEndBundle A collection of EdgeEnds which obey the following invariant: They originate at the same node and have the same【direction.】",
            "　　　集合的EdgeEnds服从以下不变:"
        ]
    },
    {
        "name": "EdgeEndBundleStar",
        "trans": [
            "【EdgeEndBundleStar】An ordered list of EdgeEndBundles around a RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "EdgeEndBundleStar【An】ordered list of EdgeEndBundles around a RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "ordered",
        "trans": [
            "EdgeEndBundleStar An【ordered】list of EdgeEndBundles around a RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "EdgeEndBundleStar An ordered【list】of EdgeEndBundles around a RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeEndBundleStar An ordered list【of】EdgeEndBundles around a RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "EdgeEndBundles",
        "trans": [
            "EdgeEndBundleStar An ordered list of【EdgeEndBundles】around a RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "around",
        "trans": [
            "EdgeEndBundleStar An ordered list of EdgeEndBundles【around】a RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeEndBundleStar An ordered list of EdgeEndBundles around【a】RelateNode.",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "RelateNode.",
        "trans": [
            "EdgeEndBundleStar An ordered list of EdgeEndBundles around a【RelateNode.】",
            "　　　有序列表的EdgeEndBundles RelateNode。"
        ]
    },
    {
        "name": "ByteOrderDataInStream",
        "trans": [
            "【ByteOrderDataInStream】Allows reading a stream of Java primitive datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "Allows",
        "trans": [
            "ByteOrderDataInStream【Allows】reading a stream of Java primitive datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "reading",
        "trans": [
            "ByteOrderDataInStream Allows【reading】a stream of Java primitive datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ByteOrderDataInStream Allows reading【a】stream of Java primitive datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "stream",
        "trans": [
            "ByteOrderDataInStream Allows reading a【stream】of Java primitive datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream【of】Java primitive datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "Java",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of【Java】primitive datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "primitive",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java【primitive】datatypes from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "datatypes",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive【datatypes】from an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "from",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes【from】an underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "an",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from【an】underlying InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "underlying",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an【underlying】InStream, with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "InStream,",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying【InStream,】with the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "with",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream,【with】the representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with【the】representation being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with the【representation】being in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "being",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with the representation【being】in either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "in",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with the representation being【in】either common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "either",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with the representation being in【either】common byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "common",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with the representation being in either【common】byte ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "byte",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with the representation being in either common【byte】ordering.",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "ordering.",
        "trans": [
            "ByteOrderDataInStream Allows reading a stream of Java primitive datatypes from an underlying InStream, with the representation being in either common byte【ordering.】",
            "　　　允许读流从一个底层Java原始数据类型"
        ]
    },
    {
        "name": "ByteOrderValues",
        "trans": [
            "【ByteOrderValues】Methods to read and write primitive Java datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "Methods",
        "trans": [
            "ByteOrderValues【Methods】to read and write primitive Java datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "to",
        "trans": [
            "ByteOrderValues Methods【to】read and write primitive Java datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "read",
        "trans": [
            "ByteOrderValues Methods to【read】and write primitive Java datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "and",
        "trans": [
            "ByteOrderValues Methods to read【and】write primitive Java datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "write",
        "trans": [
            "ByteOrderValues Methods to read and【write】primitive Java datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "primitive",
        "trans": [
            "ByteOrderValues Methods to read and write【primitive】Java datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "Java",
        "trans": [
            "ByteOrderValues Methods to read and write primitive【Java】datatypes from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "datatypes",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java【datatypes】from/to byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "from/to",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes【from/to】byte sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "byte",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to【byte】sequences, allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "sequences,",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte【sequences,】allowing the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "allowing",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte sequences,【allowing】the byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte sequences, allowing【the】byte order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "byte",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte sequences, allowing the【byte】order to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "order",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte sequences, allowing the byte【order】to be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "to",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte sequences, allowing the byte order【to】be specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "be",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte sequences, allowing the byte order to【be】specified",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "ByteOrderValues Methods to read and write primitive Java datatypes from/to byte sequences, allowing the byte order to be【specified】",
            "　　　方法来读取和写入原始的Java数据类型从/到字节"
        ]
    },
    {
        "name": "InputStreamInStream",
        "trans": [
            "【InputStreamInStream】An adapter to allow an InputStream to be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "An",
        "trans": [
            "InputStreamInStream【An】adapter to allow an InputStream to be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "adapter",
        "trans": [
            "InputStreamInStream An【adapter】to allow an InputStream to be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "to",
        "trans": [
            "InputStreamInStream An adapter【to】allow an InputStream to be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "allow",
        "trans": [
            "InputStreamInStream An adapter to【allow】an InputStream to be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "an",
        "trans": [
            "InputStreamInStream An adapter to allow【an】InputStream to be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "InputStream",
        "trans": [
            "InputStreamInStream An adapter to allow an【InputStream】to be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "to",
        "trans": [
            "InputStreamInStream An adapter to allow an InputStream【to】be used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "be",
        "trans": [
            "InputStreamInStream An adapter to allow an InputStream to【be】used as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "used",
        "trans": [
            "InputStreamInStream An adapter to allow an InputStream to be【used】as an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "as",
        "trans": [
            "InputStreamInStream An adapter to allow an InputStream to be used【as】an InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "an",
        "trans": [
            "InputStreamInStream An adapter to allow an InputStream to be used as【an】InStream",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "InStream",
        "trans": [
            "InputStreamInStream An adapter to allow an InputStream to be used as an【InStream】",
            "　　　一个适配器允许InputStream作为生态基"
        ]
    },
    {
        "name": "OrdinateFormat",
        "trans": [
            "【OrdinateFormat】Formats numeric values for ordinates in a consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "Formats",
        "trans": [
            "OrdinateFormat【Formats】numeric values for ordinates in a consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "numeric",
        "trans": [
            "OrdinateFormat Formats【numeric】values for ordinates in a consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "values",
        "trans": [
            "OrdinateFormat Formats numeric【values】for ordinates in a consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "for",
        "trans": [
            "OrdinateFormat Formats numeric values【for】ordinates in a consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "ordinates",
        "trans": [
            "OrdinateFormat Formats numeric values for【ordinates】in a consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "in",
        "trans": [
            "OrdinateFormat Formats numeric values for ordinates【in】a consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OrdinateFormat Formats numeric values for ordinates in【a】consistent, accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "consistent,",
        "trans": [
            "OrdinateFormat Formats numeric values for ordinates in a【consistent,】accurate way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "accurate",
        "trans": [
            "OrdinateFormat Formats numeric values for ordinates in a consistent,【accurate】way.",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "way.",
        "trans": [
            "OrdinateFormat Formats numeric values for ordinates in a consistent, accurate【way.】",
            "　　　格式为纵坐标数值"
        ]
    },
    {
        "name": "OutputStreamOutStream",
        "trans": [
            "【OutputStreamOutStream】An adapter to allow an OutputStream to be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "An",
        "trans": [
            "OutputStreamOutStream【An】adapter to allow an OutputStream to be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "adapter",
        "trans": [
            "OutputStreamOutStream An【adapter】to allow an OutputStream to be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "to",
        "trans": [
            "OutputStreamOutStream An adapter【to】allow an OutputStream to be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "allow",
        "trans": [
            "OutputStreamOutStream An adapter to【allow】an OutputStream to be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "an",
        "trans": [
            "OutputStreamOutStream An adapter to allow【an】OutputStream to be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "OutputStream",
        "trans": [
            "OutputStreamOutStream An adapter to allow an【OutputStream】to be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "to",
        "trans": [
            "OutputStreamOutStream An adapter to allow an OutputStream【to】be used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "be",
        "trans": [
            "OutputStreamOutStream An adapter to allow an OutputStream to【be】used as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "used",
        "trans": [
            "OutputStreamOutStream An adapter to allow an OutputStream to be【used】as an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "as",
        "trans": [
            "OutputStreamOutStream An adapter to allow an OutputStream to be used【as】an OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "an",
        "trans": [
            "OutputStreamOutStream An adapter to allow an OutputStream to be used as【an】OutStream",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "OutStream",
        "trans": [
            "OutputStreamOutStream An adapter to allow an OutputStream to be used as an【OutStream】",
            "　　　一个适配器允许用作OutStream OutputStream"
        ]
    },
    {
        "name": "WKBHexFileReader",
        "trans": [
            "【WKBHexFileReader】Reads a sequence of Geometrys in WKBHex format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "Reads",
        "trans": [
            "WKBHexFileReader【Reads】a sequence of Geometrys in WKBHex format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKBHexFileReader Reads【a】sequence of Geometrys in WKBHex format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "WKBHexFileReader Reads a【sequence】of Geometrys in WKBHex format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "of",
        "trans": [
            "WKBHexFileReader Reads a sequence【of】Geometrys in WKBHex format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "WKBHexFileReader Reads a sequence of【Geometrys】in WKBHex format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "in",
        "trans": [
            "WKBHexFileReader Reads a sequence of Geometrys【in】WKBHex format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "WKBHex",
        "trans": [
            "WKBHexFileReader Reads a sequence of Geometrys in【WKBHex】format from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "format",
        "trans": [
            "WKBHexFileReader Reads a sequence of Geometrys in WKBHex【format】from a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "from",
        "trans": [
            "WKBHexFileReader Reads a sequence of Geometrys in WKBHex format【from】a text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKBHexFileReader Reads a sequence of Geometrys in WKBHex format from【a】text file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "text",
        "trans": [
            "WKBHexFileReader Reads a sequence of Geometrys in WKBHex format from a【text】file.",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "file.",
        "trans": [
            "WKBHexFileReader Reads a sequence of Geometrys in WKBHex format from a text【file.】",
            "　　　读取一个序列的几何WKBHex格式"
        ]
    },
    {
        "name": "WKBReader",
        "trans": [
            "【WKBReader】Reads a Geometryfrom a byte stream in Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "Reads",
        "trans": [
            "WKBReader【Reads】a Geometryfrom a byte stream in Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKBReader Reads【a】Geometryfrom a byte stream in Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "Geometryfrom",
        "trans": [
            "WKBReader Reads a【Geometryfrom】a byte stream in Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKBReader Reads a Geometryfrom【a】byte stream in Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "byte",
        "trans": [
            "WKBReader Reads a Geometryfrom a【byte】stream in Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "stream",
        "trans": [
            "WKBReader Reads a Geometryfrom a byte【stream】in Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "WKBReader Reads a Geometryfrom a byte stream【in】Well-Known Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "Well-Known",
        "trans": [
            "WKBReader Reads a Geometryfrom a byte stream in【Well-Known】Binary format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "Binary",
        "trans": [
            "WKBReader Reads a Geometryfrom a byte stream in Well-Known【Binary】format.",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "format.",
        "trans": [
            "WKBReader Reads a Geometryfrom a byte stream in Well-Known Binary【format.】",
            "　　　读取Geometryfrom著名的二进制格式的字节流。"
        ]
    },
    {
        "name": "WKBWriter",
        "trans": [
            "【WKBWriter】Writes a Geometry into Well-Known Binary format.",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "Writes",
        "trans": [
            "WKBWriter【Writes】a Geometry into Well-Known Binary format.",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKBWriter Writes【a】Geometry into Well-Known Binary format.",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "WKBWriter Writes a【Geometry】into Well-Known Binary format.",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "into",
        "trans": [
            "WKBWriter Writes a Geometry【into】Well-Known Binary format.",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "Well-Known",
        "trans": [
            "WKBWriter Writes a Geometry into【Well-Known】Binary format.",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "Binary",
        "trans": [
            "WKBWriter Writes a Geometry into Well-Known【Binary】format.",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "format.",
        "trans": [
            "WKBWriter Writes a Geometry into Well-Known Binary【format.】",
            "　　　写一个几何为著名的二进制格式。"
        ]
    },
    {
        "name": "WKTConstants",
        "trans": [
            "【WKTConstants】Constants used in the WKT (Well-Known Text) format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "Constants",
        "trans": [
            "WKTConstants【Constants】used in the WKT (Well-Known Text) format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "used",
        "trans": [
            "WKTConstants Constants【used】in the WKT (Well-Known Text) format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "WKTConstants Constants used【in】the WKT (Well-Known Text) format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "WKTConstants Constants used in【the】WKT (Well-Known Text) format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "WKT",
        "trans": [
            "WKTConstants Constants used in the【WKT】(Well-Known Text) format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "(Well-Known",
        "trans": [
            "WKTConstants Constants used in the WKT【(Well-Known】Text) format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "Text)",
        "trans": [
            "WKTConstants Constants used in the WKT (Well-Known【Text)】format.",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "format.",
        "trans": [
            "WKTConstants Constants used in the WKT (Well-Known Text)【format.】",
            "　　　常量WKT(著名的文本)中使用的格式。"
        ]
    },
    {
        "name": "WKTFileReader",
        "trans": [
            "【WKTFileReader】Reads a sequence of Geometrys in WKT format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "Reads",
        "trans": [
            "WKTFileReader【Reads】a sequence of Geometrys in WKT format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKTFileReader Reads【a】sequence of Geometrys in WKT format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "WKTFileReader Reads a【sequence】of Geometrys in WKT format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "WKTFileReader Reads a sequence【of】Geometrys in WKT format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "WKTFileReader Reads a sequence of【Geometrys】in WKT format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "in",
        "trans": [
            "WKTFileReader Reads a sequence of Geometrys【in】WKT format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "WKT",
        "trans": [
            "WKTFileReader Reads a sequence of Geometrys in【WKT】format from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "format",
        "trans": [
            "WKTFileReader Reads a sequence of Geometrys in WKT【format】from a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "from",
        "trans": [
            "WKTFileReader Reads a sequence of Geometrys in WKT format【from】a text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKTFileReader Reads a sequence of Geometrys in WKT format from【a】text file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "text",
        "trans": [
            "WKTFileReader Reads a sequence of Geometrys in WKT format from a【text】file.",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "file.",
        "trans": [
            "WKTFileReader Reads a sequence of Geometrys in WKT format from a text【file.】",
            "　　　WKT格式的读取的序列几何"
        ]
    },
    {
        "name": "WKTReader",
        "trans": [
            "【WKTReader】Converts a geometry in Well-Known Text format to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "Converts",
        "trans": [
            "WKTReader【Converts】a geometry in Well-Known Text format to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKTReader Converts【a】geometry in Well-Known Text format to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "WKTReader Converts a【geometry】in Well-Known Text format to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "WKTReader Converts a geometry【in】Well-Known Text format to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "Well-Known",
        "trans": [
            "WKTReader Converts a geometry in【Well-Known】Text format to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "Text",
        "trans": [
            "WKTReader Converts a geometry in Well-Known【Text】format to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "format",
        "trans": [
            "WKTReader Converts a geometry in Well-Known Text【format】to a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "WKTReader Converts a geometry in Well-Known Text format【to】a Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKTReader Converts a geometry in Well-Known Text format to【a】Geometry.",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "WKTReader Converts a geometry in Well-Known Text format to a【Geometry.】",
            "　　　将一个几何在著名的文本格式转换为几何。"
        ]
    },
    {
        "name": "WKTWriter",
        "trans": [
            "【WKTWriter】Writes the Well-Known Text representation of a Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "Writes",
        "trans": [
            "WKTWriter【Writes】the Well-Known Text representation of a Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "WKTWriter Writes【the】Well-Known Text representation of a Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "Well-Known",
        "trans": [
            "WKTWriter Writes the【Well-Known】Text representation of a Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "Text",
        "trans": [
            "WKTWriter Writes the Well-Known【Text】representation of a Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "WKTWriter Writes the Well-Known Text【representation】of a Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "WKTWriter Writes the Well-Known Text representation【of】a Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "WKTWriter Writes the Well-Known Text representation of【a】Geometry.",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "WKTWriter Writes the Well-Known Text representation of a【Geometry.】",
            "　　　著名的文本表示的几何写道。"
        ]
    },
    {
        "name": "RectangleContains",
        "trans": [
            "【RectangleContains】Optimized implementation of the contains spatial predicate for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "Optimized",
        "trans": [
            "RectangleContains【Optimized】implementation of the contains spatial predicate for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "implementation",
        "trans": [
            "RectangleContains Optimized【implementation】of the contains spatial predicate for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RectangleContains Optimized implementation【of】the contains spatial predicate for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RectangleContains Optimized implementation of【the】contains spatial predicate for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "contains",
        "trans": [
            "RectangleContains Optimized implementation of the【contains】spatial predicate for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "RectangleContains Optimized implementation of the contains【spatial】predicate for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "predicate",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial【predicate】for cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "for",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate【for】cases where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "cases",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for【cases】where the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "where",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for cases【where】the first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for cases where【the】first Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "first",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for cases where the【first】Geometry is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for cases where the first【Geometry】is a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "is",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for cases where the first Geometry【is】a rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for cases where the first Geometry is【a】rectangle.",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "rectangle.",
        "trans": [
            "RectangleContains Optimized implementation of the contains spatial predicate for cases where the first Geometry is a【rectangle.】",
            "　　　优化的实现包含空间谓词"
        ]
    },
    {
        "name": "RectangleIntersects",
        "trans": [
            "【RectangleIntersects】Implementation of the intersects spatial predicate optimized for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "Implementation",
        "trans": [
            "RectangleIntersects【Implementation】of the intersects spatial predicate optimized for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RectangleIntersects Implementation【of】the intersects spatial predicate optimized for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RectangleIntersects Implementation of【the】intersects spatial predicate optimized for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "intersects",
        "trans": [
            "RectangleIntersects Implementation of the【intersects】spatial predicate optimized for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "RectangleIntersects Implementation of the intersects【spatial】predicate optimized for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "predicate",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial【predicate】optimized for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "optimized",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate【optimized】for the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "for",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized【for】the case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for【the】case where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "case",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for the【case】where one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "where",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for the case【where】one Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "one",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for the case where【one】Geometry is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for the case where one【Geometry】is a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "is",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for the case where one Geometry【is】a rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for the case where one Geometry is【a】rectangle.",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "rectangle.",
        "trans": [
            "RectangleIntersects Implementation of the intersects spatial predicate optimized for the case where one Geometry is a【rectangle.】",
            "　　　实施相交空间谓词"
        ]
    },
    {
        "name": "Area",
        "trans": [
            "【Area】Functions for computing area.",
            "　　　计算区域的功能。"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "Area【Functions】for computing area.",
            "　　　计算区域的功能。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Area Functions【for】computing area.",
            "　　　计算区域的功能。"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "Area Functions for【computing】area.",
            "　　　计算区域的功能。"
        ]
    },
    {
        "name": "area.",
        "trans": [
            "Area Functions for computing【area.】",
            "　　　计算区域的功能。"
        ]
    },
    {
        "name": "BoundaryNodeRule.EndPointBoundaryNodeRule",
        "trans": [
            "【BoundaryNodeRule.EndPointBoundaryNodeRule】A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "A",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule【A】BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A【BoundaryNodeRule】which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "which",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule【which】specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "specifies",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which【specifies】that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "that",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies【that】any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "any",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that【any】points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "points",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any【points】which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "which",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points【which】are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "are",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which【are】endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "endpoints",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are【endpoints】of lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints【of】lineal components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "lineal",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of【lineal】components are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "components",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal【components】are in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "are",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components【are】in the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "in",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are【in】the boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in【the】boundary of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the【boundary】of the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary【of】the parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of【the】parent geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "parent",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the【parent】geometry.",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent【geometry.】",
            "　　　一个BoundaryNodeRule端点指定任何点"
        ]
    },
    {
        "name": "BoundaryNodeRule.Mod2BoundaryNodeRule",
        "trans": [
            "【BoundaryNodeRule.Mod2BoundaryNodeRule】A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "A",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule【A】BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A【BoundaryNodeRule】specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "specifies",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule【specifies】that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "that",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies【that】points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "points",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that【points】are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "are",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points【are】in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "in",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are【in】the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in【the】boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the【boundary】of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary【of】a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of【a】lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "lineal",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a【lineal】geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal【geometry】iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "iff",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry【iff】the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff【the】point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "point",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the【point】lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "lies",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point【lies】on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "on",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies【on】the boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on【the】boundary of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the【boundary】of an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary【of】an odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "an",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of【an】odd number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "odd",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an【odd】number of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "number",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd【number】of components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number【of】components.",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "components.",
        "trans": [
            "BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of【components.】",
            "　　　BoundaryNodeRule指定点的"
        ]
    },
    {
        "name": "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule",
        "trans": [
            "【BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule】A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "A",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule【A】BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A【BoundaryNodeRule】which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "which",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule【which】determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "determines",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which【determines】that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "that",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines【that】only endpoints with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "only",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that【only】endpoints with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "endpoints",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only【endpoints】with valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "with",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints【with】valency of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "valency",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with【valency】of exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency【of】exactly 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "exactly",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of【exactly】1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "1",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly【1】are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "are",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1【are】on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "on",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are【on】the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on【the】boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "boundary.",
        "trans": [
            "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the【boundary.】",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule",
        "trans": [
            "【BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule】A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "A",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule【A】BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A【BoundaryNodeRule】which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "which",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule【which】determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "determines",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which【determines】that only endpoints with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "that",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines【that】only endpoints with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "only",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that【only】endpoints with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "endpoints",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only【endpoints】with valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "with",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints【with】valency greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "valency",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with【valency】greater than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "greater",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency【greater】than 1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "than",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater【than】1 are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "1",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than【1】are on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "are",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1【are】on the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "on",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are【on】the boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on【the】boundary.",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "boundary.",
        "trans": [
            "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the【boundary.】",
            "　　　一个决定,只有BoundaryNodeRule"
        ]
    },
    {
        "name": "Centroid",
        "trans": [
            "【Centroid】Computes the centroid of a Geometry of any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "Centroid【Computes】the centroid of a Geometry of any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Centroid Computes【the】centroid of a Geometry of any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "centroid",
        "trans": [
            "Centroid Computes the【centroid】of a Geometry of any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Centroid Computes the centroid【of】a Geometry of any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Centroid Computes the centroid of【a】Geometry of any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Centroid Computes the centroid of a【Geometry】of any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Centroid Computes the centroid of a Geometry【of】any dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "any",
        "trans": [
            "Centroid Computes the centroid of a Geometry of【any】dimension.",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "dimension.",
        "trans": [
            "Centroid Computes the centroid of a Geometry of any【dimension.】",
            "　　　计算的几何尺寸的重心。"
        ]
    },
    {
        "name": "CGAlgorithms",
        "trans": [
            "【CGAlgorithms】Deprecated See Length, Area, Distance, Orientation, PointLocation",
            "　　　弃用"
        ]
    },
    {
        "name": "Deprecated",
        "trans": [
            "CGAlgorithms【Deprecated】See Length, Area, Distance, Orientation, PointLocation",
            "　　　弃用"
        ]
    },
    {
        "name": "See",
        "trans": [
            "CGAlgorithms Deprecated【See】Length, Area, Distance, Orientation, PointLocation",
            "　　　弃用"
        ]
    },
    {
        "name": "Length,",
        "trans": [
            "CGAlgorithms Deprecated See【Length,】Area, Distance, Orientation, PointLocation",
            "　　　弃用"
        ]
    },
    {
        "name": "Area,",
        "trans": [
            "CGAlgorithms Deprecated See Length,【Area,】Distance, Orientation, PointLocation",
            "　　　弃用"
        ]
    },
    {
        "name": "Distance,",
        "trans": [
            "CGAlgorithms Deprecated See Length, Area,【Distance,】Orientation, PointLocation",
            "　　　弃用"
        ]
    },
    {
        "name": "Orientation,",
        "trans": [
            "CGAlgorithms Deprecated See Length, Area, Distance,【Orientation,】PointLocation",
            "　　　弃用"
        ]
    },
    {
        "name": "PointLocation",
        "trans": [
            "CGAlgorithms Deprecated See Length, Area, Distance, Orientation,【PointLocation】",
            "　　　弃用"
        ]
    },
    {
        "name": "CGAlgorithms3D",
        "trans": [
            "【CGAlgorithms3D】Basic computational geometry algorithms for geometry and coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "Basic",
        "trans": [
            "CGAlgorithms3D【Basic】computational geometry algorithms for geometry and coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "computational",
        "trans": [
            "CGAlgorithms3D Basic【computational】geometry algorithms for geometry and coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "CGAlgorithms3D Basic computational【geometry】algorithms for geometry and coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "algorithms",
        "trans": [
            "CGAlgorithms3D Basic computational geometry【algorithms】for geometry and coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms【for】geometry and coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for【geometry】and coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "and",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for geometry【and】coordinates defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for geometry and【coordinates】defined in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for geometry and coordinates【defined】in 3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for geometry and coordinates defined【in】3-dimensional Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "3-dimensional",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for geometry and coordinates defined in【3-dimensional】Cartesian space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for geometry and coordinates defined in 3-dimensional【Cartesian】space.",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "space.",
        "trans": [
            "CGAlgorithms3D Basic computational geometry algorithms for geometry and coordinates defined in 3-dimensional Cartesian【space.】",
            "　　　基本的计算几何算法"
        ]
    },
    {
        "name": "RelateComputer",
        "trans": [
            "【RelateComputer】Computes the topological relationship between two Geometries.",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "RelateComputer【Computes】the topological relationship between two Geometries.",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RelateComputer Computes【the】topological relationship between two Geometries.",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "RelateComputer Computes the【topological】relationship between two Geometries.",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "relationship",
        "trans": [
            "RelateComputer Computes the topological【relationship】between two Geometries.",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "RelateComputer Computes the topological relationship【between】two Geometries.",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "RelateComputer Computes the topological relationship between【two】Geometries.",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "Geometries.",
        "trans": [
            "RelateComputer Computes the topological relationship between two【Geometries.】",
            "　　　计算两个图形之间的拓扑关系。"
        ]
    },
    {
        "name": "RelateNode",
        "trans": [
            "【RelateNode】Represents a node in the topological graph used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "RelateNode【Represents】a node in the topological graph used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RelateNode Represents【a】node in the topological graph used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "RelateNode Represents a【node】in the topological graph used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "RelateNode Represents a node【in】the topological graph used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RelateNode Represents a node in【the】topological graph used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "RelateNode Represents a node in the【topological】graph used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "RelateNode Represents a node in the topological【graph】used to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "used",
        "trans": [
            "RelateNode Represents a node in the topological graph【used】to compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "RelateNode Represents a node in the topological graph used【to】compute spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "RelateNode Represents a node in the topological graph used to【compute】spatial relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "RelateNode Represents a node in the topological graph used to compute【spatial】relationships.",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "relationships.",
        "trans": [
            "RelateNode Represents a node in the topological graph used to compute spatial【relationships.】",
            "　　　代表一个节点的拓扑图形用于计算空间关系。"
        ]
    },
    {
        "name": "RelateNodeFactory",
        "trans": [
            "【RelateNodeFactory】Used by the NodeMap in a RelateNodeGraph to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "Used",
        "trans": [
            "RelateNodeFactory【Used】by the NodeMap in a RelateNodeGraph to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "RelateNodeFactory Used【by】the NodeMap in a RelateNodeGraph to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RelateNodeFactory Used by【the】NodeMap in a RelateNodeGraph to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "NodeMap",
        "trans": [
            "RelateNodeFactory Used by the【NodeMap】in a RelateNodeGraph to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "RelateNodeFactory Used by the NodeMap【in】a RelateNodeGraph to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RelateNodeFactory Used by the NodeMap in【a】RelateNodeGraph to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "RelateNodeGraph",
        "trans": [
            "RelateNodeFactory Used by the NodeMap in a【RelateNodeGraph】to create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "RelateNodeFactory Used by the NodeMap in a RelateNodeGraph【to】create RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "create",
        "trans": [
            "RelateNodeFactory Used by the NodeMap in a RelateNodeGraph to【create】RelateNodes.",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "RelateNodes.",
        "trans": [
            "RelateNodeFactory Used by the NodeMap in a RelateNodeGraph to create【RelateNodes.】",
            "　　　使用的RelateNodeGraph创建RelateNodes NodeMap。"
        ]
    },
    {
        "name": "RelateNodeGraph",
        "trans": [
            "【RelateNodeGraph】Implements the simple graph of Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "RelateNodeGraph【Implements】the simple graph of Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RelateNodeGraph Implements【the】simple graph of Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "simple",
        "trans": [
            "RelateNodeGraph Implements the【simple】graph of Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "RelateNodeGraph Implements the simple【graph】of Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RelateNodeGraph Implements the simple graph【of】Nodes and EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "Nodes",
        "trans": [
            "RelateNodeGraph Implements the simple graph of【Nodes】and EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "and",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes【and】EdgeEnd which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "EdgeEnd",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and【EdgeEnd】which is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "which",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd【which】is all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "is",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which【is】all that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "all",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is【all】that is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "that",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all【that】is required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "is",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that【is】required to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "required",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is【required】to determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "to",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required【to】determine topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "determine",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required to【determine】topological relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required to determine【topological】relationships between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "relationships",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required to determine topological【relationships】between Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "between",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required to determine topological relationships【between】Geometries.",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "Geometries.",
        "trans": [
            "RelateNodeGraph Implements the simple graph of Nodes and EdgeEnd which is all that is required to determine topological relationships between【Geometries.】",
            "　　　实现了简单图的节点和EdgeEnd所有"
        ]
    },
    {
        "name": "RelateOp",
        "trans": [
            "【RelateOp】Implements the SFS relate() generalized spatial predicate on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "RelateOp【Implements】the SFS relate() generalized spatial predicate on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RelateOp Implements【the】SFS relate() generalized spatial predicate on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "SFS",
        "trans": [
            "RelateOp Implements the【SFS】relate() generalized spatial predicate on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "relate()",
        "trans": [
            "RelateOp Implements the SFS【relate()】generalized spatial predicate on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "generalized",
        "trans": [
            "RelateOp Implements the SFS relate()【generalized】spatial predicate on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "RelateOp Implements the SFS relate() generalized【spatial】predicate on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "predicate",
        "trans": [
            "RelateOp Implements the SFS relate() generalized spatial【predicate】on two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "RelateOp Implements the SFS relate() generalized spatial predicate【on】two Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "RelateOp Implements the SFS relate() generalized spatial predicate on【two】Geometrys.",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "Geometrys.",
        "trans": [
            "RelateOp Implements the SFS relate() generalized spatial predicate on two【Geometrys.】",
            "　　　实现了SFS()上的广义空间谓词两个几何联系起来。"
        ]
    },
    {
        "name": "HoleAssigner",
        "trans": [
            "【HoleAssigner】Assigns hole rings to shell rings during polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "Assigns",
        "trans": [
            "HoleAssigner【Assigns】hole rings to shell rings during polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "hole",
        "trans": [
            "HoleAssigner Assigns【hole】rings to shell rings during polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "rings",
        "trans": [
            "HoleAssigner Assigns hole【rings】to shell rings during polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "to",
        "trans": [
            "HoleAssigner Assigns hole rings【to】shell rings during polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "shell",
        "trans": [
            "HoleAssigner Assigns hole rings to【shell】rings during polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "rings",
        "trans": [
            "HoleAssigner Assigns hole rings to shell【rings】during polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "during",
        "trans": [
            "HoleAssigner Assigns hole rings to shell rings【during】polygonization.",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "polygonization.",
        "trans": [
            "HoleAssigner Assigns hole rings to shell rings during【polygonization.】",
            "　　　分配孔环壳环"
        ]
    },
    {
        "name": "Polygonizer",
        "trans": [
            "【Polygonizer】Polygonizes a set of Geometrys which contain linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "Polygonizes",
        "trans": [
            "Polygonizer【Polygonizes】a set of Geometrys which contain linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Polygonizer Polygonizes【a】set of Geometrys which contain linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "set",
        "trans": [
            "Polygonizer Polygonizes a【set】of Geometrys which contain linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Polygonizer Polygonizes a set【of】Geometrys which contain linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "Polygonizer Polygonizes a set of【Geometrys】which contain linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys【which】contain linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "contain",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which【contain】linework that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "linework",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain【linework】that represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "that",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework【that】represents the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "represents",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework that【represents】the edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework that represents【the】edges of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework that represents the【edges】of a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework that represents the edges【of】a planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework that represents the edges of【a】planar graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework that represents the edges of a【planar】graph.",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "graph.",
        "trans": [
            "Polygonizer Polygonizes a set of Geometrys which contain linework that represents the edges of a planar【graph.】",
            "　　　Polygonizes一组几何包含划线"
        ]
    },
    {
        "name": "CGAlgorithmsDD",
        "trans": [
            "【CGAlgorithmsDD】Implements basic computational geometry algorithms using DD arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "CGAlgorithmsDD【Implements】basic computational geometry algorithms using DD arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "basic",
        "trans": [
            "CGAlgorithmsDD Implements【basic】computational geometry algorithms using DD arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "computational",
        "trans": [
            "CGAlgorithmsDD Implements basic【computational】geometry algorithms using DD arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "CGAlgorithmsDD Implements basic computational【geometry】algorithms using DD arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "algorithms",
        "trans": [
            "CGAlgorithmsDD Implements basic computational geometry【algorithms】using DD arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "using",
        "trans": [
            "CGAlgorithmsDD Implements basic computational geometry algorithms【using】DD arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "CGAlgorithmsDD Implements basic computational geometry algorithms using【DD】arithmetic.",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "arithmetic.",
        "trans": [
            "CGAlgorithmsDD Implements basic computational geometry algorithms using DD【arithmetic.】",
            "　　　使用DD算法实现了基本的计算几何算法。"
        ]
    },
    {
        "name": "ConvexHull",
        "trans": [
            "【ConvexHull】Computes the convex hull of a Geometry.",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "ConvexHull【Computes】the convex hull of a Geometry.",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ConvexHull Computes【the】convex hull of a Geometry.",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "convex",
        "trans": [
            "ConvexHull Computes the【convex】hull of a Geometry.",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "hull",
        "trans": [
            "ConvexHull Computes the convex【hull】of a Geometry.",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ConvexHull Computes the convex hull【of】a Geometry.",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConvexHull Computes the convex hull of【a】Geometry.",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "ConvexHull Computes the convex hull of a【Geometry.】",
            "　　　计算一个几何图形的凸包。"
        ]
    },
    {
        "name": "Distance",
        "trans": [
            "【Distance】Functions to compute distance between basic geometric structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "Distance【Functions】to compute distance between basic geometric structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Distance Functions【to】compute distance between basic geometric structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "Distance Functions to【compute】distance between basic geometric structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "Distance Functions to compute【distance】between basic geometric structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "Distance Functions to compute distance【between】basic geometric structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "basic",
        "trans": [
            "Distance Functions to compute distance between【basic】geometric structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "Distance Functions to compute distance between basic【geometric】structures.",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "structures.",
        "trans": [
            "Distance Functions to compute distance between basic geometric【structures.】",
            "　　　函数来计算基本几何结构之间的距离。"
        ]
    },
    {
        "name": "HCoordinate",
        "trans": [
            "【HCoordinate】Represents a homogeneous coordinate in a 2-D coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "HCoordinate【Represents】a homogeneous coordinate in a 2-D coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "HCoordinate Represents【a】homogeneous coordinate in a 2-D coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "homogeneous",
        "trans": [
            "HCoordinate Represents a【homogeneous】coordinate in a 2-D coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "HCoordinate Represents a homogeneous【coordinate】in a 2-D coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "HCoordinate Represents a homogeneous coordinate【in】a 2-D coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "HCoordinate Represents a homogeneous coordinate in【a】2-D coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "2-D",
        "trans": [
            "HCoordinate Represents a homogeneous coordinate in a【2-D】coordinate space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "HCoordinate Represents a homogeneous coordinate in a 2-D【coordinate】space.",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "space.",
        "trans": [
            "HCoordinate Represents a homogeneous coordinate in a 2-D coordinate【space.】",
            "　　　代表一个齐次坐标在一个二维坐标空间。"
        ]
    },
    {
        "name": "InteriorPoint",
        "trans": [
            "【InteriorPoint】Computes an interior point of a Geometry.",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "InteriorPoint【Computes】an interior point of a Geometry.",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "InteriorPoint Computes【an】interior point of a Geometry.",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "interior",
        "trans": [
            "InteriorPoint Computes an【interior】point of a Geometry.",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "InteriorPoint Computes an interior【point】of a Geometry.",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "InteriorPoint Computes an interior point【of】a Geometry.",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "InteriorPoint Computes an interior point of【a】Geometry.",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "InteriorPoint Computes an interior point of a【Geometry.】",
            "　　　计算几何的一个内点。"
        ]
    },
    {
        "name": "InteriorPointArea",
        "trans": [
            "【InteriorPointArea】Computes a point in the interior of an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "InteriorPointArea【Computes】a point in the interior of an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "InteriorPointArea Computes【a】point in the interior of an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "InteriorPointArea Computes a【point】in the interior of an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "InteriorPointArea Computes a point【in】the interior of an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "InteriorPointArea Computes a point in【the】interior of an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "interior",
        "trans": [
            "InteriorPointArea Computes a point in the【interior】of an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "InteriorPointArea Computes a point in the interior【of】an areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "InteriorPointArea Computes a point in the interior of【an】areal geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "areal",
        "trans": [
            "InteriorPointArea Computes a point in the interior of an【areal】geometry.",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "InteriorPointArea Computes a point in the interior of an areal【geometry.】",
            "　　　计算一个点的室内区域几何。"
        ]
    },
    {
        "name": "InteriorPointLine",
        "trans": [
            "【InteriorPointLine】Computes a point in the interior of an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "InteriorPointLine【Computes】a point in the interior of an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "InteriorPointLine Computes【a】point in the interior of an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "InteriorPointLine Computes a【point】in the interior of an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "InteriorPointLine Computes a point【in】the interior of an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "InteriorPointLine Computes a point in【the】interior of an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "interior",
        "trans": [
            "InteriorPointLine Computes a point in the【interior】of an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "InteriorPointLine Computes a point in the interior【of】an linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "InteriorPointLine Computes a point in the interior of【an】linear geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "InteriorPointLine Computes a point in the interior of an【linear】geometry.",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "InteriorPointLine Computes a point in the interior of an linear【geometry.】",
            "　　　计算一个点的室内线性几何。"
        ]
    },
    {
        "name": "InteriorPointPoint",
        "trans": [
            "【InteriorPointPoint】Computes a point in the interior of an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "InteriorPointPoint【Computes】a point in the interior of an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "InteriorPointPoint Computes【a】point in the interior of an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "InteriorPointPoint Computes a【point】in the interior of an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "InteriorPointPoint Computes a point【in】the interior of an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "InteriorPointPoint Computes a point in【the】interior of an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "interior",
        "trans": [
            "InteriorPointPoint Computes a point in the【interior】of an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "InteriorPointPoint Computes a point in the interior【of】an point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "InteriorPointPoint Computes a point in the interior of【an】point geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "InteriorPointPoint Computes a point in the interior of an【point】geometry.",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "InteriorPointPoint Computes a point in the interior of an point【geometry.】",
            "　　　计算内部的一个点一个点几何。"
        ]
    },
    {
        "name": "Intersection",
        "trans": [
            "【Intersection】Contains functions to compute intersections between lines.",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "Intersection【Contains】functions to compute intersections between lines.",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "Intersection Contains【functions】to compute intersections between lines.",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Intersection Contains functions【to】compute intersections between lines.",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "Intersection Contains functions to【compute】intersections between lines.",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "Intersection Contains functions to compute【intersections】between lines.",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "Intersection Contains functions to compute intersections【between】lines.",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "lines.",
        "trans": [
            "Intersection Contains functions to compute intersections between【lines.】",
            "　　　包含函数来计算交叉口之间的线。"
        ]
    },
    {
        "name": "Length",
        "trans": [
            "【Length】Functions for computing length.",
            "　　　函数计算长度。"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "Length【Functions】for computing length.",
            "　　　函数计算长度。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Length Functions【for】computing length.",
            "　　　函数计算长度。"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "Length Functions for【computing】length.",
            "　　　函数计算长度。"
        ]
    },
    {
        "name": "length.",
        "trans": [
            "Length Functions for computing【length.】",
            "　　　函数计算长度。"
        ]
    },
    {
        "name": "LineIntersector",
        "trans": [
            "【LineIntersector】A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "A",
        "trans": [
            "LineIntersector【A】LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "LineIntersector",
        "trans": [
            "LineIntersector A【LineIntersector】is an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "is",
        "trans": [
            "LineIntersector A LineIntersector【is】an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "an",
        "trans": [
            "LineIntersector A LineIntersector is【an】algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "algorithm",
        "trans": [
            "LineIntersector A LineIntersector is an【algorithm】that can both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "that",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm【that】can both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "can",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that【can】both test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "both",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can【both】test whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "test",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both【test】whether two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test【whether】two line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "two",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether【two】line segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "line",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two【line】segments intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line【segments】intersect and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments【intersect】and compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "and",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect【and】compute the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and【compute】the intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute【the】intersection point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the【intersection】point(s) if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "point(s)",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection【point(s)】if they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "if",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection point(s)【if】they do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "they",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if【they】do.",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "do.",
        "trans": [
            "LineIntersector A LineIntersector is an algorithm that can both test whether two line segments intersect and compute the intersection point(s) if they【do.】",
            "　　　LineIntersector是一种算法,既能测试是否"
        ]
    },
    {
        "name": "MinimumBoundingCircle",
        "trans": [
            "【MinimumBoundingCircle】Computes the Minimum Bounding Circle (MBC) for the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "MinimumBoundingCircle【Computes】the Minimum Bounding Circle (MBC) for the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MinimumBoundingCircle Computes【the】Minimum Bounding Circle (MBC) for the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "Minimum",
        "trans": [
            "MinimumBoundingCircle Computes the【Minimum】Bounding Circle (MBC) for the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "Bounding",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum【Bounding】Circle (MBC) for the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "Circle",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding【Circle】(MBC) for the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "(MBC)",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding Circle【(MBC)】for the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC)【for】the points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC) for【the】points in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "points",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC) for the【points】in a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "in",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC) for the points【in】a Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC) for the points in【a】Geometry.",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "MinimumBoundingCircle Computes the Minimum Bounding Circle (MBC) for the points in a【Geometry.】",
            "　　　计算最小边界圆(MBC)"
        ]
    },
    {
        "name": "MinimumDiameter",
        "trans": [
            "【MinimumDiameter】Computes the minimum diameter of a Geometry.",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "MinimumDiameter【Computes】the minimum diameter of a Geometry.",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MinimumDiameter Computes【the】minimum diameter of a Geometry.",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "minimum",
        "trans": [
            "MinimumDiameter Computes the【minimum】diameter of a Geometry.",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "diameter",
        "trans": [
            "MinimumDiameter Computes the minimum【diameter】of a Geometry.",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MinimumDiameter Computes the minimum diameter【of】a Geometry.",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MinimumDiameter Computes the minimum diameter of【a】Geometry.",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "MinimumDiameter Computes the minimum diameter of a【Geometry.】",
            "　　　计算几何的最小直径。"
        ]
    },
    {
        "name": "CoverageUnion",
        "trans": [
            "【CoverageUnion】Unions a valid coverage of polygons or lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "Unions",
        "trans": [
            "CoverageUnion【Unions】a valid coverage of polygons or lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoverageUnion Unions【a】valid coverage of polygons or lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "valid",
        "trans": [
            "CoverageUnion Unions a【valid】coverage of polygons or lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "coverage",
        "trans": [
            "CoverageUnion Unions a valid【coverage】of polygons or lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoverageUnion Unions a valid coverage【of】polygons or lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "polygons",
        "trans": [
            "CoverageUnion Unions a valid coverage of【polygons】or lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "or",
        "trans": [
            "CoverageUnion Unions a valid coverage of polygons【or】lines in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "lines",
        "trans": [
            "CoverageUnion Unions a valid coverage of polygons or【lines】in an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoverageUnion Unions a valid coverage of polygons or lines【in】an efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "an",
        "trans": [
            "CoverageUnion Unions a valid coverage of polygons or lines in【an】efficient way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "efficient",
        "trans": [
            "CoverageUnion Unions a valid coverage of polygons or lines in an【efficient】way.",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "way.",
        "trans": [
            "CoverageUnion Unions a valid coverage of polygons or lines in an efficient【way.】",
            "　　　工会一个有效的多边形或线条的报道"
        ]
    },
    {
        "name": "FastOverlayFilter",
        "trans": [
            "【FastOverlayFilter】",
            "　　　FastOverlayFilter"
        ]
    },
    {
        "name": "LineLimiter",
        "trans": [
            "【LineLimiter】Limits the segments in a list of segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "Limits",
        "trans": [
            "LineLimiter【Limits】the segments in a list of segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineLimiter Limits【the】segments in a list of segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "LineLimiter Limits the【segments】in a list of segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "in",
        "trans": [
            "LineLimiter Limits the segments【in】a list of segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineLimiter Limits the segments in【a】list of segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "list",
        "trans": [
            "LineLimiter Limits the segments in a【list】of segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineLimiter Limits the segments in a list【of】segments to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "LineLimiter Limits the segments in a list of【segments】to those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "to",
        "trans": [
            "LineLimiter Limits the segments in a list of segments【to】those which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "those",
        "trans": [
            "LineLimiter Limits the segments in a list of segments to【those】which intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "which",
        "trans": [
            "LineLimiter Limits the segments in a list of segments to those【which】intersect an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "LineLimiter Limits the segments in a list of segments to those which【intersect】an envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "an",
        "trans": [
            "LineLimiter Limits the segments in a list of segments to those which intersect【an】envelope.",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "envelope.",
        "trans": [
            "LineLimiter Limits the segments in a list of segments to those which intersect an【envelope.】",
            "　　　限制了部分列表的部分"
        ]
    },
    {
        "name": "OverlayNG",
        "trans": [
            "【OverlayNG】Computes the geometric overlay of two Geometrys, using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "OverlayNG【Computes】the geometric overlay of two Geometrys, using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OverlayNG Computes【the】geometric overlay of two Geometrys, using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "OverlayNG Computes the【geometric】overlay of two Geometrys, using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "OverlayNG Computes the geometric【overlay】of two Geometrys, using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OverlayNG Computes the geometric overlay【of】two Geometrys, using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "OverlayNG Computes the geometric overlay of【two】Geometrys, using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "Geometrys,",
        "trans": [
            "OverlayNG Computes the geometric overlay of two【Geometrys,】using an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys,【using】an explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using【an】explicit precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "explicit",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using an【explicit】precision model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using an explicit【precision】model to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "model",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using an explicit precision【model】to allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using an explicit precision model【to】allow robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "allow",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using an explicit precision model to【allow】robust computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "robust",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using an explicit precision model to allow【robust】computation.",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "computation.",
        "trans": [
            "OverlayNG Computes the geometric overlay of two Geometrys, using an explicit precision model to allow robust【computation.】",
            "　　　计算的几何叠加两个几何,"
        ]
    },
    {
        "name": "OverlayNGRobust",
        "trans": [
            "【OverlayNGRobust】Performs an overlay operation using OverlayNG, providing full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "Performs",
        "trans": [
            "OverlayNGRobust【Performs】an overlay operation using OverlayNG, providing full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "OverlayNGRobust Performs【an】overlay operation using OverlayNG, providing full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "OverlayNGRobust Performs an【overlay】operation using OverlayNG, providing full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "OverlayNGRobust Performs an overlay【operation】using OverlayNG, providing full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "OverlayNGRobust Performs an overlay operation【using】OverlayNG, providing full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "OverlayNG,",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using【OverlayNG,】providing full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "providing",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG,【providing】full robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "full",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing【full】robustness by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "robustness",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full【robustness】by using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "by",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness【by】using a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by【using】a series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using【a】series of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "series",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a【series】of increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a series【of】increasingly robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "increasingly",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a series of【increasingly】robust (but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "robust",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a series of increasingly【robust】(but slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "(but",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a series of increasingly robust【(but】slower) noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "slower)",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a series of increasingly robust (but【slower)】noding strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "noding",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a series of increasingly robust (but slower)【noding】strategies.",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "strategies.",
        "trans": [
            "OverlayNGRobust Performs an overlay operation using OverlayNG, providing full robustness by using a series of increasingly robust (but slower) noding【strategies.】",
            "　　　使用OverlayNG执行覆盖操作,"
        ]
    },
    {
        "name": "NoninvertibleTransformationException",
        "trans": [
            "【NoninvertibleTransformationException】Indicates that an AffineTransformation is non-invertible.",
            "　　　表明一个AffineTransformation"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "NoninvertibleTransformationException【Indicates】that an AffineTransformation is non-invertible.",
            "　　　表明一个AffineTransformation"
        ]
    },
    {
        "name": "that",
        "trans": [
            "NoninvertibleTransformationException Indicates【that】an AffineTransformation is non-invertible.",
            "　　　表明一个AffineTransformation"
        ]
    },
    {
        "name": "an",
        "trans": [
            "NoninvertibleTransformationException Indicates that【an】AffineTransformation is non-invertible.",
            "　　　表明一个AffineTransformation"
        ]
    },
    {
        "name": "AffineTransformation",
        "trans": [
            "NoninvertibleTransformationException Indicates that an【AffineTransformation】is non-invertible.",
            "　　　表明一个AffineTransformation"
        ]
    },
    {
        "name": "is",
        "trans": [
            "NoninvertibleTransformationException Indicates that an AffineTransformation【is】non-invertible.",
            "　　　表明一个AffineTransformation"
        ]
    },
    {
        "name": "non-invertible.",
        "trans": [
            "NoninvertibleTransformationException Indicates that an AffineTransformation is【non-invertible.】",
            "　　　表明一个AffineTransformation"
        ]
    },
    {
        "name": "ConstraintSplitPointFinder",
        "trans": [
            "【ConstraintSplitPointFinder】An interface for strategies for determining the location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "ConstraintSplitPointFinder【An】interface for strategies for determining the location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "ConstraintSplitPointFinder An【interface】for strategies for determining the location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ConstraintSplitPointFinder An interface【for】strategies for determining the location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "strategies",
        "trans": [
            "ConstraintSplitPointFinder An interface for【strategies】for determining the location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies【for】determining the location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "determining",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for【determining】the location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining【the】location of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "location",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining the【location】of split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining the location【of】split points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "split",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining the location of【split】points on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining the location of split【points】on constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining the location of split points【on】constraint segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "constraint",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining the location of split points on【constraint】segments.",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "ConstraintSplitPointFinder An interface for strategies for determining the location of split points on constraint【segments.】",
            "　　　一个接口策略确定分割点的位置在约束段。"
        ]
    },
    {
        "name": "ConstraintVertexFactory",
        "trans": [
            "【ConstraintVertexFactory】An interface for factories which create a ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "An",
        "trans": [
            "ConstraintVertexFactory【An】interface for factories which create a ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "ConstraintVertexFactory An【interface】for factories which create a ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ConstraintVertexFactory An interface【for】factories which create a ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "factories",
        "trans": [
            "ConstraintVertexFactory An interface for【factories】which create a ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "which",
        "trans": [
            "ConstraintVertexFactory An interface for factories【which】create a ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "create",
        "trans": [
            "ConstraintVertexFactory An interface for factories which【create】a ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConstraintVertexFactory An interface for factories which create【a】ConstraintVertex",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "ConstraintVertex",
        "trans": [
            "ConstraintVertexFactory An interface for factories which create a【ConstraintVertex】",
            "　　　一个接口,用于创建一个ConstraintVertex工厂"
        ]
    },
    {
        "name": "ConformingDelaunayTriangulationBuilder",
        "trans": [
            "【ConformingDelaunayTriangulationBuilder】A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ConformingDelaunayTriangulationBuilder【A】utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A【utility】class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "class",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility【class】which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "which",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class【which】creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "creates",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which【creates】Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "Conforming",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates【Conforming】Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "Delaunay",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming【Delaunay】Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "Triangulations",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay【Triangulations】from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "from",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations【from】collections of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "collections",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from【collections】of points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections【of】points and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "points",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of【points】and linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "and",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points【and】linear constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and【linear】constraints, and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "constraints,",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear【constraints,】and extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "and",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints,【and】extract the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "extract",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and【extract】the resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract【the】resulting triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "resulting",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the【resulting】triangulation edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "triangulation",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting【triangulation】edges or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation【edges】or triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "or",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges【or】triangles as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "triangles",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or【triangles】as geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "as",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles【as】geometries.",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "ConformingDelaunayTriangulationBuilder A utility class which creates Conforming Delaunay Triangulations from collections of points and linear constraints, and extract the resulting triangulation edges or triangles as【geometries.】",
            "　　　一个实用程序类,创建符合德劳内三角剖"
        ]
    },
    {
        "name": "Ordinate",
        "trans": [
            "【Ordinate】An enumeration of possible Well-Known-Text or Well-Known-Binary ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "Ordinate【An】enumeration of possible Well-Known-Text or Well-Known-Binary ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "enumeration",
        "trans": [
            "Ordinate An【enumeration】of possible Well-Known-Text or Well-Known-Binary ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Ordinate An enumeration【of】possible Well-Known-Text or Well-Known-Binary ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "possible",
        "trans": [
            "Ordinate An enumeration of【possible】Well-Known-Text or Well-Known-Binary ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "Well-Known-Text",
        "trans": [
            "Ordinate An enumeration of possible【Well-Known-Text】or Well-Known-Binary ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "or",
        "trans": [
            "Ordinate An enumeration of possible Well-Known-Text【or】Well-Known-Binary ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "Well-Known-Binary",
        "trans": [
            "Ordinate An enumeration of possible Well-Known-Text or【Well-Known-Binary】ordinates.",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "ordinates.",
        "trans": [
            "Ordinate An enumeration of possible Well-Known-Text or Well-Known-Binary【ordinates.】",
            "　　　枚举可能Well-Known-Text或Well-Known-Binary纵坐标。"
        ]
    },
    {
        "name": "ParseException",
        "trans": [
            "【ParseException】Thrown by a WKTReader when a parsing problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "Thrown",
        "trans": [
            "ParseException【Thrown】by a WKTReader when a parsing problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "ParseException Thrown【by】a WKTReader when a parsing problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ParseException Thrown by【a】WKTReader when a parsing problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "WKTReader",
        "trans": [
            "ParseException Thrown by a【WKTReader】when a parsing problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "when",
        "trans": [
            "ParseException Thrown by a WKTReader【when】a parsing problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ParseException Thrown by a WKTReader when【a】parsing problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "parsing",
        "trans": [
            "ParseException Thrown by a WKTReader when a【parsing】problem occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "problem",
        "trans": [
            "ParseException Thrown by a WKTReader when a parsing【problem】occurs.",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "occurs.",
        "trans": [
            "ParseException Thrown by a WKTReader when a parsing problem【occurs.】",
            "　　　抛出一个WKTReader当解析问题发生。"
        ]
    },
    {
        "name": "Orientation",
        "trans": [
            "【Orientation】Functions to compute the orientation of basic geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "Orientation【Functions】to compute the orientation of basic geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Orientation Functions【to】compute the orientation of basic geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "Orientation Functions to【compute】the orientation of basic geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Orientation Functions to compute【the】orientation of basic geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "Orientation Functions to compute the【orientation】of basic geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Orientation Functions to compute the orientation【of】basic geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "basic",
        "trans": [
            "Orientation Functions to compute the orientation of【basic】geometric structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "Orientation Functions to compute the orientation of basic【geometric】structures including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "structures",
        "trans": [
            "Orientation Functions to compute the orientation of basic geometric【structures】including point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "including",
        "trans": [
            "Orientation Functions to compute the orientation of basic geometric structures【including】point triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "point",
        "trans": [
            "Orientation Functions to compute the orientation of basic geometric structures including【point】triplets (triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "triplets",
        "trans": [
            "Orientation Functions to compute the orientation of basic geometric structures including point【triplets】(triangles) and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "(triangles)",
        "trans": [
            "Orientation Functions to compute the orientation of basic geometric structures including point triplets【(triangles)】and rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Orientation Functions to compute the orientation of basic geometric structures including point triplets (triangles)【and】rings.",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "rings.",
        "trans": [
            "Orientation Functions to compute the orientation of basic geometric structures including point triplets (triangles) and【rings.】",
            "　　　函数来计算基本几何结构的取向"
        ]
    },
    {
        "name": "PointLocation",
        "trans": [
            "【PointLocation】Functions for locating points within basic geometric structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "PointLocation【Functions】for locating points within basic geometric structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PointLocation Functions【for】locating points within basic geometric structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "locating",
        "trans": [
            "PointLocation Functions for【locating】points within basic geometric structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "points",
        "trans": [
            "PointLocation Functions for locating【points】within basic geometric structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "within",
        "trans": [
            "PointLocation Functions for locating points【within】basic geometric structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "basic",
        "trans": [
            "PointLocation Functions for locating points within【basic】geometric structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "PointLocation Functions for locating points within basic【geometric】structures such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "structures",
        "trans": [
            "PointLocation Functions for locating points within basic geometric【structures】such as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "such",
        "trans": [
            "PointLocation Functions for locating points within basic geometric structures【such】as lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "as",
        "trans": [
            "PointLocation Functions for locating points within basic geometric structures such【as】lines and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "lines",
        "trans": [
            "PointLocation Functions for locating points within basic geometric structures such as【lines】and rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "and",
        "trans": [
            "PointLocation Functions for locating points within basic geometric structures such as lines【and】rings.",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "rings.",
        "trans": [
            "PointLocation Functions for locating points within basic geometric structures such as lines and【rings.】",
            "　　　功能定位在基本几何点"
        ]
    },
    {
        "name": "PointLocator",
        "trans": [
            "【PointLocator】Computes the topological (Location) of a single point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "PointLocator【Computes】the topological (Location) of a single point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointLocator Computes【the】topological (Location) of a single point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "PointLocator Computes the【topological】(Location) of a single point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "(Location)",
        "trans": [
            "PointLocator Computes the topological【(Location)】of a single point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PointLocator Computes the topological (Location)【of】a single point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointLocator Computes the topological (Location) of【a】single point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "single",
        "trans": [
            "PointLocator Computes the topological (Location) of a【single】point to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "point",
        "trans": [
            "PointLocator Computes the topological (Location) of a single【point】to a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "to",
        "trans": [
            "PointLocator Computes the topological (Location) of a single point【to】a Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointLocator Computes the topological (Location) of a single point to【a】Geometry.",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "PointLocator Computes the topological (Location) of a single point to a【Geometry.】",
            "　　　计算拓扑(位置)"
        ]
    },
    {
        "name": "RayCrossingCounter",
        "trans": [
            "【RayCrossingCounter】Counts the number of segments crossed by a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "Counts",
        "trans": [
            "RayCrossingCounter【Counts】the number of segments crossed by a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RayCrossingCounter Counts【the】number of segments crossed by a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "number",
        "trans": [
            "RayCrossingCounter Counts the【number】of segments crossed by a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RayCrossingCounter Counts the number【of】segments crossed by a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "RayCrossingCounter Counts the number of【segments】crossed by a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "crossed",
        "trans": [
            "RayCrossingCounter Counts the number of segments【crossed】by a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "by",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed【by】a horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by【a】horizontal ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "horizontal",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a【horizontal】ray extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "ray",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal【ray】extending to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "extending",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray【extending】to the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "to",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending【to】the right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to【the】right from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "right",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the【right】from a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "from",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right【from】a given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from【a】given point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "given",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a【given】point, in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "point,",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a given【point,】in an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "in",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a given point,【in】an incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "an",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a given point, in【an】incremental fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "incremental",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a given point, in an【incremental】fashion.",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "fashion.",
        "trans": [
            "RayCrossingCounter Counts the number of segments crossed by a horizontal ray extending to the right from a given point, in an incremental【fashion.】",
            "　　　数段的数量由水平射线交叉延伸到右边"
        ]
    },
    {
        "name": "RectangleLineIntersector",
        "trans": [
            "【RectangleLineIntersector】Computes whether a rectangle intersects line segments.",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "RectangleLineIntersector【Computes】whether a rectangle intersects line segments.",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "RectangleLineIntersector Computes【whether】a rectangle intersects line segments.",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RectangleLineIntersector Computes whether【a】rectangle intersects line segments.",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "rectangle",
        "trans": [
            "RectangleLineIntersector Computes whether a【rectangle】intersects line segments.",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "intersects",
        "trans": [
            "RectangleLineIntersector Computes whether a rectangle【intersects】line segments.",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "line",
        "trans": [
            "RectangleLineIntersector Computes whether a rectangle intersects【line】segments.",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "RectangleLineIntersector Computes whether a rectangle intersects line【segments.】",
            "　　　计算是否一个矩形相交线段。"
        ]
    },
    {
        "name": "RobustDeterminant",
        "trans": [
            "【RobustDeterminant】Implements an algorithm to compute the sign of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "RobustDeterminant【Implements】an algorithm to compute the sign of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "an",
        "trans": [
            "RobustDeterminant Implements【an】algorithm to compute the sign of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "algorithm",
        "trans": [
            "RobustDeterminant Implements an【algorithm】to compute the sign of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "to",
        "trans": [
            "RobustDeterminant Implements an algorithm【to】compute the sign of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "RobustDeterminant Implements an algorithm to【compute】the sign of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute【the】sign of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "sign",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the【sign】of a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign【of】a 2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of【a】2x2 determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "2x2",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of a【2x2】determinant for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "determinant",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of a 2x2【determinant】for double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "for",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of a 2x2 determinant【for】double precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "double",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of a 2x2 determinant for【double】precision values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of a 2x2 determinant for double【precision】values robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "values",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of a 2x2 determinant for double precision【values】robustly.",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "robustly.",
        "trans": [
            "RobustDeterminant Implements an algorithm to compute the sign of a 2x2 determinant for double precision values【robustly.】",
            "　　　实现一个算法来计算"
        ]
    },
    {
        "name": "RobustLineIntersector",
        "trans": [
            "【RobustLineIntersector】A robust version of LineIntersector.",
            "　　　一个健壮的版本的LineIntersector。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "RobustLineIntersector【A】robust version of LineIntersector.",
            "　　　一个健壮的版本的LineIntersector。"
        ]
    },
    {
        "name": "robust",
        "trans": [
            "RobustLineIntersector A【robust】version of LineIntersector.",
            "　　　一个健壮的版本的LineIntersector。"
        ]
    },
    {
        "name": "version",
        "trans": [
            "RobustLineIntersector A robust【version】of LineIntersector.",
            "　　　一个健壮的版本的LineIntersector。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RobustLineIntersector A robust version【of】LineIntersector.",
            "　　　一个健壮的版本的LineIntersector。"
        ]
    },
    {
        "name": "LineIntersector.",
        "trans": [
            "RobustLineIntersector A robust version of【LineIntersector.】",
            "　　　一个健壮的版本的LineIntersector。"
        ]
    },
    {
        "name": "PrecisionReducer",
        "trans": [
            "【PrecisionReducer】Functions to reduce the precision of a geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "PrecisionReducer【Functions】to reduce the precision of a geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "to",
        "trans": [
            "PrecisionReducer Functions【to】reduce the precision of a geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "reduce",
        "trans": [
            "PrecisionReducer Functions to【reduce】the precision of a geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PrecisionReducer Functions to reduce【the】precision of a geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "PrecisionReducer Functions to reduce the【precision】of a geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PrecisionReducer Functions to reduce the precision【of】a geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of【a】geometry by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a【geometry】by rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "by",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry【by】rounding it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "rounding",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry by【rounding】it to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "it",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry by rounding【it】to a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "to",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry by rounding it【to】a given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry by rounding it to【a】given precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "given",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry by rounding it to a【given】precision model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry by rounding it to a given【precision】model.",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "model.",
        "trans": [
            "PrecisionReducer Functions to reduce the precision of a geometry by rounding it to a given precision【model.】",
            "　　　函数来减少一个几何图形的精度"
        ]
    },
    {
        "name": "PrecisionUtil",
        "trans": [
            "【PrecisionUtil】Functions for computing precision model scale factors that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "PrecisionUtil【Functions】for computing precision model scale factors that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PrecisionUtil Functions【for】computing precision model scale factors that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "PrecisionUtil Functions for【computing】precision model scale factors that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "PrecisionUtil Functions for computing【precision】model scale factors that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "model",
        "trans": [
            "PrecisionUtil Functions for computing precision【model】scale factors that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "scale",
        "trans": [
            "PrecisionUtil Functions for computing precision model【scale】factors that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "factors",
        "trans": [
            "PrecisionUtil Functions for computing precision model scale【factors】that ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "that",
        "trans": [
            "PrecisionUtil Functions for computing precision model scale factors【that】ensure robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "ensure",
        "trans": [
            "PrecisionUtil Functions for computing precision model scale factors that【ensure】robust geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "robust",
        "trans": [
            "PrecisionUtil Functions for computing precision model scale factors that ensure【robust】geometry operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "PrecisionUtil Functions for computing precision model scale factors that ensure robust【geometry】operations.",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "PrecisionUtil Functions for computing precision model scale factors that ensure robust geometry【operations.】",
            "　　　函数计算精度模型规模的因素"
        ]
    },
    {
        "name": "RingClipper",
        "trans": [
            "【RingClipper】Clips rings of points to a rectangle.",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "Clips",
        "trans": [
            "RingClipper【Clips】rings of points to a rectangle.",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "rings",
        "trans": [
            "RingClipper Clips【rings】of points to a rectangle.",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RingClipper Clips rings【of】points to a rectangle.",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "RingClipper Clips rings of【points】to a rectangle.",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "RingClipper Clips rings of points【to】a rectangle.",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RingClipper Clips rings of points to【a】rectangle.",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "rectangle.",
        "trans": [
            "RingClipper Clips rings of points to a【rectangle.】",
            "　　　剪辑的指向一个矩形。"
        ]
    },
    {
        "name": "UnaryUnionNG",
        "trans": [
            "【UnaryUnionNG】Unions a collection of geometries in an efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "Unions",
        "trans": [
            "UnaryUnionNG【Unions】a collection of geometries in an efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "UnaryUnionNG Unions【a】collection of geometries in an efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "UnaryUnionNG Unions a【collection】of geometries in an efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "UnaryUnionNG Unions a collection【of】geometries in an efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "UnaryUnionNG Unions a collection of【geometries】in an efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "in",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries【in】an efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "an",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in【an】efficient way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "efficient",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an【efficient】way, using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "way,",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an efficient【way,】using OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "using",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an efficient way,【using】OverlayNG to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "OverlayNG",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an efficient way, using【OverlayNG】to ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "to",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an efficient way, using OverlayNG【to】ensure robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "ensure",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an efficient way, using OverlayNG to【ensure】robust computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "robust",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an efficient way, using OverlayNG to ensure【robust】computation.",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "computation.",
        "trans": [
            "UnaryUnionNG Unions a collection of geometries in an efficient way, using OverlayNG to ensure robust【computation.】",
            "　　　工会的几何图形集合"
        ]
    },
    {
        "name": "JTSVersion",
        "trans": [
            "【JTSVersion】JTS API version information.",
            "　　　JTS API version information."
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "JTSVersion【JTS】API version information.",
            "　　　JTS API version information."
        ]
    },
    {
        "name": "API",
        "trans": [
            "JTSVersion JTS【API】version information.",
            "　　　JTS API version information."
        ]
    },
    {
        "name": "version",
        "trans": [
            "JTSVersion JTS API【version】information.",
            "　　　JTS API version information."
        ]
    },
    {
        "name": "information.",
        "trans": [
            "JTSVersion JTS API version【information.】",
            "　　　JTS API version information."
        ]
    },
    {
        "name": "ConformingDelaunayTriangulator",
        "trans": [
            "【ConformingDelaunayTriangulator】Computes a Conforming Delaunay Triangulation over a set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "ConformingDelaunayTriangulator【Computes】a Conforming Delaunay Triangulation over a set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConformingDelaunayTriangulator Computes【a】Conforming Delaunay Triangulation over a set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "Conforming",
        "trans": [
            "ConformingDelaunayTriangulator Computes a【Conforming】Delaunay Triangulation over a set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "Delaunay",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming【Delaunay】Triangulation over a set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "Triangulation",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay【Triangulation】over a set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "over",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation【over】a set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over【a】set of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "set",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a【set】of sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set【of】sites and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "sites",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of【sites】and a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "and",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites【and】a set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites and【a】set of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "set",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites and a【set】of linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites and a set【of】linear constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites and a set of【linear】constraints.",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "constraints.",
        "trans": [
            "ConformingDelaunayTriangulator Computes a Conforming Delaunay Triangulation over a set of sites and a set of linear【constraints.】",
            "　　　计算符合德劳内三角剖分在一组网站和一组"
        ]
    },
    {
        "name": "ConstraintVertex",
        "trans": [
            "【ConstraintVertex】A vertex in a Constrained Delaunay Triangulation.",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ConstraintVertex【A】vertex in a Constrained Delaunay Triangulation.",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "vertex",
        "trans": [
            "ConstraintVertex A【vertex】in a Constrained Delaunay Triangulation.",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "ConstraintVertex A vertex【in】a Constrained Delaunay Triangulation.",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConstraintVertex A vertex in【a】Constrained Delaunay Triangulation.",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "Constrained",
        "trans": [
            "ConstraintVertex A vertex in a【Constrained】Delaunay Triangulation.",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "Delaunay",
        "trans": [
            "ConstraintVertex A vertex in a Constrained【Delaunay】Triangulation.",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "Triangulation.",
        "trans": [
            "ConstraintVertex A vertex in a Constrained Delaunay【Triangulation.】",
            "　　　一个顶点在一个受限的德劳内三角。"
        ]
    },
    {
        "name": "DelaunayTriangulationBuilder",
        "trans": [
            "【DelaunayTriangulationBuilder】A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "A",
        "trans": [
            "DelaunayTriangulationBuilder【A】utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "DelaunayTriangulationBuilder A【utility】class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "class",
        "trans": [
            "DelaunayTriangulationBuilder A utility【class】which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "which",
        "trans": [
            "DelaunayTriangulationBuilder A utility class【which】creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "creates",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which【creates】Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "Delaunay",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates【Delaunay】Triangulations from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "Triangulations",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay【Triangulations】from collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "from",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations【from】collections of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "collections",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from【collections】of points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "of",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections【of】points and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "points",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of【points】and extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "and",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points【and】extract the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "extract",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and【extract】the resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract【the】resulting triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "resulting",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the【resulting】triangulation edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "triangulation",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting【triangulation】edges or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation【edges】or triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "or",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges【or】triangles as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "triangles",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or【triangles】as geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "as",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles【as】geometries.",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "DelaunayTriangulationBuilder A utility class which creates Delaunay Triangulations from collections of points and extract the resulting triangulation edges or triangles as【geometries.】",
            "　　　创建德劳内三角剖的实用程序类"
        ]
    },
    {
        "name": "IncrementalDelaunayTriangulator",
        "trans": [
            "【IncrementalDelaunayTriangulator】Computes a Delaunay Triangulation of a set of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "IncrementalDelaunayTriangulator【Computes】a Delaunay Triangulation of a set of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IncrementalDelaunayTriangulator Computes【a】Delaunay Triangulation of a set of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "Delaunay",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a【Delaunay】Triangulation of a set of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "Triangulation",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay【Triangulation】of a set of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation【of】a set of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of【a】set of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "set",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a【set】of Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set【of】Vertexes, using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "Vertexes,",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of【Vertexes,】using an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "using",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of Vertexes,【using】an incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "an",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of Vertexes, using【an】incremental insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "incremental",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of Vertexes, using an【incremental】insertion algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "insertion",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of Vertexes, using an incremental【insertion】algorithm.",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "algorithm.",
        "trans": [
            "IncrementalDelaunayTriangulator Computes a Delaunay Triangulation of a set of Vertexes, using an incremental insertion【algorithm.】",
            "　　　计算一组顶点的德劳内三角测量,使用一个"
        ]
    },
    {
        "name": "MidpointSplitPointFinder",
        "trans": [
            "【MidpointSplitPointFinder】A simple split point finder which returns the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "MidpointSplitPointFinder【A】simple split point finder which returns the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "simple",
        "trans": [
            "MidpointSplitPointFinder A【simple】split point finder which returns the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "split",
        "trans": [
            "MidpointSplitPointFinder A simple【split】point finder which returns the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "MidpointSplitPointFinder A simple split【point】finder which returns the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "finder",
        "trans": [
            "MidpointSplitPointFinder A simple split point【finder】which returns the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder【which】returns the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "returns",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder which【returns】the midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder which returns【the】midpoint of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "midpoint",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder which returns the【midpoint】of the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder which returns the midpoint【of】the split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder which returns the midpoint of【the】split segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "split",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder which returns the midpoint of the【split】segment.",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "segment.",
        "trans": [
            "MidpointSplitPointFinder A simple split point finder which returns the midpoint of the split【segment.】",
            "　　　一个简单的分割点finder返回分割段的中点。"
        ]
    },
    {
        "name": "NonEncroachingSplitPointFinder",
        "trans": [
            "【NonEncroachingSplitPointFinder】A strategy for finding constraint split points which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "A",
        "trans": [
            "NonEncroachingSplitPointFinder【A】strategy for finding constraint split points which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "strategy",
        "trans": [
            "NonEncroachingSplitPointFinder A【strategy】for finding constraint split points which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "for",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy【for】finding constraint split points which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "finding",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for【finding】constraint split points which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "constraint",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding【constraint】split points which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "split",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint【split】points which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "points",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split【points】which attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "which",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points【which】attempts to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "attempts",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which【attempts】to maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "to",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts【to】maximise the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "maximise",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to【maximise】the length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise【the】length of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "length",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the【length】of the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length【of】the split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of【the】split segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "split",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the【split】segments while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the split【segments】while preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "while",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the split segments【while】preventing further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "preventing",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the split segments while【preventing】further encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "further",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the split segments while preventing【further】encroachment.",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "encroachment.",
        "trans": [
            "NonEncroachingSplitPointFinder A strategy for finding constraint split points which attempts to maximise the length of the split segments while preventing further【encroachment.】",
            "　　　战略寻找约束分割点试图最大化的长度"
        ]
    },
    {
        "name": "Segment",
        "trans": [
            "【Segment】Models a constraint segment in a triangulation.",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "Segment【Models】a constraint segment in a triangulation.",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Segment Models【a】constraint segment in a triangulation.",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "constraint",
        "trans": [
            "Segment Models a【constraint】segment in a triangulation.",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "Segment Models a constraint【segment】in a triangulation.",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Segment Models a constraint segment【in】a triangulation.",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Segment Models a constraint segment in【a】triangulation.",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "triangulation.",
        "trans": [
            "Segment Models a constraint segment in a【triangulation.】",
            "　　　在三角模型约束段。"
        ]
    },
    {
        "name": "SplitSegment",
        "trans": [
            "【SplitSegment】Models a constraint segment which can be split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "SplitSegment【Models】a constraint segment which can be split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SplitSegment Models【a】constraint segment which can be split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "constraint",
        "trans": [
            "SplitSegment Models a【constraint】segment which can be split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "SplitSegment Models a constraint【segment】which can be split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SplitSegment Models a constraint segment【which】can be split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "can",
        "trans": [
            "SplitSegment Models a constraint segment which【can】be split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "be",
        "trans": [
            "SplitSegment Models a constraint segment which can【be】split in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "split",
        "trans": [
            "SplitSegment Models a constraint segment which can be【split】in two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "SplitSegment Models a constraint segment which can be split【in】two in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in【two】in various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two【in】various ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "various",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two in【various】ways, according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "ways,",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two in various【ways,】according to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "according",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two in various ways,【according】to certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two in various ways, according【to】certain geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "certain",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two in various ways, according to【certain】geometric constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two in various ways, according to certain【geometric】constraints.",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "constraints.",
        "trans": [
            "SplitSegment Models a constraint segment which can be split in two in various ways, according to certain geometric【constraints.】",
            "　　　模型约束段可以一分为二以不同的方式,"
        ]
    },
    {
        "name": "VertexTaggedGeometryDataMapper",
        "trans": [
            "【VertexTaggedGeometryDataMapper】Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "VertexTaggedGeometryDataMapper【Creates】a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "a",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates【a】map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "map",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a【map】between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "between",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map【between】the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "the",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between【the】vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "vertex",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the【vertex】Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "Coordinates",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex【Coordinates】of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "of",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates【of】a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "a",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of【a】set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "set",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a【set】of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "of",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set【of】Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "Geometrys,",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of【Geometrys,】and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "and",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys,【and】the parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "the",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and【the】parent geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "parent",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the【parent】geometry, and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "geometry,",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent【geometry,】and transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "and",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry,【and】transfers the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "transfers",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and【transfers】the source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "the",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers【the】source geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "source",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the【source】geometry data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source【geometry】data objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "data",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry【data】objects to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "objects",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data【objects】to geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "to",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects【to】geometry components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to【geometry】components tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "components",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry【components】tagged with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "tagged",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components【tagged】with the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "with",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged【with】the coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "the",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with【the】coordinates.",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "coordinates.",
        "trans": [
            "VertexTaggedGeometryDataMapper Creates a map between the vertex Coordinates of a set of Geometrys, and the parent geometry, and transfers the source geometry data objects to geometry components tagged with the【coordinates.】",
            "　　　创建一个顶点坐标之间的映射"
        ]
    },
    {
        "name": "VoronoiDiagramBuilder",
        "trans": [
            "【VoronoiDiagramBuilder】A utility class which creates Voronoi Diagrams from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "A",
        "trans": [
            "VoronoiDiagramBuilder【A】utility class which creates Voronoi Diagrams from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "VoronoiDiagramBuilder A【utility】class which creates Voronoi Diagrams from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "class",
        "trans": [
            "VoronoiDiagramBuilder A utility【class】which creates Voronoi Diagrams from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "which",
        "trans": [
            "VoronoiDiagramBuilder A utility class【which】creates Voronoi Diagrams from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "creates",
        "trans": [
            "VoronoiDiagramBuilder A utility class which【creates】Voronoi Diagrams from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "Voronoi",
        "trans": [
            "VoronoiDiagramBuilder A utility class which creates【Voronoi】Diagrams from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "Diagrams",
        "trans": [
            "VoronoiDiagramBuilder A utility class which creates Voronoi【Diagrams】from collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "from",
        "trans": [
            "VoronoiDiagramBuilder A utility class which creates Voronoi Diagrams【from】collections of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "collections",
        "trans": [
            "VoronoiDiagramBuilder A utility class which creates Voronoi Diagrams from【collections】of points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "of",
        "trans": [
            "VoronoiDiagramBuilder A utility class which creates Voronoi Diagrams from collections【of】points.",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "points.",
        "trans": [
            "VoronoiDiagramBuilder A utility class which creates Voronoi Diagrams from collections of【points.】",
            "　　　一个实用程序类中创建了泰森多边形法图"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】contains(Geometry geom) Tests whether the base Geometry contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "contains(Geometry",
        "trans": [
            "boolean【contains(Geometry】geom) Tests whether the base Geometry contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean contains(Geometry【geom)】Tests whether the base Geometry contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean contains(Geometry geom)【Tests】whether the base Geometry contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean contains(Geometry geom) Tests【whether】the base Geometry contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean contains(Geometry geom) Tests whether【the】base Geometry contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean contains(Geometry geom) Tests whether the【base】Geometry contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean contains(Geometry geom) Tests whether the base【Geometry】contains a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "contains",
        "trans": [
            "boolean contains(Geometry geom) Tests whether the base Geometry【contains】a given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean contains(Geometry geom) Tests whether the base Geometry contains【a】given geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean contains(Geometry geom) Tests whether the base Geometry contains a【given】geometry.",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean contains(Geometry geom) Tests whether the base Geometry contains a given【geometry.】",
            "　　　包含几何(几何学)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】containsProperly(Geometry geom) Tests whether the base Geometry properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "containsProperly(Geometry",
        "trans": [
            "boolean【containsProperly(Geometry】geom) Tests whether the base Geometry properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean containsProperly(Geometry【geom)】Tests whether the base Geometry properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean containsProperly(Geometry geom)【Tests】whether the base Geometry properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests【whether】the base Geometry properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether【the】base Geometry properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether the【base】Geometry properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether the base【Geometry】properly contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "properly",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether the base Geometry【properly】contains a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "contains",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether the base Geometry properly【contains】a given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether the base Geometry properly contains【a】given geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether the base Geometry properly contains a【given】geometry.",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean containsProperly(Geometry geom) Tests whether the base Geometry properly contains a given【geometry.】",
            "　　　containsProperly(几何几何学)"
        ]
    },
    {
        "name": "ConstraintEnforcementException",
        "trans": [
            "【ConstraintEnforcementException】Indicates a failure during constraint enforcement.",
            "　　　表明在约束执行失败。"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "ConstraintEnforcementException【Indicates】a failure during constraint enforcement.",
            "　　　表明在约束执行失败。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConstraintEnforcementException Indicates【a】failure during constraint enforcement.",
            "　　　表明在约束执行失败。"
        ]
    },
    {
        "name": "failure",
        "trans": [
            "ConstraintEnforcementException Indicates a【failure】during constraint enforcement.",
            "　　　表明在约束执行失败。"
        ]
    },
    {
        "name": "during",
        "trans": [
            "ConstraintEnforcementException Indicates a failure【during】constraint enforcement.",
            "　　　表明在约束执行失败。"
        ]
    },
    {
        "name": "constraint",
        "trans": [
            "ConstraintEnforcementException Indicates a failure during【constraint】enforcement.",
            "　　　表明在约束执行失败。"
        ]
    },
    {
        "name": "enforcement.",
        "trans": [
            "ConstraintEnforcementException Indicates a failure during constraint【enforcement.】",
            "　　　表明在约束执行失败。"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter",
            "　　　DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter",
            "　　　DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter"
        ]
    },
    {
        "name": "DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter",
        "trans": [
            "static class【DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter】",
            "　　　DiscreteHausdorffDistance.MaxDensifiedByFractionDistanceFilter"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class DiscreteHausdorffDistance.MaxPointDistanceFilter",
            "　　　DiscreteHausdorffDistance.MaxPointDistanceFilter"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】DiscreteHausdorffDistance.MaxPointDistanceFilter",
            "　　　DiscreteHausdorffDistance.MaxPointDistanceFilter"
        ]
    },
    {
        "name": "DiscreteHausdorffDistance.MaxPointDistanceFilter",
        "trans": [
            "static class【DiscreteHausdorffDistance.MaxPointDistanceFilter】",
            "　　　DiscreteHausdorffDistance.MaxPointDistanceFilter"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】coveredBy(Geometry geom) Tests whether the base Geometry is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "coveredBy(Geometry",
        "trans": [
            "boolean【coveredBy(Geometry】geom) Tests whether the base Geometry is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean coveredBy(Geometry【geom)】Tests whether the base Geometry is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean coveredBy(Geometry geom)【Tests】whether the base Geometry is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests【whether】the base Geometry is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether【the】base Geometry is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the【base】Geometry is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the base【Geometry】is covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the base Geometry【is】covered by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "covered",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the base Geometry is【covered】by a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "by",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the base Geometry is covered【by】a given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the base Geometry is covered by【a】given geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the base Geometry is covered by a【given】geometry.",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean coveredBy(Geometry geom) Tests whether the base Geometry is covered by a given【geometry.】",
            "　　　coveredBy(几何几何学)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】covers(Geometry geom) Tests whether the base Geometry covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "covers(Geometry",
        "trans": [
            "boolean【covers(Geometry】geom) Tests whether the base Geometry covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean covers(Geometry【geom)】Tests whether the base Geometry covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean covers(Geometry geom)【Tests】whether the base Geometry covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean covers(Geometry geom) Tests【whether】the base Geometry covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean covers(Geometry geom) Tests whether【the】base Geometry covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean covers(Geometry geom) Tests whether the【base】Geometry covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean covers(Geometry geom) Tests whether the base【Geometry】covers a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "covers",
        "trans": [
            "boolean covers(Geometry geom) Tests whether the base Geometry【covers】a given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean covers(Geometry geom) Tests whether the base Geometry covers【a】given geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean covers(Geometry geom) Tests whether the base Geometry covers a【given】geometry.",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean covers(Geometry geom) Tests whether the base Geometry covers a given【geometry.】",
            "　　　封面(几何几何学)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】crosses(Geometry geom) Tests whether the base Geometry crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "crosses(Geometry",
        "trans": [
            "boolean【crosses(Geometry】geom) Tests whether the base Geometry crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean crosses(Geometry【geom)】Tests whether the base Geometry crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean crosses(Geometry geom)【Tests】whether the base Geometry crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean crosses(Geometry geom) Tests【whether】the base Geometry crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean crosses(Geometry geom) Tests whether【the】base Geometry crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean crosses(Geometry geom) Tests whether the【base】Geometry crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean crosses(Geometry geom) Tests whether the base【Geometry】crosses a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "crosses",
        "trans": [
            "boolean crosses(Geometry geom) Tests whether the base Geometry【crosses】a given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean crosses(Geometry geom) Tests whether the base Geometry crosses【a】given geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean crosses(Geometry geom) Tests whether the base Geometry crosses a【given】geometry.",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean crosses(Geometry geom) Tests whether the base Geometry crosses a given【geometry.】",
            "　　　十字架(几何几何学)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】disjoint(Geometry geom) Tests whether the base Geometry is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "disjoint(Geometry",
        "trans": [
            "boolean【disjoint(Geometry】geom) Tests whether the base Geometry is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean disjoint(Geometry【geom)】Tests whether the base Geometry is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean disjoint(Geometry geom)【Tests】whether the base Geometry is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean disjoint(Geometry geom) Tests【whether】the base Geometry is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether【the】base Geometry is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the【base】Geometry is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the base【Geometry】is disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the base Geometry【is】disjoint from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "disjoint",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the base Geometry is【disjoint】from a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "from",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the base Geometry is disjoint【from】a given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the base Geometry is disjoint from【a】given geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the base Geometry is disjoint from a【given】geometry.",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean disjoint(Geometry geom) Tests whether the base Geometry is disjoint from a given【geometry.】",
            "　　　不相交的几何(几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "【Geometry】getGeometry() Gets the original Geometry which has been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "getGeometry()",
        "trans": [
            "Geometry【getGeometry()】Gets the original Geometry which has been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "Geometry getGeometry()【Gets】the original Geometry which has been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Geometry getGeometry() Gets【the】original Geometry which has been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "original",
        "trans": [
            "Geometry getGeometry() Gets the【original】Geometry which has been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Geometry getGeometry() Gets the original【Geometry】which has been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Geometry getGeometry() Gets the original Geometry【which】has been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "has",
        "trans": [
            "Geometry getGeometry() Gets the original Geometry which【has】been prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "been",
        "trans": [
            "Geometry getGeometry() Gets the original Geometry which has【been】prepared.",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "prepared.",
        "trans": [
            "Geometry getGeometry() Gets the original Geometry which has been【prepared.】",
            "　　　getGeometry ()"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】intersects(Geometry geom) Tests whether the base Geometry intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "intersects(Geometry",
        "trans": [
            "boolean【intersects(Geometry】geom) Tests whether the base Geometry intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean intersects(Geometry【geom)】Tests whether the base Geometry intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean intersects(Geometry geom)【Tests】whether the base Geometry intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean intersects(Geometry geom) Tests【whether】the base Geometry intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean intersects(Geometry geom) Tests whether【the】base Geometry intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean intersects(Geometry geom) Tests whether the【base】Geometry intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean intersects(Geometry geom) Tests whether the base【Geometry】intersects a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "intersects",
        "trans": [
            "boolean intersects(Geometry geom) Tests whether the base Geometry【intersects】a given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean intersects(Geometry geom) Tests whether the base Geometry intersects【a】given geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean intersects(Geometry geom) Tests whether the base Geometry intersects a【given】geometry.",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean intersects(Geometry geom) Tests whether the base Geometry intersects a given【geometry.】",
            "　　　几何相交(几何学)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】overlaps(Geometry geom) Tests whether the base Geometry overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "overlaps(Geometry",
        "trans": [
            "boolean【overlaps(Geometry】geom) Tests whether the base Geometry overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean overlaps(Geometry【geom)】Tests whether the base Geometry overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean overlaps(Geometry geom)【Tests】whether the base Geometry overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean overlaps(Geometry geom) Tests【whether】the base Geometry overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean overlaps(Geometry geom) Tests whether【the】base Geometry overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean overlaps(Geometry geom) Tests whether the【base】Geometry overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean overlaps(Geometry geom) Tests whether the base【Geometry】overlaps a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "overlaps",
        "trans": [
            "boolean overlaps(Geometry geom) Tests whether the base Geometry【overlaps】a given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean overlaps(Geometry geom) Tests whether the base Geometry overlaps【a】given geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean overlaps(Geometry geom) Tests whether the base Geometry overlaps a【given】geometry.",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean overlaps(Geometry geom) Tests whether the base Geometry overlaps a given【geometry.】",
            "　　　几何重叠(几何学)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】touches(Geometry geom) Tests whether the base Geometry touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "touches(Geometry",
        "trans": [
            "boolean【touches(Geometry】geom) Tests whether the base Geometry touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean touches(Geometry【geom)】Tests whether the base Geometry touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean touches(Geometry geom)【Tests】whether the base Geometry touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean touches(Geometry geom) Tests【whether】the base Geometry touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean touches(Geometry geom) Tests whether【the】base Geometry touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean touches(Geometry geom) Tests whether the【base】Geometry touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean touches(Geometry geom) Tests whether the base【Geometry】touches a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "touches",
        "trans": [
            "boolean touches(Geometry geom) Tests whether the base Geometry【touches】a given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean touches(Geometry geom) Tests whether the base Geometry touches【a】given geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean touches(Geometry geom) Tests whether the base Geometry touches a【given】geometry.",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean touches(Geometry geom) Tests whether the base Geometry touches a given【geometry.】",
            "　　　触摸(几何几何学)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】within(Geometry geom) Tests whether the base Geometry is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "within(Geometry",
        "trans": [
            "boolean【within(Geometry】geom) Tests whether the base Geometry is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "boolean within(Geometry【geom)】Tests whether the base Geometry is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean within(Geometry geom)【Tests】whether the base Geometry is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean within(Geometry geom) Tests【whether】the base Geometry is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean within(Geometry geom) Tests whether【the】base Geometry is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "base",
        "trans": [
            "boolean within(Geometry geom) Tests whether the【base】Geometry is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "boolean within(Geometry geom) Tests whether the base【Geometry】is within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "boolean within(Geometry geom) Tests whether the base Geometry【is】within a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "within",
        "trans": [
            "boolean within(Geometry geom) Tests whether the base Geometry is【within】a given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean within(Geometry geom) Tests whether the base Geometry is within【a】given geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "boolean within(Geometry geom) Tests whether the base Geometry is within a【given】geometry.",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean within(Geometry geom) Tests whether the base Geometry is within a given【geometry.】",
            "　　　在几何(几何学)"
        ]
    },
    {
        "name": "NotRepresentableException",
        "trans": [
            "【NotRepresentableException】Indicates that a HCoordinate has been computed which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "NotRepresentableException【Indicates】that a HCoordinate has been computed which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "that",
        "trans": [
            "NotRepresentableException Indicates【that】a HCoordinate has been computed which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "NotRepresentableException Indicates that【a】HCoordinate has been computed which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "HCoordinate",
        "trans": [
            "NotRepresentableException Indicates that a【HCoordinate】has been computed which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "has",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate【has】been computed which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "been",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has【been】computed which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "computed",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been【computed】which is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "which",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed【which】is not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "is",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed which【is】not representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "not",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed which is【not】representable on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "representable",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed which is not【representable】on the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "on",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed which is not representable【on】the Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed which is not representable on【the】Cartesian plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed which is not representable on the【Cartesian】plane.",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "plane.",
        "trans": [
            "NotRepresentableException Indicates that a HCoordinate has been computed which is not representable on the Cartesian【plane.】",
            "　　　表明HCoordinate已经计算的"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】locate(Coordinate p) Determines the Location of a point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "locate(Coordinate",
        "trans": [
            "int【locate(Coordinate】p) Determines the Location of a point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "p)",
        "trans": [
            "int locate(Coordinate【p)】Determines the Location of a point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "Determines",
        "trans": [
            "int locate(Coordinate p)【Determines】the Location of a point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "int locate(Coordinate p) Determines【the】Location of a point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "Location",
        "trans": [
            "int locate(Coordinate p) Determines the【Location】of a point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "int locate(Coordinate p) Determines the Location【of】a point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "int locate(Coordinate p) Determines the Location of【a】point in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "point",
        "trans": [
            "int locate(Coordinate p) Determines the Location of a【point】in the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "in",
        "trans": [
            "int locate(Coordinate p) Determines the Location of a point【in】the Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "int locate(Coordinate p) Determines the Location of a point in【the】Geometry.",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "int locate(Coordinate p) Determines the Location of a point in the【Geometry.】",
            "　　　定位(协调p)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule.EndPointBoundaryNodeRule",
        "trans": [
            "static class【BoundaryNodeRule.EndPointBoundaryNodeRule】A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule【A】BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A【BoundaryNodeRule】which specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule【which】specifies that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "specifies",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which【specifies】that any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies【that】any points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "any",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that【any】points which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "points",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any【points】which are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points【which】are endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "are",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which【are】endpoints of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "endpoints",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are【endpoints】of lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints【of】lineal components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "lineal",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of【lineal】components are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "components",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal【components】are in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "are",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components【are】in the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are【in】the boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in【the】boundary of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the【boundary】of the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary【of】the parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of【the】parent geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "parent",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the【parent】geometry.",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "static class BoundaryNodeRule.EndPointBoundaryNodeRule A BoundaryNodeRule which specifies that any points which are endpoints of lineal components are in the boundary of the parent【geometry.】",
            "　　　BoundaryNodeRule.EndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule.Mod2BoundaryNodeRule",
        "trans": [
            "static class【BoundaryNodeRule.Mod2BoundaryNodeRule】A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule【A】BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A【BoundaryNodeRule】specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "specifies",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule【specifies】that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies【that】points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "points",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that【points】are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "are",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points【are】in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are【in】the boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in【the】boundary of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the【boundary】of a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary【of】a lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of【a】lineal geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "lineal",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a【lineal】geometry iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal【geometry】iff the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "iff",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry【iff】the point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff【the】point lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the【point】lies on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "lies",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point【lies】on the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "on",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies【on】the boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on【the】boundary of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the【boundary】of an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary【of】an odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of【an】odd number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "odd",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an【odd】number of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "number",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd【number】of components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number【of】components.",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "components.",
        "trans": [
            "static class BoundaryNodeRule.Mod2BoundaryNodeRule A BoundaryNodeRule specifies that points are in the boundary of a lineal geometry iff the point lies on the boundary of an odd number of【components.】",
            "　　　BoundaryNodeRule.Mod2BoundaryNodeRule"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule",
        "trans": [
            "static class【BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule】A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule【A】BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A【BoundaryNodeRule】which determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule【which】determines that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "determines",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which【determines】that only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines【that】only endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "only",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that【only】endpoints with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "endpoints",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only【endpoints】with valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "with",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints【with】valency of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "valency",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with【valency】of exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency【of】exactly 1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "exactly",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of【exactly】1 are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "1",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly【1】are on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "are",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1【are】on the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "on",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are【on】the boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on【the】boundary.",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "boundary.",
        "trans": [
            "static class BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency of exactly 1 are on the【boundary.】",
            "　　　BoundaryNodeRule.MonoValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule",
        "trans": [
            "static class【BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule】A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule【A】BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "BoundaryNodeRule",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A【BoundaryNodeRule】which determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule【which】determines that only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "determines",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which【determines】that only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines【that】only endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "only",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that【only】endpoints with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "endpoints",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only【endpoints】with valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "with",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints【with】valency greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "valency",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with【valency】greater than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "greater",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency【greater】than 1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "than",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater【than】1 are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "1",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than【1】are on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "are",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1【are】on the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "on",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are【on】the boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on【the】boundary.",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "boundary.",
        "trans": [
            "static class BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule A BoundaryNodeRule which determines that only endpoints with valency greater than 1 are on the【boundary.】",
            "　　　BoundaryNodeRule.MultiValentEndPointBoundaryNodeRule"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int CLOCKWISE A value that indicates an orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】CLOCKWISE A value that indicates an orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "CLOCKWISE",
        "trans": [
            "static int【CLOCKWISE】A value that indicates an orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int CLOCKWISE【A】value that indicates an orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int CLOCKWISE A【value】that indicates an orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int CLOCKWISE A value【that】indicates an orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "indicates",
        "trans": [
            "static int CLOCKWISE A value that【indicates】an orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static int CLOCKWISE A value that indicates【an】orientation of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int CLOCKWISE A value that indicates an【orientation】of clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int CLOCKWISE A value that indicates an orientation【of】clockwise, or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "clockwise,",
        "trans": [
            "static int CLOCKWISE A value that indicates an orientation of【clockwise,】or a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static int CLOCKWISE A value that indicates an orientation of clockwise,【or】a right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int CLOCKWISE A value that indicates an orientation of clockwise, or【a】right turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "right",
        "trans": [
            "static int CLOCKWISE A value that indicates an orientation of clockwise, or a【right】turn.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "turn.",
        "trans": [
            "static int CLOCKWISE A value that indicates an orientation of clockwise, or a right【turn.】",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int COLLINEAR A value that indicates an orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】COLLINEAR A value that indicates an orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "COLLINEAR",
        "trans": [
            "static int【COLLINEAR】A value that indicates an orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int COLLINEAR【A】value that indicates an orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int COLLINEAR A【value】that indicates an orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int COLLINEAR A value【that】indicates an orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "indicates",
        "trans": [
            "static int COLLINEAR A value that【indicates】an orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static int COLLINEAR A value that indicates【an】orientation of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int COLLINEAR A value that indicates an【orientation】of collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int COLLINEAR A value that indicates an orientation【of】collinear, or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "collinear,",
        "trans": [
            "static int COLLINEAR A value that indicates an orientation of【collinear,】or no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static int COLLINEAR A value that indicates an orientation of collinear,【or】no turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "no",
        "trans": [
            "static int COLLINEAR A value that indicates an orientation of collinear, or【no】turn (straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "turn",
        "trans": [
            "static int COLLINEAR A value that indicates an orientation of collinear, or no【turn】(straight).",
            "　　　共线的"
        ]
    },
    {
        "name": "(straight).",
        "trans": [
            "static int COLLINEAR A value that indicates an orientation of collinear, or no turn【(straight).】",
            "　　　共线的"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int COUNTERCLOCKWISE A value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】COUNTERCLOCKWISE A value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "COUNTERCLOCKWISE",
        "trans": [
            "static int【COUNTERCLOCKWISE】A value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int COUNTERCLOCKWISE【A】value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int COUNTERCLOCKWISE A【value】that indicates an orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int COUNTERCLOCKWISE A value【that】indicates an orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "indicates",
        "trans": [
            "static int COUNTERCLOCKWISE A value that【indicates】an orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates【an】orientation of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates an【orientation】of counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates an orientation【of】counterclockwise, or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "counterclockwise,",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates an orientation of【counterclockwise,】or a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates an orientation of counterclockwise,【or】a left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates an orientation of counterclockwise, or【a】left turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "left",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates an orientation of counterclockwise, or a【left】turn.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "turn.",
        "trans": [
            "static int COUNTERCLOCKWISE A value that indicates an orientation of counterclockwise, or a left【turn.】",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int LEFT A value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】LEFT A value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "LEFT",
        "trans": [
            "static int【LEFT】A value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int LEFT【A】value that indicates an orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int LEFT A【value】that indicates an orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int LEFT A value【that】indicates an orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "indicates",
        "trans": [
            "static int LEFT A value that【indicates】an orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static int LEFT A value that indicates【an】orientation of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int LEFT A value that indicates an【orientation】of counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int LEFT A value that indicates an orientation【of】counterclockwise, or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "counterclockwise,",
        "trans": [
            "static int LEFT A value that indicates an orientation of【counterclockwise,】or a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static int LEFT A value that indicates an orientation of counterclockwise,【or】a left turn.",
            "　　　左"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int LEFT A value that indicates an orientation of counterclockwise, or【a】left turn.",
            "　　　左"
        ]
    },
    {
        "name": "left",
        "trans": [
            "static int LEFT A value that indicates an orientation of counterclockwise, or a【left】turn.",
            "　　　左"
        ]
    },
    {
        "name": "turn.",
        "trans": [
            "static int LEFT A value that indicates an orientation of counterclockwise, or a left【turn.】",
            "　　　左"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int RIGHT A value that indicates an orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】RIGHT A value that indicates an orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "RIGHT",
        "trans": [
            "static int【RIGHT】A value that indicates an orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int RIGHT【A】value that indicates an orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int RIGHT A【value】that indicates an orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int RIGHT A value【that】indicates an orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "indicates",
        "trans": [
            "static int RIGHT A value that【indicates】an orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static int RIGHT A value that indicates【an】orientation of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int RIGHT A value that indicates an【orientation】of clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int RIGHT A value that indicates an orientation【of】clockwise, or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "clockwise,",
        "trans": [
            "static int RIGHT A value that indicates an orientation of【clockwise,】or a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static int RIGHT A value that indicates an orientation of clockwise,【or】a right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int RIGHT A value that indicates an orientation of clockwise, or【a】right turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "right",
        "trans": [
            "static int RIGHT A value that indicates an orientation of clockwise, or a【right】turn.",
            "　　　正确的"
        ]
    },
    {
        "name": "turn.",
        "trans": [
            "static int RIGHT A value that indicates an orientation of clockwise, or a right【turn.】",
            "　　　正确的"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int STRAIGHT A value that indicates an orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】STRAIGHT A value that indicates an orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "STRAIGHT",
        "trans": [
            "static int【STRAIGHT】A value that indicates an orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int STRAIGHT【A】value that indicates an orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int STRAIGHT A【value】that indicates an orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int STRAIGHT A value【that】indicates an orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "indicates",
        "trans": [
            "static int STRAIGHT A value that【indicates】an orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static int STRAIGHT A value that indicates【an】orientation of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int STRAIGHT A value that indicates an【orientation】of collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int STRAIGHT A value that indicates an orientation【of】collinear, or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "collinear,",
        "trans": [
            "static int STRAIGHT A value that indicates an orientation of【collinear,】or no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static int STRAIGHT A value that indicates an orientation of collinear,【or】no turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "no",
        "trans": [
            "static int STRAIGHT A value that indicates an orientation of collinear, or【no】turn (straight).",
            "　　　直"
        ]
    },
    {
        "name": "turn",
        "trans": [
            "static int STRAIGHT A value that indicates an orientation of collinear, or no【turn】(straight).",
            "　　　直"
        ]
    },
    {
        "name": "(straight).",
        "trans": [
            "static int STRAIGHT A value that indicates an orientation of collinear, or no turn【(straight).】",
            "　　　直"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int COLLINEAR",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】COLLINEAR",
            "　　　静态int"
        ]
    },
    {
        "name": "COLLINEAR",
        "trans": [
            "static int【COLLINEAR】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int COLLINEAR_INTERSECTION Indicates that line segments intersect in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】COLLINEAR_INTERSECTION Indicates that line segments intersect in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "COLLINEAR_INTERSECTION",
        "trans": [
            "static int【COLLINEAR_INTERSECTION】Indicates that line segments intersect in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "static int COLLINEAR_INTERSECTION【Indicates】that line segments intersect in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates【that】line segments intersect in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "line",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates that【line】segments intersect in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates that line【segments】intersect in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates that line segments【intersect】in a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates that line segments intersect【in】a line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates that line segments intersect in【a】line segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "line",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates that line segments intersect in a【line】segment",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "static int COLLINEAR_INTERSECTION Indicates that line segments intersect in a line【segment】",
            "　　　COLLINEAR_INTERSECTION"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int DO_INTERSECT",
            "　　　DO_INTERSECT"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】DO_INTERSECT",
            "　　　DO_INTERSECT"
        ]
    },
    {
        "name": "DO_INTERSECT",
        "trans": [
            "static int【DO_INTERSECT】",
            "　　　DO_INTERSECT"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int DONT_INTERSECT These are deprecated, due to ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】DONT_INTERSECT These are deprecated, due to ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "DONT_INTERSECT",
        "trans": [
            "static int【DONT_INTERSECT】These are deprecated, due to ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "These",
        "trans": [
            "static int DONT_INTERSECT【These】are deprecated, due to ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "are",
        "trans": [
            "static int DONT_INTERSECT These【are】deprecated, due to ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "deprecated,",
        "trans": [
            "static int DONT_INTERSECT These are【deprecated,】due to ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "due",
        "trans": [
            "static int DONT_INTERSECT These are deprecated,【due】to ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int DONT_INTERSECT These are deprecated, due【to】ambiguous naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "ambiguous",
        "trans": [
            "static int DONT_INTERSECT These are deprecated, due to【ambiguous】naming",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "naming",
        "trans": [
            "static int DONT_INTERSECT These are deprecated, due to ambiguous【naming】",
            "　　　DONT_INTERSECT"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int NO_INTERSECTION Indicates that line segments do not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】NO_INTERSECTION Indicates that line segments do not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "NO_INTERSECTION",
        "trans": [
            "static int【NO_INTERSECTION】Indicates that line segments do not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "static int NO_INTERSECTION【Indicates】that line segments do not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int NO_INTERSECTION Indicates【that】line segments do not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "line",
        "trans": [
            "static int NO_INTERSECTION Indicates that【line】segments do not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "static int NO_INTERSECTION Indicates that line【segments】do not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "do",
        "trans": [
            "static int NO_INTERSECTION Indicates that line segments【do】not intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "not",
        "trans": [
            "static int NO_INTERSECTION Indicates that line segments do【not】intersect",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "static int NO_INTERSECTION Indicates that line segments do not【intersect】",
            "　　　NO_INTERSECTION"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int POINT_INTERSECTION Indicates that line segments intersect in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】POINT_INTERSECTION Indicates that line segments intersect in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "POINT_INTERSECTION",
        "trans": [
            "static int【POINT_INTERSECTION】Indicates that line segments intersect in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "static int POINT_INTERSECTION【Indicates】that line segments intersect in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int POINT_INTERSECTION Indicates【that】line segments intersect in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "line",
        "trans": [
            "static int POINT_INTERSECTION Indicates that【line】segments intersect in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "static int POINT_INTERSECTION Indicates that line【segments】intersect in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "static int POINT_INTERSECTION Indicates that line segments【intersect】in a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static int POINT_INTERSECTION Indicates that line segments intersect【in】a single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int POINT_INTERSECTION Indicates that line segments intersect in【a】single point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "single",
        "trans": [
            "static int POINT_INTERSECTION Indicates that line segments intersect in a【single】point",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static int POINT_INTERSECTION Indicates that line segments intersect in a single【point】",
            "　　　POINT_INTERSECTION"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Geometry union(Geometry geom, PrecisionModel pm) Unions a collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static【Geometry】union(Geometry geom, PrecisionModel pm) Unions a collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "union(Geometry",
        "trans": [
            "static Geometry【union(Geometry】geom, PrecisionModel pm) Unions a collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "geom,",
        "trans": [
            "static Geometry union(Geometry【geom,】PrecisionModel pm) Unions a collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "PrecisionModel",
        "trans": [
            "static Geometry union(Geometry geom,【PrecisionModel】pm) Unions a collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "pm)",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel【pm)】Unions a collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "Unions",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm)【Unions】a collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions【a】collection of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a【collection】of geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a collection【of】geometries using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a collection of【geometries】using a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a collection of geometries【using】a given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a collection of geometries using【a】given precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a collection of geometries using a【given】precision model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a collection of geometries using a given【precision】model.",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "model.",
        "trans": [
            "static Geometry union(Geometry geom, PrecisionModel pm) Unions a collection of geometries using a given precision【model.】",
            "　　　联盟(几何几何学,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "MAX_ROBUST_DP_DIGITS",
        "trans": [
            "static int【MAX_ROBUST_DP_DIGITS】A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS【A】number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "number",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A【number】of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number【of】digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "digits",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of【digits】of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits【of】precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of【precision】which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision【which】leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "leaves",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which【leaves】some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "some",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves【some】computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "computational",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some【computational】\"headroom\" to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "\"headroom\"",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational【\"headroom\"】to ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\"【to】ensure robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "ensure",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to【ensure】robust evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "robust",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure【robust】evaluation of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "evaluation",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust【evaluation】of certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation【of】certain double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "certain",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of【certain】double-precision floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "double-precision",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain【double-precision】floating point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "floating",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision【floating】point geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating【point】geometric operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point【geometric】operations.",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "static int MAX_ROBUST_DP_DIGITS A number of digits of precision which leaves some computational \"headroom\" to ensure robust evaluation of certain double-precision floating point geometric【operations.】",
            "　　　MAX_ROBUST_DP_DIGITS"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static【Geometry】reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "reducePrecision(Geometry",
        "trans": [
            "static Geometry【reducePrecision(Geometry】geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "geom,",
        "trans": [
            "static Geometry reducePrecision(Geometry【geom,】PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "PrecisionModel",
        "trans": [
            "static Geometry reducePrecision(Geometry geom,【PrecisionModel】pm) Reduces the precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "pm)",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel【pm)】Reduces the precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "Reduces",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm)【Reduces】the precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces【the】precision of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the【precision】of a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision【of】a geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of【a】geometry by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a【geometry】by rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry【by】rounding and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "rounding",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by【rounding】and snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding【and】snapping it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "snapping",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and【snapping】it to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "it",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping【it】to the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it【to】the supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it to【the】supplied PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "supplied",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it to the【supplied】PrecisionModel.",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "PrecisionModel.",
        "trans": [
            "static Geometry reducePrecision(Geometry geom, PrecisionModel pm) Reduces the precision of a geometry by rounding and snapping it to the supplied【PrecisionModel.】",
            "　　　reducePrecision(几何几何学,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】w",
            "　　　双"
        ]
    },
    {
        "name": "w",
        "trans": [
            "double【w】",
            "　　　双"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】x",
            "　　　双"
        ]
    },
    {
        "name": "x",
        "trans": [
            "double【x】",
            "　　　双"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】y",
            "　　　双"
        ]
    },
    {
        "name": "y",
        "trans": [
            "double【y】",
            "　　　双"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static【Coordinate】intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "intersection(Coordinate",
        "trans": [
            "static Coordinate【intersection(Coordinate】p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "p1,",
        "trans": [
            "static Coordinate intersection(Coordinate【p1,】Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static Coordinate intersection(Coordinate p1,【Coordinate】p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "p2,",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate【p2,】Coordinate q1, Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2,【Coordinate】q1, Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "q1,",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate【q1,】Coordinate q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1,【Coordinate】q2) Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "q2)",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate【q2)】Computes an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2)【Computes】an intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes【an】intersection point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an【intersection】point between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection【point】between two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point【between】two lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between【two】lines using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "lines",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two【lines】using DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines【using】DD arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines using【DD】arithmetic.",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "arithmetic.",
        "trans": [
            "static Coordinate intersection(Coordinate p1, Coordinate p2, Coordinate q1, Coordinate q2) Computes an intersection point between two lines using DD【arithmetic.】",
            "　　　十字路口(协调p1,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "orientationIndex(Coordinate",
        "trans": [
            "static int【orientationIndex(Coordinate】p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "p1,",
        "trans": [
            "static int orientationIndex(Coordinate【p1,】Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static int orientationIndex(Coordinate p1,【Coordinate】p2, Coordinate q) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "p2,",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate【p2,】Coordinate q) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2,【Coordinate】q) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "q)",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate【q)】Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q)【Returns】the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns【the】index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the【index】of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index【of】the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of【the】direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "direction",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the【direction】of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction【of】the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of【the】point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the【point】q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "q",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point【q】relative to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q【relative】to a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative【to】a vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to【a】vector specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "vector",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a【vector】specified by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a vector【specified】by p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a vector specified【by】p1-p2.",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "p1-p2.",
        "trans": [
            "static int orientationIndex(Coordinate p1, Coordinate p2, Coordinate q) Returns the index of the direction of the point q relative to a vector specified by【p1-p2.】",
            "　　　orientationIndex(协调p1,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "orientationIndex(double",
        "trans": [
            "static int【orientationIndex(double】p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "p1x,",
        "trans": [
            "static int orientationIndex(double【p1x,】double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int orientationIndex(double p1x,【double】p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "p1y,",
        "trans": [
            "static int orientationIndex(double p1x, double【p1y,】double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int orientationIndex(double p1x, double p1y,【double】p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "p2x,",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double【p2x,】double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x,【double】p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "p2y,",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double【p2y,】double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y,【double】qx, double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "qx,",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double【qx,】double qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx,【double】qy) Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "qy)",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double【qy)】Returns the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy)【Returns】the index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns【the】index of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the【index】of the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index【of】the direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of【the】direction of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "direction",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the【direction】of the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction【of】the point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of【the】point q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the【point】q relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "q",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point【q】relative to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q【relative】to a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative【to】a vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to【a】vector specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "vector",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a【vector】specified by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector【specified】by p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified【by】p1-p2.",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "p1-p2.",
        "trans": [
            "static int orientationIndex(double p1x, double p1y, double p2x, double p2y, double qx, double qy) Returns the index of the direction of the point q relative to a vector specified by【p1-p2.】",
            "　　　orientationIndex(双p1x,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "signOfDet2x2(DD",
        "trans": [
            "static int【signOfDet2x2(DD】x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "x1,",
        "trans": [
            "static int signOfDet2x2(DD【x1,】DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static int signOfDet2x2(DD x1,【DD】y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "y1,",
        "trans": [
            "static int signOfDet2x2(DD x1, DD【y1,】DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1,【DD】x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "x2,",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD【x2,】DD y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2,【DD】y2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "y2)",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD【y2)】Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2)【Computes】the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes【the】sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "sign",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the【sign】of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign【of】the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of【the】determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "determinant",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the【determinant】of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant【of】the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of【the】2x2 matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "2x2",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the【2x2】matrix with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2【matrix】with the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix【with】the given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with【the】given entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the【given】entries.",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "entries.",
        "trans": [
            "static int signOfDet2x2(DD x1, DD y1, DD x2, DD y2) Computes the sign of the determinant of the 2x2 matrix with the given【entries.】",
            "　　　signOfDet2x2 (DD x1,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "signOfDet2x2(double",
        "trans": [
            "static int【signOfDet2x2(double】dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "dx1,",
        "trans": [
            "static int signOfDet2x2(double【dx1,】double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int signOfDet2x2(double dx1,【double】dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "dy1,",
        "trans": [
            "static int signOfDet2x2(double dx1, double【dy1,】double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1,【double】dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "dx2,",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double【dx2,】double dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2,【double】dy2) Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "dy2)",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double【dy2)】Computes the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2)【Computes】the sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes【the】sign of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "sign",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the【sign】of the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign【of】the determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of【the】determinant of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "determinant",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the【determinant】of the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant【of】the 2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of【the】2x2 matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "2x2",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the【2x2】matrix with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2【matrix】with the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix【with】the given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with【the】given entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the【given】entries.",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "entries.",
        "trans": [
            "static int signOfDet2x2(double dx1, double dy1, double dx2, double dy2) Computes the sign of the determinant of the 2x2 matrix with the given【entries.】",
            "　　　signOfDet2x2(双dx1,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double distance(Coordinate p0, Coordinate p1)",
            "　　　distance(Coordinate p0,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】distance(Coordinate p0, Coordinate p1)",
            "　　　distance(Coordinate p0,"
        ]
    },
    {
        "name": "distance(Coordinate",
        "trans": [
            "static double【distance(Coordinate】p0, Coordinate p1)",
            "　　　distance(Coordinate p0,"
        ]
    },
    {
        "name": "p0,",
        "trans": [
            "static double distance(Coordinate【p0,】Coordinate p1)",
            "　　　distance(Coordinate p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static double distance(Coordinate p0,【Coordinate】p1)",
            "　　　distance(Coordinate p0,"
        ]
    },
    {
        "name": "p1)",
        "trans": [
            "static double distance(Coordinate p0, Coordinate【p1)】",
            "　　　distance(Coordinate p0,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double distancePointSegment(Coordinate p, Coordinate A, Coordinate B)",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】distancePointSegment(Coordinate p, Coordinate A, Coordinate B)",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "distancePointSegment(Coordinate",
        "trans": [
            "static double【distancePointSegment(Coordinate】p, Coordinate A, Coordinate B)",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "p,",
        "trans": [
            "static double distancePointSegment(Coordinate【p,】Coordinate A, Coordinate B)",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static double distancePointSegment(Coordinate p,【Coordinate】A, Coordinate B)",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "A,",
        "trans": [
            "static double distancePointSegment(Coordinate p, Coordinate【A,】Coordinate B)",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static double distancePointSegment(Coordinate p, Coordinate A,【Coordinate】B)",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "B)",
        "trans": [
            "static double distancePointSegment(Coordinate p, Coordinate A, Coordinate【B)】",
            "　　　distancePointSegment(Coordinate p,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "distanceSegmentSegment(Coordinate",
        "trans": [
            "static double【distanceSegmentSegment(Coordinate】A, Coordinate B, Coordinate C, Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "A,",
        "trans": [
            "static double distanceSegmentSegment(Coordinate【A,】Coordinate B, Coordinate C, Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A,【Coordinate】B, Coordinate C, Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "B,",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate【B,】Coordinate C, Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B,【Coordinate】C, Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "C,",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate【C,】Coordinate D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C,【Coordinate】D) Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "D)",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate【D)】Computes the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D)【Computes】the distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes【the】distance between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes the【distance】between two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes the distance【between】two 3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes the distance between【two】3D segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "3D",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes the distance between two【3D】segments.",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "static double distanceSegmentSegment(Coordinate A, Coordinate B, Coordinate C, Coordinate D) Computes the distance between two 3D【segments.】",
            "　　　distanceSegmentSegment(协调,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int CLOCKWISE Deprecated. Use Orientation.CLOCKWISE instead.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】CLOCKWISE Deprecated. Use Orientation.CLOCKWISE instead.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "CLOCKWISE",
        "trans": [
            "static int【CLOCKWISE】Deprecated. Use Orientation.CLOCKWISE instead.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "Deprecated.",
        "trans": [
            "static int CLOCKWISE【Deprecated.】Use Orientation.CLOCKWISE instead.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "Use",
        "trans": [
            "static int CLOCKWISE Deprecated.【Use】Orientation.CLOCKWISE instead.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "Orientation.CLOCKWISE",
        "trans": [
            "static int CLOCKWISE Deprecated. Use【Orientation.CLOCKWISE】instead.",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "instead.",
        "trans": [
            "static int CLOCKWISE Deprecated. Use Orientation.CLOCKWISE【instead.】",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int COLLINEAR Deprecated. Use Orientation.COLLINEAR instead.",
            "　　　共线的"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】COLLINEAR Deprecated. Use Orientation.COLLINEAR instead.",
            "　　　共线的"
        ]
    },
    {
        "name": "COLLINEAR",
        "trans": [
            "static int【COLLINEAR】Deprecated. Use Orientation.COLLINEAR instead.",
            "　　　共线的"
        ]
    },
    {
        "name": "Deprecated.",
        "trans": [
            "static int COLLINEAR【Deprecated.】Use Orientation.COLLINEAR instead.",
            "　　　共线的"
        ]
    },
    {
        "name": "Use",
        "trans": [
            "static int COLLINEAR Deprecated.【Use】Orientation.COLLINEAR instead.",
            "　　　共线的"
        ]
    },
    {
        "name": "Orientation.COLLINEAR",
        "trans": [
            "static int COLLINEAR Deprecated. Use【Orientation.COLLINEAR】instead.",
            "　　　共线的"
        ]
    },
    {
        "name": "instead.",
        "trans": [
            "static int COLLINEAR Deprecated. Use Orientation.COLLINEAR【instead.】",
            "　　　共线的"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int COUNTERCLOCKWISE Deprecated. Use Orientation.COUNTERCLOCKWISE instead.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】COUNTERCLOCKWISE Deprecated. Use Orientation.COUNTERCLOCKWISE instead.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "COUNTERCLOCKWISE",
        "trans": [
            "static int【COUNTERCLOCKWISE】Deprecated. Use Orientation.COUNTERCLOCKWISE instead.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "Deprecated.",
        "trans": [
            "static int COUNTERCLOCKWISE【Deprecated.】Use Orientation.COUNTERCLOCKWISE instead.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "Use",
        "trans": [
            "static int COUNTERCLOCKWISE Deprecated.【Use】Orientation.COUNTERCLOCKWISE instead.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "Orientation.COUNTERCLOCKWISE",
        "trans": [
            "static int COUNTERCLOCKWISE Deprecated. Use【Orientation.COUNTERCLOCKWISE】instead.",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "instead.",
        "trans": [
            "static int COUNTERCLOCKWISE Deprecated. Use Orientation.COUNTERCLOCKWISE【instead.】",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int LEFT Deprecated. Use Orientation.LEFT instead.",
            "　　　左"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】LEFT Deprecated. Use Orientation.LEFT instead.",
            "　　　左"
        ]
    },
    {
        "name": "LEFT",
        "trans": [
            "static int【LEFT】Deprecated. Use Orientation.LEFT instead.",
            "　　　左"
        ]
    },
    {
        "name": "Deprecated.",
        "trans": [
            "static int LEFT【Deprecated.】Use Orientation.LEFT instead.",
            "　　　左"
        ]
    },
    {
        "name": "Use",
        "trans": [
            "static int LEFT Deprecated.【Use】Orientation.LEFT instead.",
            "　　　左"
        ]
    },
    {
        "name": "Orientation.LEFT",
        "trans": [
            "static int LEFT Deprecated. Use【Orientation.LEFT】instead.",
            "　　　左"
        ]
    },
    {
        "name": "instead.",
        "trans": [
            "static int LEFT Deprecated. Use Orientation.LEFT【instead.】",
            "　　　左"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int RIGHT Deprecated. Use Orientation.RIGHT instead.",
            "　　　正确的"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】RIGHT Deprecated. Use Orientation.RIGHT instead.",
            "　　　正确的"
        ]
    },
    {
        "name": "RIGHT",
        "trans": [
            "static int【RIGHT】Deprecated. Use Orientation.RIGHT instead.",
            "　　　正确的"
        ]
    },
    {
        "name": "Deprecated.",
        "trans": [
            "static int RIGHT【Deprecated.】Use Orientation.RIGHT instead.",
            "　　　正确的"
        ]
    },
    {
        "name": "Use",
        "trans": [
            "static int RIGHT Deprecated.【Use】Orientation.RIGHT instead.",
            "　　　正确的"
        ]
    },
    {
        "name": "Orientation.RIGHT",
        "trans": [
            "static int RIGHT Deprecated. Use【Orientation.RIGHT】instead.",
            "　　　正确的"
        ]
    },
    {
        "name": "instead.",
        "trans": [
            "static int RIGHT Deprecated. Use Orientation.RIGHT【instead.】",
            "　　　正确的"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int STRAIGHT Deprecated. Use Orientation.STRAIGHT instead.",
            "　　　直"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】STRAIGHT Deprecated. Use Orientation.STRAIGHT instead.",
            "　　　直"
        ]
    },
    {
        "name": "STRAIGHT",
        "trans": [
            "static int【STRAIGHT】Deprecated. Use Orientation.STRAIGHT instead.",
            "　　　直"
        ]
    },
    {
        "name": "Deprecated.",
        "trans": [
            "static int STRAIGHT【Deprecated.】Use Orientation.STRAIGHT instead.",
            "　　　直"
        ]
    },
    {
        "name": "Use",
        "trans": [
            "static int STRAIGHT Deprecated.【Use】Orientation.STRAIGHT instead.",
            "　　　直"
        ]
    },
    {
        "name": "Orientation.STRAIGHT",
        "trans": [
            "static int STRAIGHT Deprecated. Use【Orientation.STRAIGHT】instead.",
            "　　　直"
        ]
    },
    {
        "name": "instead.",
        "trans": [
            "static int STRAIGHT Deprecated. Use Orientation.STRAIGHT【instead.】",
            "　　　直"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】JTSVersion CURRENT_VERSION The current version number of the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "JTSVersion",
        "trans": [
            "static【JTSVersion】CURRENT_VERSION The current version number of the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "CURRENT_VERSION",
        "trans": [
            "static JTSVersion【CURRENT_VERSION】The current version number of the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static JTSVersion CURRENT_VERSION【The】current version number of the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "current",
        "trans": [
            "static JTSVersion CURRENT_VERSION The【current】version number of the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "version",
        "trans": [
            "static JTSVersion CURRENT_VERSION The current【version】number of the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "number",
        "trans": [
            "static JTSVersion CURRENT_VERSION The current version【number】of the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static JTSVersion CURRENT_VERSION The current version number【of】the JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static JTSVersion CURRENT_VERSION The current version number of【the】JTS API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "static JTSVersion CURRENT_VERSION The current version number of the【JTS】API.",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "API.",
        "trans": [
            "static JTSVersion CURRENT_VERSION The current version number of the JTS【API.】",
            "　　　CURRENT_VERSION"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MAJOR The major version number.",
            "　　　主要"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MAJOR The major version number.",
            "　　　主要"
        ]
    },
    {
        "name": "MAJOR",
        "trans": [
            "static int【MAJOR】The major version number.",
            "　　　主要"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int MAJOR【The】major version number.",
            "　　　主要"
        ]
    },
    {
        "name": "major",
        "trans": [
            "static int MAJOR The【major】version number.",
            "　　　主要"
        ]
    },
    {
        "name": "version",
        "trans": [
            "static int MAJOR The major【version】number.",
            "　　　主要"
        ]
    },
    {
        "name": "number.",
        "trans": [
            "static int MAJOR The major version【number.】",
            "　　　主要"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MINOR The minor version number.",
            "　　　小"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MINOR The minor version number.",
            "　　　小"
        ]
    },
    {
        "name": "MINOR",
        "trans": [
            "static int【MINOR】The minor version number.",
            "　　　小"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int MINOR【The】minor version number.",
            "　　　小"
        ]
    },
    {
        "name": "minor",
        "trans": [
            "static int MINOR The【minor】version number.",
            "　　　小"
        ]
    },
    {
        "name": "version",
        "trans": [
            "static int MINOR The minor【version】number.",
            "　　　小"
        ]
    },
    {
        "name": "number.",
        "trans": [
            "static int MINOR The minor version【number.】",
            "　　　小"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int PATCH The patch version number.",
            "　　　补丁"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】PATCH The patch version number.",
            "　　　补丁"
        ]
    },
    {
        "name": "PATCH",
        "trans": [
            "static int【PATCH】The patch version number.",
            "　　　补丁"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int PATCH【The】patch version number.",
            "　　　补丁"
        ]
    },
    {
        "name": "patch",
        "trans": [
            "static int PATCH The【patch】version number.",
            "　　　补丁"
        ]
    },
    {
        "name": "version",
        "trans": [
            "static int PATCH The patch【version】number.",
            "　　　补丁"
        ]
    },
    {
        "name": "number.",
        "trans": [
            "static int PATCH The patch version【number.】",
            "　　　补丁"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int DIFFERENCE The code for the Difference overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】DIFFERENCE The code for the Difference overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "DIFFERENCE",
        "trans": [
            "static int【DIFFERENCE】The code for the Difference overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int DIFFERENCE【The】code for the Difference overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "code",
        "trans": [
            "static int DIFFERENCE The【code】for the Difference overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int DIFFERENCE The code【for】the Difference overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int DIFFERENCE The code for【the】Difference overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "Difference",
        "trans": [
            "static int DIFFERENCE The code for the【Difference】overlay operation.",
            "　　　区别"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "static int DIFFERENCE The code for the Difference【overlay】operation.",
            "　　　区别"
        ]
    },
    {
        "name": "operation.",
        "trans": [
            "static int DIFFERENCE The code for the Difference overlay【operation.】",
            "　　　区别"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int INTERSECTION The code for the Intersection overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】INTERSECTION The code for the Intersection overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "INTERSECTION",
        "trans": [
            "static int【INTERSECTION】The code for the Intersection overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int INTERSECTION【The】code for the Intersection overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "code",
        "trans": [
            "static int INTERSECTION The【code】for the Intersection overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int INTERSECTION The code【for】the Intersection overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int INTERSECTION The code for【the】Intersection overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "Intersection",
        "trans": [
            "static int INTERSECTION The code for the【Intersection】overlay operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "static int INTERSECTION The code for the Intersection【overlay】operation.",
            "　　　十字路口"
        ]
    },
    {
        "name": "operation.",
        "trans": [
            "static int INTERSECTION The code for the Intersection overlay【operation.】",
            "　　　十字路口"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int SYMDIFFERENCE The code for the Symmetric Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】SYMDIFFERENCE The code for the Symmetric Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "SYMDIFFERENCE",
        "trans": [
            "static int【SYMDIFFERENCE】The code for the Symmetric Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int SYMDIFFERENCE【The】code for the Symmetric Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "code",
        "trans": [
            "static int SYMDIFFERENCE The【code】for the Symmetric Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int SYMDIFFERENCE The code【for】the Symmetric Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int SYMDIFFERENCE The code for【the】Symmetric Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "Symmetric",
        "trans": [
            "static int SYMDIFFERENCE The code for the【Symmetric】Difference overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "Difference",
        "trans": [
            "static int SYMDIFFERENCE The code for the Symmetric【Difference】overlay operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "static int SYMDIFFERENCE The code for the Symmetric Difference【overlay】operation.",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "operation.",
        "trans": [
            "static int SYMDIFFERENCE The code for the Symmetric Difference overlay【operation.】",
            "　　　SYMDIFFERENCE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int UNION The code for the Union overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】UNION The code for the Union overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "UNION",
        "trans": [
            "static int【UNION】The code for the Union overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int UNION【The】code for the Union overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "code",
        "trans": [
            "static int UNION The【code】for the Union overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int UNION The code【for】the Union overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int UNION The code for【the】Union overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "Union",
        "trans": [
            "static int UNION The code for the【Union】overlay operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "static int UNION The code for the Union【overlay】operation.",
            "　　　联盟"
        ]
    },
    {
        "name": "operation.",
        "trans": [
            "static int UNION The code for the Union overlay【operation.】",
            "　　　联盟"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int CLOCKWISE Constant representing clockwise orientation",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】CLOCKWISE Constant representing clockwise orientation",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "CLOCKWISE",
        "trans": [
            "static int【CLOCKWISE】Constant representing clockwise orientation",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "Constant",
        "trans": [
            "static int CLOCKWISE【Constant】representing clockwise orientation",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "static int CLOCKWISE Constant【representing】clockwise orientation",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "clockwise",
        "trans": [
            "static int CLOCKWISE Constant representing【clockwise】orientation",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int CLOCKWISE Constant representing clockwise【orientation】",
            "　　　顺时针方向"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int COUNTERCLOCKWISE Constant representing counterclockwise orientation",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】COUNTERCLOCKWISE Constant representing counterclockwise orientation",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "COUNTERCLOCKWISE",
        "trans": [
            "static int【COUNTERCLOCKWISE】Constant representing counterclockwise orientation",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "Constant",
        "trans": [
            "static int COUNTERCLOCKWISE【Constant】representing counterclockwise orientation",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "static int COUNTERCLOCKWISE Constant【representing】counterclockwise orientation",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "counterclockwise",
        "trans": [
            "static int COUNTERCLOCKWISE Constant representing【counterclockwise】orientation",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int COUNTERCLOCKWISE Constant representing counterclockwise【orientation】",
            "　　　逆时针方向"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int NONE Constant representing no orientation",
            "　　　没有一个"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】NONE Constant representing no orientation",
            "　　　没有一个"
        ]
    },
    {
        "name": "NONE",
        "trans": [
            "static int【NONE】Constant representing no orientation",
            "　　　没有一个"
        ]
    },
    {
        "name": "Constant",
        "trans": [
            "static int NONE【Constant】representing no orientation",
            "　　　没有一个"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "static int NONE Constant【representing】no orientation",
            "　　　没有一个"
        ]
    },
    {
        "name": "no",
        "trans": [
            "static int NONE Constant representing【no】orientation",
            "　　　没有一个"
        ]
    },
    {
        "name": "orientation",
        "trans": [
            "static int NONE Constant representing no【orientation】",
            "　　　没有一个"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double PI_OVER_2 The value of Pi/2",
            "　　　PI_OVER_2"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】PI_OVER_2 The value of Pi/2",
            "　　　PI_OVER_2"
        ]
    },
    {
        "name": "PI_OVER_2",
        "trans": [
            "static double【PI_OVER_2】The value of Pi/2",
            "　　　PI_OVER_2"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static double PI_OVER_2【The】value of Pi/2",
            "　　　PI_OVER_2"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static double PI_OVER_2 The【value】of Pi/2",
            "　　　PI_OVER_2"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static double PI_OVER_2 The value【of】Pi/2",
            "　　　PI_OVER_2"
        ]
    },
    {
        "name": "Pi/2",
        "trans": [
            "static double PI_OVER_2 The value of【Pi/2】",
            "　　　PI_OVER_2"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double PI_OVER_4 The value of Pi/4",
            "　　　PI_OVER_4"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】PI_OVER_4 The value of Pi/4",
            "　　　PI_OVER_4"
        ]
    },
    {
        "name": "PI_OVER_4",
        "trans": [
            "static double【PI_OVER_4】The value of Pi/4",
            "　　　PI_OVER_4"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static double PI_OVER_4【The】value of Pi/4",
            "　　　PI_OVER_4"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static double PI_OVER_4 The【value】of Pi/4",
            "　　　PI_OVER_4"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static double PI_OVER_4 The value【of】Pi/4",
            "　　　PI_OVER_4"
        ]
    },
    {
        "name": "Pi/4",
        "trans": [
            "static double PI_OVER_4 The value of【Pi/4】",
            "　　　PI_OVER_4"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double PI_TIMES_2 The value of 2*Pi",
            "　　　PI_TIMES_2"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】PI_TIMES_2 The value of 2*Pi",
            "　　　PI_TIMES_2"
        ]
    },
    {
        "name": "PI_TIMES_2",
        "trans": [
            "static double【PI_TIMES_2】The value of 2*Pi",
            "　　　PI_TIMES_2"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static double PI_TIMES_2【The】value of 2*Pi",
            "　　　PI_TIMES_2"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static double PI_TIMES_2 The【value】of 2*Pi",
            "　　　PI_TIMES_2"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static double PI_TIMES_2 The value【of】2*Pi",
            "　　　PI_TIMES_2"
        ]
    },
    {
        "name": "2*Pi",
        "trans": [
            "static double PI_TIMES_2 The value of【2*Pi】",
            "　　　PI_TIMES_2"
        ]
    },
    {
        "name": "ConstraintVertex",
        "trans": [
            "【ConstraintVertex】createVertex(Coordinate p, Segment constraintSeg)",
            "　　　createVertex (p,协调"
        ]
    },
    {
        "name": "createVertex(Coordinate",
        "trans": [
            "ConstraintVertex【createVertex(Coordinate】p, Segment constraintSeg)",
            "　　　createVertex (p,协调"
        ]
    },
    {
        "name": "p,",
        "trans": [
            "ConstraintVertex createVertex(Coordinate【p,】Segment constraintSeg)",
            "　　　createVertex (p,协调"
        ]
    },
    {
        "name": "Segment",
        "trans": [
            "ConstraintVertex createVertex(Coordinate p,【Segment】constraintSeg)",
            "　　　createVertex (p,协调"
        ]
    },
    {
        "name": "constraintSeg)",
        "trans": [
            "ConstraintVertex createVertex(Coordinate p, Segment【constraintSeg)】",
            "　　　createVertex (p,协调"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "findSplitPoint(Segment",
        "trans": [
            "Coordinate【findSplitPoint(Segment】seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "seg,",
        "trans": [
            "Coordinate findSplitPoint(Segment【seg,】Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "Coordinate findSplitPoint(Segment seg,【Coordinate】encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "encroachPt)",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate【encroachPt)】Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt)【Finds】a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds【a】point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "point",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a【point】at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "at",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point【at】which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at【which】to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which【to】split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "split",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to【split】an encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split【an】encroached segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "encroached",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an【encroached】segment to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached【segment】to allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment【to】allow the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "allow",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to【allow】the original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow【the】original segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "original",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the【original】segment to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original【segment】to appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment【to】appear as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "appear",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to【appear】as edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "as",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear【as】edges in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as【edges】in a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges【in】a constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in【a】constrained Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "constrained",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a【constrained】Delaunay triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "Delaunay",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained【Delaunay】triangulation.",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "triangulation.",
        "trans": [
            "Coordinate findSplitPoint(Segment seg, Coordinate encroachPt) Finds a point at which to split an encroached segment to allow the original segment to appear as edges in a constrained Delaunay【triangulation.】",
            "　　　findSplitPoint(部分凹陷,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Geometry union(Geometry coverage) Unions a valid polygonal coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static【Geometry】union(Geometry coverage) Unions a valid polygonal coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "union(Geometry",
        "trans": [
            "static Geometry【union(Geometry】coverage) Unions a valid polygonal coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "coverage)",
        "trans": [
            "static Geometry union(Geometry【coverage)】Unions a valid polygonal coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "Unions",
        "trans": [
            "static Geometry union(Geometry coverage)【Unions】a valid polygonal coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry union(Geometry coverage) Unions【a】valid polygonal coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "valid",
        "trans": [
            "static Geometry union(Geometry coverage) Unions a【valid】polygonal coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "polygonal",
        "trans": [
            "static Geometry union(Geometry coverage) Unions a valid【polygonal】coverage or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "coverage",
        "trans": [
            "static Geometry union(Geometry coverage) Unions a valid polygonal【coverage】or linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static Geometry union(Geometry coverage) Unions a valid polygonal coverage【or】linear network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "static Geometry union(Geometry coverage) Unions a valid polygonal coverage or【linear】network.",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "network.",
        "trans": [
            "static Geometry union(Geometry coverage) Unions a valid polygonal coverage or linear【network.】",
            "　　　联盟(几何覆盖)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String EMPTY",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】EMPTY",
            "　　　静态字符串"
        ]
    },
    {
        "name": "EMPTY",
        "trans": [
            "static String【EMPTY】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GEOMETRYCOLLECTION",
            "　　　GEOMETRYCOLLECTION"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GEOMETRYCOLLECTION",
            "　　　GEOMETRYCOLLECTION"
        ]
    },
    {
        "name": "GEOMETRYCOLLECTION",
        "trans": [
            "static String【GEOMETRYCOLLECTION】",
            "　　　GEOMETRYCOLLECTION"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String LINEARRING",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】LINEARRING",
            "　　　静态字符串"
        ]
    },
    {
        "name": "LINEARRING",
        "trans": [
            "static String【LINEARRING】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String LINESTRING",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】LINESTRING",
            "　　　静态字符串"
        ]
    },
    {
        "name": "LINESTRING",
        "trans": [
            "static String【LINESTRING】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String M",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】M",
            "　　　静态字符串"
        ]
    },
    {
        "name": "M",
        "trans": [
            "static String【M】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String MULTILINESTRING",
            "　　　MULTILINESTRING"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】MULTILINESTRING",
            "　　　MULTILINESTRING"
        ]
    },
    {
        "name": "MULTILINESTRING",
        "trans": [
            "static String【MULTILINESTRING】",
            "　　　MULTILINESTRING"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String MULTIPOINT",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】MULTIPOINT",
            "　　　静态字符串"
        ]
    },
    {
        "name": "MULTIPOINT",
        "trans": [
            "static String【MULTIPOINT】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String MULTIPOLYGON",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】MULTIPOLYGON",
            "　　　静态字符串"
        ]
    },
    {
        "name": "MULTIPOLYGON",
        "trans": [
            "static String【MULTIPOLYGON】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String POINT",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】POINT",
            "　　　静态字符串"
        ]
    },
    {
        "name": "POINT",
        "trans": [
            "static String【POINT】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String POLYGON",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】POLYGON",
            "　　　静态字符串"
        ]
    },
    {
        "name": "POLYGON",
        "trans": [
            "static String【POLYGON】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String Z",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】Z",
            "　　　静态字符串"
        ]
    },
    {
        "name": "Z",
        "trans": [
            "static String【Z】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String ZM",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】ZM",
            "　　　静态字符串"
        ]
    },
    {
        "name": "ZM",
        "trans": [
            "static String【ZM】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】OrdinateFormat DEFAULT The default formatter using the maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "OrdinateFormat",
        "trans": [
            "static【OrdinateFormat】DEFAULT The default formatter using the maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "DEFAULT",
        "trans": [
            "static OrdinateFormat【DEFAULT】The default formatter using the maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static OrdinateFormat DEFAULT【The】default formatter using the maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "default",
        "trans": [
            "static OrdinateFormat DEFAULT The【default】formatter using the maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "formatter",
        "trans": [
            "static OrdinateFormat DEFAULT The default【formatter】using the maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter【using】the maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using【the】maximum number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "maximum",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the【maximum】number of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "number",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum【number】of digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number【of】digits in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "digits",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of【digits】in the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of digits【in】the fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of digits in【the】fraction portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "fraction",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of digits in the【fraction】portion of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "portion",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of digits in the fraction【portion】of a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of digits in the fraction portion【of】a number.",
            "　　　默认的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of digits in the fraction portion of【a】number.",
            "　　　默认的"
        ]
    },
    {
        "name": "number.",
        "trans": [
            "static OrdinateFormat DEFAULT The default formatter using the maximum number of digits in the fraction portion of a【number.】",
            "　　　默认的"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MAX_FRACTION_DIGITS The maximum number of fraction digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MAX_FRACTION_DIGITS The maximum number of fraction digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "MAX_FRACTION_DIGITS",
        "trans": [
            "static int【MAX_FRACTION_DIGITS】The maximum number of fraction digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int MAX_FRACTION_DIGITS【The】maximum number of fraction digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "maximum",
        "trans": [
            "static int MAX_FRACTION_DIGITS The【maximum】number of fraction digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "number",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum【number】of fraction digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number【of】fraction digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "fraction",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of【fraction】digits to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "digits",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction【digits】to support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction digits【to】support output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "support",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction digits to【support】output of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "output",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction digits to support【output】of reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction digits to support output【of】reasonable ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "reasonable",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction digits to support output of【reasonable】ordinate values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction digits to support output of reasonable【ordinate】values.",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "values.",
        "trans": [
            "static int MAX_FRACTION_DIGITS The maximum number of fraction digits to support output of reasonable ordinate【values.】",
            "　　　MAX_FRACTION_DIGITS"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String REP_NAN The output representation of Double.NaN",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】REP_NAN The output representation of Double.NaN",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "REP_NAN",
        "trans": [
            "static String【REP_NAN】The output representation of Double.NaN",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String REP_NAN【The】output representation of Double.NaN",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "output",
        "trans": [
            "static String REP_NAN The【output】representation of Double.NaN",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "static String REP_NAN The output【representation】of Double.NaN",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static String REP_NAN The output representation【of】Double.NaN",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "Double.NaN",
        "trans": [
            "static String REP_NAN The output representation of【Double.NaN】",
            "　　　REP_NAN"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String REP_NEG_INF The output representation of Double.NEGATIVE_INFINITY",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】REP_NEG_INF The output representation of Double.NEGATIVE_INFINITY",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "REP_NEG_INF",
        "trans": [
            "static String【REP_NEG_INF】The output representation of Double.NEGATIVE_INFINITY",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String REP_NEG_INF【The】output representation of Double.NEGATIVE_INFINITY",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "output",
        "trans": [
            "static String REP_NEG_INF The【output】representation of Double.NEGATIVE_INFINITY",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "static String REP_NEG_INF The output【representation】of Double.NEGATIVE_INFINITY",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static String REP_NEG_INF The output representation【of】Double.NEGATIVE_INFINITY",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "Double.NEGATIVE_INFINITY",
        "trans": [
            "static String REP_NEG_INF The output representation of【Double.NEGATIVE_INFINITY】",
            "　　　REP_NEG_INF"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String REP_POS_INF The output representation of Double.POSITIVE_INFINITY",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】REP_POS_INF The output representation of Double.POSITIVE_INFINITY",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "REP_POS_INF",
        "trans": [
            "static String【REP_POS_INF】The output representation of Double.POSITIVE_INFINITY",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String REP_POS_INF【The】output representation of Double.POSITIVE_INFINITY",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "output",
        "trans": [
            "static String REP_POS_INF The【output】representation of Double.POSITIVE_INFINITY",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "static String REP_POS_INF The output【representation】of Double.POSITIVE_INFINITY",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static String REP_POS_INF The output representation【of】Double.POSITIVE_INFINITY",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "Double.POSITIVE_INFINITY",
        "trans": [
            "static String REP_POS_INF The output representation of【Double.POSITIVE_INFINITY】",
            "　　　REP_POS_INF"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int BIG_ENDIAN",
            "　　　BIG_ENDIAN"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】BIG_ENDIAN",
            "　　　BIG_ENDIAN"
        ]
    },
    {
        "name": "BIG_ENDIAN",
        "trans": [
            "static int【BIG_ENDIAN】",
            "　　　BIG_ENDIAN"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int LITTLE_ENDIAN",
            "　　　LITTLE_ENDIAN"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】LITTLE_ENDIAN",
            "　　　LITTLE_ENDIAN"
        ]
    },
    {
        "name": "LITTLE_ENDIAN",
        "trans": [
            "static int【LITTLE_ENDIAN】",
            "　　　LITTLE_ENDIAN"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】interface GeometryMapper.MapOp An interface for geometry functions used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "static【interface】GeometryMapper.MapOp An interface for geometry functions used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "GeometryMapper.MapOp",
        "trans": [
            "static interface【GeometryMapper.MapOp】An interface for geometry functions used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "An",
        "trans": [
            "static interface GeometryMapper.MapOp【An】interface for geometry functions used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "static interface GeometryMapper.MapOp An【interface】for geometry functions used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static interface GeometryMapper.MapOp An interface【for】geometry functions used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "static interface GeometryMapper.MapOp An interface for【geometry】functions used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "static interface GeometryMapper.MapOp An interface for geometry【functions】used for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "used",
        "trans": [
            "static interface GeometryMapper.MapOp An interface for geometry functions【used】for mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static interface GeometryMapper.MapOp An interface for geometry functions used【for】mapping.",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "mapping.",
        "trans": [
            "static interface GeometryMapper.MapOp An interface for geometry functions used for【mapping.】",
            "　　　GeometryMapper.MapOp"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "GeometryEditor.CoordinateOperation",
        "trans": [
            "static class【GeometryEditor.CoordinateOperation】A GeometryEditor.GeometryEditorOperation which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class GeometryEditor.CoordinateOperation【A】GeometryEditor.GeometryEditorOperation which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "GeometryEditor.GeometryEditorOperation",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A【GeometryEditor.GeometryEditorOperation】which edits the coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation【which】edits the coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "edits",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which【edits】the coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits【the】coordinate list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the【coordinate】list of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "list",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate【list】of a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list【of】a Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list of【a】Geometry.",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "static class GeometryEditor.CoordinateOperation A GeometryEditor.GeometryEditorOperation which edits the coordinate list of a【Geometry.】",
            "　　　GeometryEditor.CoordinateOperation"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "GeometryEditor.CoordinateSequenceOperation",
        "trans": [
            "static class【GeometryEditor.CoordinateSequenceOperation】A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation【A】GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "GeometryEditor.GeometryEditorOperation",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A【GeometryEditor.GeometryEditorOperation】which edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation【which】edits the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "edits",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which【edits】the CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits【the】CoordinateSequence of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the【CoordinateSequence】of a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence【of】a Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of【a】Geometry.",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "static class GeometryEditor.CoordinateSequenceOperation A GeometryEditor.GeometryEditorOperation which edits the CoordinateSequence of a【Geometry.】",
            "　　　GeometryEditor.CoordinateSequenceOperation"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】interface GeometryEditor.GeometryEditorOperation A interface which specifies an edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "static【interface】GeometryEditor.GeometryEditorOperation A interface which specifies an edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "GeometryEditor.GeometryEditorOperation",
        "trans": [
            "static interface【GeometryEditor.GeometryEditorOperation】A interface which specifies an edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation【A】interface which specifies an edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A【interface】which specifies an edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A interface【which】specifies an edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "specifies",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A interface which【specifies】an edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A interface which specifies【an】edit operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "edit",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A interface which specifies an【edit】operation for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A interface which specifies an edit【operation】for Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A interface which specifies an edit operation【for】Geometries.",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "Geometries.",
        "trans": [
            "static interface GeometryEditor.GeometryEditorOperation A interface which specifies an edit operation for【Geometries.】",
            "　　　GeometryEditor.GeometryEditorOperation"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "GeometryEditor.NoOpGeometryOperation",
        "trans": [
            "static class【GeometryEditor.NoOpGeometryOperation】A GeometryEditorOperation which does not modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation【A】GeometryEditorOperation which does not modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "GeometryEditorOperation",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A【GeometryEditorOperation】which does not modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation【which】does not modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "does",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which【does】not modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "not",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does【not】modify the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "modify",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not【modify】the input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify【the】input geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "input",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the【input】geometry.",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "static class GeometryEditor.NoOpGeometryOperation A GeometryEditorOperation which does not modify the input【geometry.】",
            "　　　GeometryEditor.NoOpGeometryOperation"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int DOUBLE Type code for arrays of type double.",
            "　　　双"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】DOUBLE Type code for arrays of type double.",
            "　　　双"
        ]
    },
    {
        "name": "DOUBLE",
        "trans": [
            "static int【DOUBLE】Type code for arrays of type double.",
            "　　　双"
        ]
    },
    {
        "name": "Type",
        "trans": [
            "static int DOUBLE【Type】code for arrays of type double.",
            "　　　双"
        ]
    },
    {
        "name": "code",
        "trans": [
            "static int DOUBLE Type【code】for arrays of type double.",
            "　　　双"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int DOUBLE Type code【for】arrays of type double.",
            "　　　双"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "static int DOUBLE Type code for【arrays】of type double.",
            "　　　双"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int DOUBLE Type code for arrays【of】type double.",
            "　　　双"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static int DOUBLE Type code for arrays of【type】double.",
            "　　　双"
        ]
    },
    {
        "name": "double.",
        "trans": [
            "static int DOUBLE Type code for arrays of type【double.】",
            "　　　双"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】PackedCoordinateSequenceFactory DOUBLE_FACTORY A factory using array type DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "PackedCoordinateSequenceFactory",
        "trans": [
            "static【PackedCoordinateSequenceFactory】DOUBLE_FACTORY A factory using array type DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "DOUBLE_FACTORY",
        "trans": [
            "static PackedCoordinateSequenceFactory【DOUBLE_FACTORY】A factory using array type DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static PackedCoordinateSequenceFactory DOUBLE_FACTORY【A】factory using array type DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "factory",
        "trans": [
            "static PackedCoordinateSequenceFactory DOUBLE_FACTORY A【factory】using array type DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static PackedCoordinateSequenceFactory DOUBLE_FACTORY A factory【using】array type DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "array",
        "trans": [
            "static PackedCoordinateSequenceFactory DOUBLE_FACTORY A factory using【array】type DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static PackedCoordinateSequenceFactory DOUBLE_FACTORY A factory using array【type】DOUBLE",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "DOUBLE",
        "trans": [
            "static PackedCoordinateSequenceFactory DOUBLE_FACTORY A factory using array type【DOUBLE】",
            "　　　DOUBLE_FACTORY"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int FLOAT Type code for arrays of type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】FLOAT Type code for arrays of type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "FLOAT",
        "trans": [
            "static int【FLOAT】Type code for arrays of type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "Type",
        "trans": [
            "static int FLOAT【Type】code for arrays of type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "code",
        "trans": [
            "static int FLOAT Type【code】for arrays of type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int FLOAT Type code【for】arrays of type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "static int FLOAT Type code for【arrays】of type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int FLOAT Type code for arrays【of】type float.",
            "　　　浮动"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static int FLOAT Type code for arrays of【type】float.",
            "　　　浮动"
        ]
    },
    {
        "name": "float.",
        "trans": [
            "static int FLOAT Type code for arrays of type【float.】",
            "　　　浮动"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】PackedCoordinateSequenceFactory FLOAT_FACTORY A factory using array type FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "PackedCoordinateSequenceFactory",
        "trans": [
            "static【PackedCoordinateSequenceFactory】FLOAT_FACTORY A factory using array type FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "FLOAT_FACTORY",
        "trans": [
            "static PackedCoordinateSequenceFactory【FLOAT_FACTORY】A factory using array type FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static PackedCoordinateSequenceFactory FLOAT_FACTORY【A】factory using array type FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "factory",
        "trans": [
            "static PackedCoordinateSequenceFactory FLOAT_FACTORY A【factory】using array type FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static PackedCoordinateSequenceFactory FLOAT_FACTORY A factory【using】array type FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "array",
        "trans": [
            "static PackedCoordinateSequenceFactory FLOAT_FACTORY A factory using【array】type FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static PackedCoordinateSequenceFactory FLOAT_FACTORY A factory using array【type】FLOAT",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "FLOAT",
        "trans": [
            "static PackedCoordinateSequenceFactory FLOAT_FACTORY A factory using array type【FLOAT】",
            "　　　FLOAT_FACTORY"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PackedCoordinateSequence.Double Packed coordinate sequence implementation based on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PackedCoordinateSequence.Double Packed coordinate sequence implementation based on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "PackedCoordinateSequence.Double",
        "trans": [
            "static class【PackedCoordinateSequence.Double】Packed coordinate sequence implementation based on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "Packed",
        "trans": [
            "static class PackedCoordinateSequence.Double【Packed】coordinate sequence implementation based on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "static class PackedCoordinateSequence.Double Packed【coordinate】sequence implementation based on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "static class PackedCoordinateSequence.Double Packed coordinate【sequence】implementation based on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "implementation",
        "trans": [
            "static class PackedCoordinateSequence.Double Packed coordinate sequence【implementation】based on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "based",
        "trans": [
            "static class PackedCoordinateSequence.Double Packed coordinate sequence implementation【based】on doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "on",
        "trans": [
            "static class PackedCoordinateSequence.Double Packed coordinate sequence implementation based【on】doubles",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "doubles",
        "trans": [
            "static class PackedCoordinateSequence.Double Packed coordinate sequence implementation based on【doubles】",
            "　　　PackedCoordinateSequence.Double"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PackedCoordinateSequence.Float Packed coordinate sequence implementation based on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PackedCoordinateSequence.Float Packed coordinate sequence implementation based on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "PackedCoordinateSequence.Float",
        "trans": [
            "static class【PackedCoordinateSequence.Float】Packed coordinate sequence implementation based on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "Packed",
        "trans": [
            "static class PackedCoordinateSequence.Float【Packed】coordinate sequence implementation based on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "static class PackedCoordinateSequence.Float Packed【coordinate】sequence implementation based on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "static class PackedCoordinateSequence.Float Packed coordinate【sequence】implementation based on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "implementation",
        "trans": [
            "static class PackedCoordinateSequence.Float Packed coordinate sequence【implementation】based on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "based",
        "trans": [
            "static class PackedCoordinateSequence.Float Packed coordinate sequence implementation【based】on floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "on",
        "trans": [
            "static class PackedCoordinateSequence.Float Packed coordinate sequence implementation based【on】floats",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "floats",
        "trans": [
            "static class PackedCoordinateSequence.Float Packed coordinate sequence implementation based on【floats】",
            "　　　PackedCoordinateSequence.Float"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "create(Coordinate[]",
        "trans": [
            "CoordinateSequence【create(Coordinate[]】coordinates) Returns a CoordinateArraySequence based on the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "coordinates)",
        "trans": [
            "CoordinateSequence create(Coordinate[]【coordinates)】Returns a CoordinateArraySequence based on the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates)【Returns】a CoordinateArraySequence based on the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns【a】CoordinateArraySequence based on the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "CoordinateArraySequence",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a【CoordinateArraySequence】based on the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "based",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence【based】on the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "on",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based【on】the given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on【the】given array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the【given】array (the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "array",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the given【array】(the array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "(the",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the given array【(the】array is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "array",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the given array (the【array】is not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the given array (the array【is】not copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "not",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the given array (the array is【not】copied).",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "copied).",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateArraySequence based on the given array (the array is not【copied).】",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "create(CoordinateSequence",
        "trans": [
            "CoordinateSequence【create(CoordinateSequence】coordSeq) Creates a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "coordSeq)",
        "trans": [
            "CoordinateSequence create(CoordinateSequence【coordSeq)】Creates a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq)【Creates】a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates【a】CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a【CoordinateSequence】which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "which",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence【which】is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which【is】a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is【a】copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "copy",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a【copy】of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy【of】the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of【the】given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of the【given】CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "CoordinateSequence.",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of the given【CoordinateSequence.】",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】create(int size, int dimension) The created sequence dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "create(int",
        "trans": [
            "CoordinateSequence【create(int】size, int dimension) The created sequence dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "size,",
        "trans": [
            "CoordinateSequence create(int【size,】int dimension) The created sequence dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "CoordinateSequence create(int size,【int】dimension) The created sequence dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension)",
        "trans": [
            "CoordinateSequence create(int size, int【dimension)】The created sequence dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "The",
        "trans": [
            "CoordinateSequence create(int size, int dimension)【The】created sequence dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "created",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The【created】sequence dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created【sequence】dimension is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created sequence【dimension】is clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "is",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created sequence dimension【is】clamped to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "clamped",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created sequence dimension is【clamped】to be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created sequence dimension is clamped【to】be <= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "be",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created sequence dimension is clamped to【be】<= 3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "<=",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created sequence dimension is clamped to be【<=】3.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "3.",
        "trans": [
            "CoordinateSequence create(int size, int dimension) The created sequence dimension is clamped to be <=【3.】",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "create(int",
        "trans": [
            "CoordinateSequence【create(int】size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "size,",
        "trans": [
            "CoordinateSequence create(int【size,】int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "CoordinateSequence create(int size,【int】dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension,",
        "trans": [
            "CoordinateSequence create(int size, int【dimension,】int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "CoordinateSequence create(int size, int dimension,【int】measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "measures)",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int【measures)】Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures)【Creates】a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates【a】CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a【CoordinateSequence】of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence【of】the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of【the】specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the【specified】size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "size",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified【size】and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size【and】dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and【dimension】with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension【with】measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "measure",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with【measure】support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "support.",
        "trans": [
            "CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure【support.】",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】CoordinateArraySequenceFactory instance() Returns the singleton instance of CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "CoordinateArraySequenceFactory",
        "trans": [
            "static【CoordinateArraySequenceFactory】instance() Returns the singleton instance of CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "instance()",
        "trans": [
            "static CoordinateArraySequenceFactory【instance()】Returns the singleton instance of CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static CoordinateArraySequenceFactory instance()【Returns】the singleton instance of CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static CoordinateArraySequenceFactory instance() Returns【the】singleton instance of CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "singleton",
        "trans": [
            "static CoordinateArraySequenceFactory instance() Returns the【singleton】instance of CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "instance",
        "trans": [
            "static CoordinateArraySequenceFactory instance() Returns the singleton【instance】of CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static CoordinateArraySequenceFactory instance() Returns the singleton instance【of】CoordinateArraySequenceFactory",
            "　　　实例()"
        ]
    },
    {
        "name": "CoordinateArraySequenceFactory",
        "trans": [
            "static CoordinateArraySequenceFactory instance() Returns the singleton instance of【CoordinateArraySequenceFactory】",
            "　　　实例()"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】measure(Geometry g1, Geometry g2) Computes the similarity measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "measure(Geometry",
        "trans": [
            "double【measure(Geometry】g1, Geometry g2) Computes the similarity measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "g1,",
        "trans": [
            "double measure(Geometry【g1,】Geometry g2) Computes the similarity measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "double measure(Geometry g1,【Geometry】g2) Computes the similarity measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "g2)",
        "trans": [
            "double measure(Geometry g1, Geometry【g2)】Computes the similarity measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "double measure(Geometry g1, Geometry g2)【Computes】the similarity measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "double measure(Geometry g1, Geometry g2) Computes【the】similarity measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "similarity",
        "trans": [
            "double measure(Geometry g1, Geometry g2) Computes the【similarity】measure between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "measure",
        "trans": [
            "double measure(Geometry g1, Geometry g2) Computes the similarity【measure】between two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "double measure(Geometry g1, Geometry g2) Computes the similarity measure【between】two geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "double measure(Geometry g1, Geometry g2) Computes the similarity measure between【two】geometries",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "double measure(Geometry g1, Geometry g2) Computes the similarity measure between two【geometries】",
            "　　　测量(几何g1,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】write(byte[] buf, int len)",
            "　　　写(byte[]缓冲区,"
        ]
    },
    {
        "name": "write(byte[]",
        "trans": [
            "void【write(byte[]】buf, int len)",
            "　　　写(byte[]缓冲区,"
        ]
    },
    {
        "name": "buf,",
        "trans": [
            "void write(byte[]【buf,】int len)",
            "　　　写(byte[]缓冲区,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "void write(byte[] buf,【int】len)",
            "　　　写(byte[]缓冲区,"
        ]
    },
    {
        "name": "len)",
        "trans": [
            "void write(byte[] buf, int【len)】",
            "　　　写(byte[]缓冲区,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbGeometryCollection",
            "　　　wkbGeometryCollection"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbGeometryCollection",
            "　　　wkbGeometryCollection"
        ]
    },
    {
        "name": "wkbGeometryCollection",
        "trans": [
            "static int【wkbGeometryCollection】",
            "　　　wkbGeometryCollection"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbLineString",
            "　　　wkbLineString"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbLineString",
            "　　　wkbLineString"
        ]
    },
    {
        "name": "wkbLineString",
        "trans": [
            "static int【wkbLineString】",
            "　　　wkbLineString"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbMultiLineString",
            "　　　wkbMultiLineString"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbMultiLineString",
            "　　　wkbMultiLineString"
        ]
    },
    {
        "name": "wkbMultiLineString",
        "trans": [
            "static int【wkbMultiLineString】",
            "　　　wkbMultiLineString"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbMultiPoint",
            "　　　wkbMultiPoint"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbMultiPoint",
            "　　　wkbMultiPoint"
        ]
    },
    {
        "name": "wkbMultiPoint",
        "trans": [
            "static int【wkbMultiPoint】",
            "　　　wkbMultiPoint"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbMultiPolygon",
            "　　　wkbMultiPolygon"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbMultiPolygon",
            "　　　wkbMultiPolygon"
        ]
    },
    {
        "name": "wkbMultiPolygon",
        "trans": [
            "static int【wkbMultiPolygon】",
            "　　　wkbMultiPolygon"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbNDR",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbNDR",
            "　　　静态int"
        ]
    },
    {
        "name": "wkbNDR",
        "trans": [
            "static int【wkbNDR】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that orders String objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "Comparator<String>",
        "trans": [
            "static【Comparator<String>】CASE_INSENSITIVE_ORDER A Comparator that orders String objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "CASE_INSENSITIVE_ORDER",
        "trans": [
            "static Comparator<String>【CASE_INSENSITIVE_ORDER】A Comparator that orders String objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER【A】Comparator that orders String objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "Comparator",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A【Comparator】that orders String objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A Comparator【that】orders String objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "orders",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that【orders】String objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that orders【String】objects as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "objects",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that orders String【objects】as by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "as",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that orders String objects【as】by compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that orders String objects as【by】compareToIgnoreCase.",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "compareToIgnoreCase.",
        "trans": [
            "static Comparator<String> CASE_INSENSITIVE_ORDER A Comparator that orders String objects as by【compareToIgnoreCase.】",
            "　　　CASE_INSENSITIVE_ORDER"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】read(byte[] buf) Reads buf.length bytes from the input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "read(byte[]",
        "trans": [
            "void【read(byte[]】buf) Reads buf.length bytes from the input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "buf)",
        "trans": [
            "void read(byte[]【buf)】Reads buf.length bytes from the input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "Reads",
        "trans": [
            "void read(byte[] buf)【Reads】buf.length bytes from the input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "buf.length",
        "trans": [
            "void read(byte[] buf) Reads【buf.length】bytes from the input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "bytes",
        "trans": [
            "void read(byte[] buf) Reads buf.length【bytes】from the input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "from",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes【from】the input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from【the】input stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "input",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the【input】stream and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "stream",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input【stream】and stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "and",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input stream【and】stores them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "stores",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input stream and【stores】them in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "them",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input stream and stores【them】in the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "in",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input stream and stores them【in】the supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input stream and stores them in【the】supplied buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "supplied",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input stream and stores them in the【supplied】buffer.",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "buffer.",
        "trans": [
            "void read(byte[] buf) Reads buf.length bytes from the input stream and stores them in the supplied【buffer.】",
            "　　　读(byte [] buf)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbPoint",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbPoint",
            "　　　静态int"
        ]
    },
    {
        "name": "wkbPoint",
        "trans": [
            "static int【wkbPoint】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbPolygon",
            "　　　wkbPolygon"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbPolygon",
            "　　　wkbPolygon"
        ]
    },
    {
        "name": "wkbPolygon",
        "trans": [
            "static int【wkbPolygon】",
            "　　　wkbPolygon"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int wkbXDR",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】wkbXDR",
            "　　　静态int"
        ]
    },
    {
        "name": "wkbXDR",
        "trans": [
            "static int【wkbXDR】",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】compare(T o1, T o2) Compares its two arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "compare(T",
        "trans": [
            "int【compare(T】o1, T o2) Compares its two arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "o1,",
        "trans": [
            "int compare(T【o1,】T o2) Compares its two arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "T",
        "trans": [
            "int compare(T o1,【T】o2) Compares its two arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "o2)",
        "trans": [
            "int compare(T o1, T【o2)】Compares its two arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "Compares",
        "trans": [
            "int compare(T o1, T o2)【Compares】its two arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "its",
        "trans": [
            "int compare(T o1, T o2) Compares【its】two arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "int compare(T o1, T o2) Compares its【two】arguments for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "arguments",
        "trans": [
            "int compare(T o1, T o2) Compares its two【arguments】for order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "for",
        "trans": [
            "int compare(T o1, T o2) Compares its two arguments【for】order.",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "order.",
        "trans": [
            "int compare(T o1, T o2) Compares its two arguments for【order.】",
            "　　　比较(T o1,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】p0 The coordinates of the vertices of the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "p0",
        "trans": [
            "Coordinate【p0】The coordinates of the vertices of the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "The",
        "trans": [
            "Coordinate p0【The】coordinates of the vertices of the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "Coordinate p0 The【coordinates】of the vertices of the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Coordinate p0 The coordinates【of】the vertices of the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate p0 The coordinates of【the】vertices of the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "Coordinate p0 The coordinates of the【vertices】of the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Coordinate p0 The coordinates of the vertices【of】the triangle",
            "　　　p0"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate p0 The coordinates of the vertices of【the】triangle",
            "　　　p0"
        ]
    },
    {
        "name": "triangle",
        "trans": [
            "Coordinate p0 The coordinates of the vertices of the【triangle】",
            "　　　p0"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】p1 The coordinates of the vertices of the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "p1",
        "trans": [
            "Coordinate【p1】The coordinates of the vertices of the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "The",
        "trans": [
            "Coordinate p1【The】coordinates of the vertices of the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "Coordinate p1 The【coordinates】of the vertices of the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Coordinate p1 The coordinates【of】the vertices of the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate p1 The coordinates of【the】vertices of the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "Coordinate p1 The coordinates of the【vertices】of the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Coordinate p1 The coordinates of the vertices【of】the triangle",
            "　　　p1"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate p1 The coordinates of the vertices of【the】triangle",
            "　　　p1"
        ]
    },
    {
        "name": "triangle",
        "trans": [
            "Coordinate p1 The coordinates of the vertices of the【triangle】",
            "　　　p1"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】p2 The coordinates of the vertices of the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "p2",
        "trans": [
            "Coordinate【p2】The coordinates of the vertices of the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "The",
        "trans": [
            "Coordinate p2【The】coordinates of the vertices of the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "Coordinate p2 The【coordinates】of the vertices of the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Coordinate p2 The coordinates【of】the vertices of the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate p2 The coordinates of【the】vertices of the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "Coordinate p2 The coordinates of the【vertices】of the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Coordinate p2 The coordinates of the vertices【of】the triangle",
            "　　　p2"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Coordinate p2 The coordinates of the vertices of【the】triangle",
            "　　　p2"
        ]
    },
    {
        "name": "triangle",
        "trans": [
            "Coordinate p2 The coordinates of the vertices of the【triangle】",
            "　　　p2"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "<T,U",
        "trans": [
            "static【<T,U】extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "static <T,U【extends】Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Comparable<?",
        "trans": [
            "static <T,U extends【Comparable<?】super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T,U extends Comparable<?【super】U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "U>>Comparator<T>",
        "trans": [
            "static <T,U extends Comparable<? super【U>>Comparator<T>】comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "comparing(Function<?",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T>【comparing(Function<?】super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<?【super】T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "T,?",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super【T,?】extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,?【extends】U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "U>",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends【U>】keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U>【keyExtractor)】Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Accepts",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor)【Accepts】a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts【a】function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a【function】that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function【that】extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that【extracts】a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts【a】Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Comparable",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a【Comparable】sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable【sort】key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "key",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort【key】from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "from",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key【from】a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from【a】type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a【type】T, and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "T,",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type【T,】and returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T,【and】returns a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "returns",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and【returns】a Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns【a】Comparator<T> that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a【Comparator<T>】that compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T>【that】compares by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "compares",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that【compares】by that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares【by】that sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by【that】sort key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that【sort】key.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "static <T,U extends Comparable<? super U>>Comparator<T> comparing(Function<? super T,? extends U> keyExtractor) Accepts a function that extracts a Comparable sort key from a type T, and returns a Comparator<T> that compares by that sort【key.】",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "<T,U>",
        "trans": [
            "static【<T,U>】Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T,U>【Comparator<T>】comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "comparing(Function<?",
        "trans": [
            "static <T,U> Comparator<T>【comparing(Function<?】super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<?【super】T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "T,?",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super【T,?】extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,?【extends】U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "U>",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends【U>】keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "keyExtractor,",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U>【keyExtractor,】Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Comparator<?",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor,【Comparator<?】super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<?【super】U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "U>",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super【U>】keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "keyComparator)",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U>【keyComparator)】Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Accepts",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator)【Accepts】a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts【a】function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a【function】that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function【that】extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that【extracts】a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts【a】sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a【sort】key from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "key",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort【key】from a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "from",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key【from】a type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from【a】type T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a【type】T, and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "T,",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type【T,】and returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T,【and】returns a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "returns",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and【returns】a Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns【a】Comparator<T> that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a【Comparator<T>】that compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T>【that】compares by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "compares",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that【compares】by that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares【by】that sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by【that】sort key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that【sort】key using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "key",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort【key】using the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key【using】the specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using【the】specified Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the【specified】Comparator.",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "Comparator.",
        "trans": [
            "static <T,U> Comparator<T> comparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified【Comparator.】",
            "　　　比较函数(< ?"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "<T>",
        "trans": [
            "static【<T>】Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T>【Comparator<T>】comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "comparingDouble(ToDoubleFunction<?",
        "trans": [
            "static <T> Comparator<T>【comparingDouble(ToDoubleFunction<?】super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<?【super】T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super【T>】keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T>【keyExtractor)】Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "Accepts",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor)【Accepts】a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts【a】function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a【function】that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function【that】extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that【extracts】a double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts【a】double sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a【double】sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double【sort】key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "key",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort【key】from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "from",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key【from】a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from【a】type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a【type】T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "T,",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type【T,】and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T,【and】returns a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "returns",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and【returns】a Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns【a】Comparator<T> that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a【Comparator<T>】that compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T>【that】compares by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "compares",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that【compares】by that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares【by】that sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by【that】sort key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that【sort】key.",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "static <T> Comparator<T> comparingDouble(ToDoubleFunction<? super T> keyExtractor) Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort【key.】",
            "　　　comparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "<T>",
        "trans": [
            "static【<T>】Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T>【Comparator<T>】comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "comparingInt(ToIntFunction<?",
        "trans": [
            "static <T> Comparator<T>【comparingInt(ToIntFunction<?】super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<?【super】T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super【T>】keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T>【keyExtractor)】Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "Accepts",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor)【Accepts】a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts【a】function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a【function】that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function【that】extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that【extracts】an int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts【an】int sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an【int】sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int【sort】key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "key",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort【key】from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "from",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key【from】a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from【a】type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a【type】T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "T,",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type【T,】and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T,【and】returns a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "returns",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and【returns】a Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns【a】Comparator<T> that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a【Comparator<T>】that compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T>【that】compares by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "compares",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that【compares】by that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares【by】that sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by【that】sort key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that【sort】key.",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "static <T> Comparator<T> comparingInt(ToIntFunction<? super T> keyExtractor) Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort【key.】",
            "　　　comparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "<T>",
        "trans": [
            "static【<T>】Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T>【Comparator<T>】comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "comparingLong(ToLongFunction<?",
        "trans": [
            "static <T> Comparator<T>【comparingLong(ToLongFunction<?】super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<?【super】T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super【T>】keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T>【keyExtractor)】Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "Accepts",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor)【Accepts】a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts【a】function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a【function】that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function【that】extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that【extracts】a long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts【a】long sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "long",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a【long】sort key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long【sort】key from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "key",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort【key】from a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "from",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key【from】a type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from【a】type T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "type",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a【type】T, and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "T,",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type【T,】and returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T,【and】returns a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "returns",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and【returns】a Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns【a】Comparator<T> that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a【Comparator<T>】that compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T>【that】compares by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "compares",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that【compares】by that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares【by】that sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by【that】sort key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that【sort】key.",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "static <T> Comparator<T> comparingLong(ToLongFunction<? super T> keyExtractor) Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort【key.】",
            "　　　comparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】equals(Object obj) Indicates whether some other object is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "equals(Object",
        "trans": [
            "boolean【equals(Object】obj) Indicates whether some other object is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "boolean equals(Object【obj)】Indicates whether some other object is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "Indicates",
        "trans": [
            "boolean equals(Object obj)【Indicates】whether some other object is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean equals(Object obj) Indicates【whether】some other object is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "some",
        "trans": [
            "boolean equals(Object obj) Indicates whether【some】other object is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "other",
        "trans": [
            "boolean equals(Object obj) Indicates whether some【other】object is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "object",
        "trans": [
            "boolean equals(Object obj) Indicates whether some other【object】is \"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "boolean equals(Object obj) Indicates whether some other object【is】\"equal to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "\"equal",
        "trans": [
            "boolean equals(Object obj) Indicates whether some other object is【\"equal】to\" this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "to\"",
        "trans": [
            "boolean equals(Object obj) Indicates whether some other object is \"equal【to\"】this comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "this",
        "trans": [
            "boolean equals(Object obj) Indicates whether some other object is \"equal to\"【this】comparator.",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "comparator.",
        "trans": [
            "boolean equals(Object obj) Indicates whether some other object is \"equal to\" this【comparator.】",
            "　　　=(对象obj)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "<T",
        "trans": [
            "static【<T】extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "static <T【extends】Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "Comparable<?",
        "trans": [
            "static <T extends【Comparable<?】super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T extends Comparable<?【super】T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "T>>Comparator<T>",
        "trans": [
            "static <T extends Comparable<? super【T>>Comparator<T>】naturalOrder() Returns a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "naturalOrder()",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T>【naturalOrder()】Returns a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder()【Returns】a comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns【a】comparator that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a【comparator】that compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator【that】compares Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "compares",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that【compares】Comparable objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "Comparable",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares【Comparable】objects in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "objects",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable【objects】in natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects【in】natural order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "natural",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects in【natural】order.",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "order.",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> naturalOrder() Returns a comparator that compares Comparable objects in natural【order.】",
            "　　　naturalOrder ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "<T>",
        "trans": [
            "static【<T>】Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T>【Comparator<T>】nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "nullsFirst(Comparator<?",
        "trans": [
            "static <T> Comparator<T>【nullsFirst(Comparator<?】super T> comparator) Returns a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<?【super】T> comparator) Returns a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super【T>】comparator) Returns a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "comparator)",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T>【comparator)】Returns a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator)【Returns】a null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns【a】null-friendly comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "null-friendly",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a【null-friendly】comparator that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly【comparator】that considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator【that】considers null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "considers",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that【considers】null to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "null",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers【null】to be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null【to】be less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to【be】less than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "less",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be【less】than non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "than",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be less【than】non-null.",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "non-null.",
        "trans": [
            "static <T> Comparator<T> nullsFirst(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be less than【non-null.】",
            "　　　nullsFirst(比较< ?"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "<T>",
        "trans": [
            "static【<T>】Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "static <T>【Comparator<T>】nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "nullsLast(Comparator<?",
        "trans": [
            "static <T> Comparator<T>【nullsLast(Comparator<?】super T> comparator) Returns a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<?【super】T> comparator) Returns a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super【T>】comparator) Returns a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "comparator)",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T>【comparator)】Returns a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator)【Returns】a null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns【a】null-friendly comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "null-friendly",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a【null-friendly】comparator that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly【comparator】that considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator【that】considers null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "considers",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that【considers】null to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "null",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers【null】to be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null【to】be greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to【be】greater than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "greater",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be【greater】than non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "than",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be greater【than】non-null.",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "non-null.",
        "trans": [
            "static <T> Comparator<T> nullsLast(Comparator<? super T> comparator) Returns a null-friendly comparator that considers null to be greater than【non-null.】",
            "　　　nullsLast(比较< ?"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】Comparator<T> reversed() Returns a comparator that imposes the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "default【Comparator<T>】reversed() Returns a comparator that imposes the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "reversed()",
        "trans": [
            "default Comparator<T>【reversed()】Returns a comparator that imposes the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "default Comparator<T> reversed()【Returns】a comparator that imposes the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> reversed() Returns【a】comparator that imposes the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "default Comparator<T> reversed() Returns a【comparator】that imposes the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "that",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator【that】imposes the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "imposes",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator that【imposes】the reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator that imposes【the】reverse ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "reverse",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator that imposes the【reverse】ordering of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "ordering",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator that imposes the reverse【ordering】of this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator that imposes the reverse ordering【of】this comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator that imposes the reverse ordering of【this】comparator.",
            "　　　逆转()"
        ]
    },
    {
        "name": "comparator.",
        "trans": [
            "default Comparator<T> reversed() Returns a comparator that imposes the reverse ordering of this【comparator.】",
            "　　　逆转()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】<T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "<T",
        "trans": [
            "static【<T】extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "static <T【extends】Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "Comparable<?",
        "trans": [
            "static <T extends【Comparable<?】super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "super",
        "trans": [
            "static <T extends Comparable<?【super】T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "T>>Comparator<T>",
        "trans": [
            "static <T extends Comparable<? super【T>>Comparator<T>】reverseOrder() Returns a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "reverseOrder()",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T>【reverseOrder()】Returns a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder()【Returns】a comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns【a】comparator that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a【comparator】that imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator【that】imposes the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "imposes",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that【imposes】the reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes【the】reverse of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "reverse",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the【reverse】of the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse【of】the natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of【the】natural ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "natural",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of the【natural】ordering.",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "ordering.",
        "trans": [
            "static <T extends Comparable<? super T>>Comparator<T> reverseOrder() Returns a comparator that imposes the reverse of the natural【ordering.】",
            "　　　reverseOrder ()"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】Comparator<T> thenComparing(Comparator<? super T> other) Returns a lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "default【Comparator<T>】thenComparing(Comparator<? super T> other) Returns a lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "thenComparing(Comparator<?",
        "trans": [
            "default Comparator<T>【thenComparing(Comparator<?】super T> other) Returns a lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<?【super】T> other) Returns a lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super【T>】other) Returns a lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "other)",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T>【other)】Returns a lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T> other)【Returns】a lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T> other) Returns【a】lexicographic-order comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "lexicographic-order",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T> other) Returns a【lexicographic-order】comparator with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T> other) Returns a lexicographic-order【comparator】with another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T> other) Returns a lexicographic-order comparator【with】another comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "another",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T> other) Returns a lexicographic-order comparator with【another】comparator.",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "comparator.",
        "trans": [
            "default Comparator<T> thenComparing(Comparator<? super T> other) Returns a lexicographic-order comparator with another【comparator.】",
            "　　　thenComparing(比较< ?"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】<U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "<U",
        "trans": [
            "default【<U】extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "default <U【extends】Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "Comparable<?",
        "trans": [
            "default <U extends【Comparable<?】super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default <U extends Comparable<?【super】U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "U>>Comparator<T>",
        "trans": [
            "default <U extends Comparable<? super【U>>Comparator<T>】thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "thenComparing(Function<?",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T>【thenComparing(Function<?】super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<?【super】T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "T,?",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super【T,?】extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,?【extends】U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "U>",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends【U>】keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U>【keyExtractor)】Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor)【Returns】a lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns【a】lexicographic-order comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "lexicographic-order",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a【lexicographic-order】comparator with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order【comparator】with a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator【with】a function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with【a】function that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a【function】that extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function【that】extracts a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that【extracts】a Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts【a】Comparable sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "Comparable",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a【Comparable】sort key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable【sort】key.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "default <U extends Comparable<? super U>>Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a Comparable sort【key.】",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int NE",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】NE",
            "　　　静态int"
        ]
    },
    {
        "name": "NE",
        "trans": [
            "static int【NE】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int NW",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】NW",
            "　　　静态int"
        ]
    },
    {
        "name": "NW",
        "trans": [
            "static int【NW】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int SE",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】SE",
            "　　　静态int"
        ]
    },
    {
        "name": "SE",
        "trans": [
            "static int【SE】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int SW",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】SW",
            "　　　静态int"
        ]
    },
    {
        "name": "SW",
        "trans": [
            "static int【SW】",
            "　　　静态int"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】<U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "<U>",
        "trans": [
            "default【<U>】Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "default <U>【Comparator<T>】thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "thenComparing(Function<?",
        "trans": [
            "default <U> Comparator<T>【thenComparing(Function<?】super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<?【super】T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "T,?",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super【T,?】extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "extends",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,?【extends】U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "U>",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends【U>】keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "keyExtractor,",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U>【keyExtractor,】Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "Comparator<?",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor,【Comparator<?】super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<?【super】U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "U>",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super【U>】keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "keyComparator)",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U>【keyComparator)】Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator)【Returns】a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns【a】lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "lexicographic-order",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a【lexicographic-order】comparator with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order【comparator】with a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator【with】a function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with【a】function that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a【function】that extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function【that】extracts a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that【extracts】a key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts【a】key to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "key",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a【key】to be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "to",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key【to】be compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "be",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to【be】compared with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "compared",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be【compared】with the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared【with】the given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "the",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with【the】given Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "given",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the【given】Comparator.",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "Comparator.",
        "trans": [
            "default <U> Comparator<T> thenComparing(Function<? super T,? extends U> keyExtractor, Comparator<? super U> keyComparator) Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given【Comparator.】",
            "　　　thenComparing(函数< ?"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "default【Comparator<T>】thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "thenComparingDouble(ToDoubleFunction<?",
        "trans": [
            "default Comparator<T>【thenComparingDouble(ToDoubleFunction<?】super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<?【super】T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super【T>】keyExtractor) Returns a lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T>【keyExtractor)】Returns a lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor)【Returns】a lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns【a】lexicographic-order comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "lexicographic-order",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a【lexicographic-order】comparator with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order【comparator】with a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator【with】a function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with【a】function that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a【function】that extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function【that】extracts a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that【extracts】a double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts【a】double sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "double",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a【double】sort key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a double【sort】key.",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "default Comparator<T> thenComparingDouble(ToDoubleFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a double sort【key.】",
            "　　　thenComparingDouble (ToDoubleFunction < ?"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "default【Comparator<T>】thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "thenComparingInt(ToIntFunction<?",
        "trans": [
            "default Comparator<T>【thenComparingInt(ToIntFunction<?】super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<?【super】T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super【T>】keyExtractor) Returns a lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T>【keyExtractor)】Returns a lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor)【Returns】a lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns【a】lexicographic-order comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "lexicographic-order",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a【lexicographic-order】comparator with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order【comparator】with a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator【with】a function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with【a】function that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a【function】that extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function【that】extracts a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that【extracts】a int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts【a】int sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "int",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a【int】sort key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a int【sort】key.",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "default Comparator<T> thenComparingInt(ToIntFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a int sort【key.】",
            "　　　thenComparingInt (ToIntFunction < ?"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "Comparator<T>",
        "trans": [
            "default【Comparator<T>】thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "thenComparingLong(ToLongFunction<?",
        "trans": [
            "default Comparator<T>【thenComparingLong(ToLongFunction<?】super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "super",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<?【super】T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "T>",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super【T>】keyExtractor) Returns a lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "keyExtractor)",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T>【keyExtractor)】Returns a lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor)【Returns】a lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns【a】lexicographic-order comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "lexicographic-order",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a【lexicographic-order】comparator with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "comparator",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order【comparator】with a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator【with】a function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with【a】function that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "function",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a【function】that extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "that",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function【that】extracts a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that【extracts】a long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts【a】long sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "long",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a【long】sort key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "sort",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a long【sort】key.",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "key.",
        "trans": [
            "default Comparator<T> thenComparingLong(ToLongFunction<? super T> keyExtractor) Returns a lexicographic-order comparator with a function that extracts a long sort【key.】",
            "　　　thenComparingLong (ToLongFunction < ?"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PrecisionModel.Type The types of Precision Model which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PrecisionModel.Type The types of Precision Model which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "PrecisionModel.Type",
        "trans": [
            "static class【PrecisionModel.Type】The types of Precision Model which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static class PrecisionModel.Type【The】types of Precision Model which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "types",
        "trans": [
            "static class PrecisionModel.Type The【types】of Precision Model which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class PrecisionModel.Type The types【of】Precision Model which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "Precision",
        "trans": [
            "static class PrecisionModel.Type The types of【Precision】Model which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "Model",
        "trans": [
            "static class PrecisionModel.Type The types of Precision【Model】which JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static class PrecisionModel.Type The types of Precision Model【which】JTS supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "static class PrecisionModel.Type The types of Precision Model which【JTS】supports.",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "supports.",
        "trans": [
            "static class PrecisionModel.Type The types of Precision Model which JTS【supports.】",
            "　　　PrecisionModel.Type"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int LEFT Specifies that a location is to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】LEFT Specifies that a location is to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "LEFT",
        "trans": [
            "static int【LEFT】Specifies that a location is to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "Specifies",
        "trans": [
            "static int LEFT【Specifies】that a location is to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int LEFT Specifies【that】a location is to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int LEFT Specifies that【a】location is to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "location",
        "trans": [
            "static int LEFT Specifies that a【location】is to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static int LEFT Specifies that a location【is】to the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int LEFT Specifies that a location is【to】the left of a component",
            "　　　左"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int LEFT Specifies that a location is to【the】left of a component",
            "　　　左"
        ]
    },
    {
        "name": "left",
        "trans": [
            "static int LEFT Specifies that a location is to the【left】of a component",
            "　　　左"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int LEFT Specifies that a location is to the left【of】a component",
            "　　　左"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int LEFT Specifies that a location is to the left of【a】component",
            "　　　左"
        ]
    },
    {
        "name": "component",
        "trans": [
            "static int LEFT Specifies that a location is to the left of a【component】",
            "　　　左"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int ON Specifies that a location is on a component",
            "　　　在"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】ON Specifies that a location is on a component",
            "　　　在"
        ]
    },
    {
        "name": "ON",
        "trans": [
            "static int【ON】Specifies that a location is on a component",
            "　　　在"
        ]
    },
    {
        "name": "Specifies",
        "trans": [
            "static int ON【Specifies】that a location is on a component",
            "　　　在"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int ON Specifies【that】a location is on a component",
            "　　　在"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int ON Specifies that【a】location is on a component",
            "　　　在"
        ]
    },
    {
        "name": "location",
        "trans": [
            "static int ON Specifies that a【location】is on a component",
            "　　　在"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static int ON Specifies that a location【is】on a component",
            "　　　在"
        ]
    },
    {
        "name": "on",
        "trans": [
            "static int ON Specifies that a location is【on】a component",
            "　　　在"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int ON Specifies that a location is on【a】component",
            "　　　在"
        ]
    },
    {
        "name": "component",
        "trans": [
            "static int ON Specifies that a location is on a【component】",
            "　　　在"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int RIGHT Specifies that a location is to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】RIGHT Specifies that a location is to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "RIGHT",
        "trans": [
            "static int【RIGHT】Specifies that a location is to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "Specifies",
        "trans": [
            "static int RIGHT【Specifies】that a location is to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int RIGHT Specifies【that】a location is to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int RIGHT Specifies that【a】location is to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "location",
        "trans": [
            "static int RIGHT Specifies that a【location】is to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static int RIGHT Specifies that a location【is】to the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int RIGHT Specifies that a location is【to】the right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int RIGHT Specifies that a location is to【the】right of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "right",
        "trans": [
            "static int RIGHT Specifies that a location is to the【right】of a component",
            "　　　正确的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int RIGHT Specifies that a location is to the right【of】a component",
            "　　　正确的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int RIGHT Specifies that a location is to the right of【a】component",
            "　　　正确的"
        ]
    },
    {
        "name": "component",
        "trans": [
            "static int RIGHT Specifies that a location is to the right of a【component】",
            "　　　正确的"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "【Geometry】map(Geometry g) Computes a new geometry value.",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "map(Geometry",
        "trans": [
            "Geometry【map(Geometry】g) Computes a new geometry value.",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "g)",
        "trans": [
            "Geometry map(Geometry【g)】Computes a new geometry value.",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "Geometry map(Geometry g)【Computes】a new geometry value.",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Geometry map(Geometry g) Computes【a】new geometry value.",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "new",
        "trans": [
            "Geometry map(Geometry g) Computes a【new】geometry value.",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "Geometry map(Geometry g) Computes a new【geometry】value.",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "value.",
        "trans": [
            "Geometry map(Geometry g) Computes a new geometry【value.】",
            "　　　几何映射(g)"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "【Geometry】edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "edit(Geometry",
        "trans": [
            "Geometry【edit(Geometry】geometry, GeometryFactory factory) Edits a Geometry by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "geometry,",
        "trans": [
            "Geometry edit(Geometry【geometry,】GeometryFactory factory) Edits a Geometry by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "GeometryFactory",
        "trans": [
            "Geometry edit(Geometry geometry,【GeometryFactory】factory) Edits a Geometry by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "factory)",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory【factory)】Edits a Geometry by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "Edits",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory)【Edits】a Geometry by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits【a】Geometry by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a【Geometry】by returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "by",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry【by】returning a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "returning",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by【returning】a new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by returning【a】new Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "new",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by returning a【new】Geometry with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by returning a new【Geometry】with a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by returning a new Geometry【with】a modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by returning a new Geometry with【a】modification.",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "modification.",
        "trans": [
            "Geometry edit(Geometry geometry, GeometryFactory factory) Edits a Geometry by returning a new Geometry with a【modification.】",
            "　　　编辑(几何几何,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】p0",
            "　　　协调"
        ]
    },
    {
        "name": "p0",
        "trans": [
            "Coordinate【p0】",
            "　　　协调"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】p1",
            "　　　协调"
        ]
    },
    {
        "name": "p1",
        "trans": [
            "Coordinate【p1】",
            "　　　协调"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int BOUNDARY The location value for the boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】BOUNDARY The location value for the boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "BOUNDARY",
        "trans": [
            "static int【BOUNDARY】The location value for the boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int BOUNDARY【The】location value for the boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "location",
        "trans": [
            "static int BOUNDARY The【location】value for the boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int BOUNDARY The location【value】for the boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int BOUNDARY The location value【for】the boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int BOUNDARY The location value for【the】boundary of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "static int BOUNDARY The location value for the【boundary】of a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int BOUNDARY The location value for the boundary【of】a geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int BOUNDARY The location value for the boundary of【a】geometry.",
            "　　　边界"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "static int BOUNDARY The location value for the boundary of a【geometry.】",
            "　　　边界"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int EXTERIOR The location value for the exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】EXTERIOR The location value for the exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "EXTERIOR",
        "trans": [
            "static int【EXTERIOR】The location value for the exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int EXTERIOR【The】location value for the exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "location",
        "trans": [
            "static int EXTERIOR The【location】value for the exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int EXTERIOR The location【value】for the exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int EXTERIOR The location value【for】the exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int EXTERIOR The location value for【the】exterior of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "exterior",
        "trans": [
            "static int EXTERIOR The location value for the【exterior】of a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int EXTERIOR The location value for the exterior【of】a geometry.",
            "　　　外"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int EXTERIOR The location value for the exterior of【a】geometry.",
            "　　　外"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "static int EXTERIOR The location value for the exterior of a【geometry.】",
            "　　　外"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int INTERIOR The location value for the interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】INTERIOR The location value for the interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "INTERIOR",
        "trans": [
            "static int【INTERIOR】The location value for the interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int INTERIOR【The】location value for the interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "location",
        "trans": [
            "static int INTERIOR The【location】value for the interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int INTERIOR The location【value】for the interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int INTERIOR The location value【for】the interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int INTERIOR The location value for【the】interior of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "interior",
        "trans": [
            "static int INTERIOR The location value for the【interior】of a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int INTERIOR The location value for the interior【of】a geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int INTERIOR The location value for the interior of【a】geometry.",
            "　　　室内"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "static int INTERIOR The location value for the interior of a【geometry.】",
            "　　　室内"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int NONE Used for uninitialized location values.",
            "　　　没有一个"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】NONE Used for uninitialized location values.",
            "　　　没有一个"
        ]
    },
    {
        "name": "NONE",
        "trans": [
            "static int【NONE】Used for uninitialized location values.",
            "　　　没有一个"
        ]
    },
    {
        "name": "Used",
        "trans": [
            "static int NONE【Used】for uninitialized location values.",
            "　　　没有一个"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int NONE Used【for】uninitialized location values.",
            "　　　没有一个"
        ]
    },
    {
        "name": "uninitialized",
        "trans": [
            "static int NONE Used for【uninitialized】location values.",
            "　　　没有一个"
        ]
    },
    {
        "name": "location",
        "trans": [
            "static int NONE Used for uninitialized【location】values.",
            "　　　没有一个"
        ]
    },
    {
        "name": "values.",
        "trans": [
            "static int NONE Used for uninitialized location【values.】",
            "　　　没有一个"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MINIMUM_VALID_SIZE The minimum number of vertices allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MINIMUM_VALID_SIZE The minimum number of vertices allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "MINIMUM_VALID_SIZE",
        "trans": [
            "static int【MINIMUM_VALID_SIZE】The minimum number of vertices allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int MINIMUM_VALID_SIZE【The】minimum number of vertices allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "minimum",
        "trans": [
            "static int MINIMUM_VALID_SIZE The【minimum】number of vertices allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "number",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum【number】of vertices allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number【of】vertices allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of【vertices】allowed in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "allowed",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices【allowed】in a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices allowed【in】a valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices allowed in【a】valid non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "valid",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices allowed in a【valid】non-empty ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "non-empty",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices allowed in a valid【non-empty】ring (= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "ring",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices allowed in a valid non-empty【ring】(= 4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "(=",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices allowed in a valid non-empty ring【(=】4).",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "4).",
        "trans": [
            "static int MINIMUM_VALID_SIZE The minimum number of vertices allowed in a valid non-empty ring (=【4).】",
            "　　　MINIMUM_VALID_SIZE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_GEOMETRYCOLLECTION",
            "　　　TYPENAME_GEOMETRYCOLLECTION"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_GEOMETRYCOLLECTION",
            "　　　TYPENAME_GEOMETRYCOLLECTION"
        ]
    },
    {
        "name": "TYPENAME_GEOMETRYCOLLECTION",
        "trans": [
            "static String【TYPENAME_GEOMETRYCOLLECTION】",
            "　　　TYPENAME_GEOMETRYCOLLECTION"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_LINEARRING",
            "　　　TYPENAME_LINEARRING"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_LINEARRING",
            "　　　TYPENAME_LINEARRING"
        ]
    },
    {
        "name": "TYPENAME_LINEARRING",
        "trans": [
            "static String【TYPENAME_LINEARRING】",
            "　　　TYPENAME_LINEARRING"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_LINESTRING",
            "　　　TYPENAME_LINESTRING"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_LINESTRING",
            "　　　TYPENAME_LINESTRING"
        ]
    },
    {
        "name": "TYPENAME_LINESTRING",
        "trans": [
            "static String【TYPENAME_LINESTRING】",
            "　　　TYPENAME_LINESTRING"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_MULTILINESTRING",
            "　　　TYPENAME_MULTILINESTRING"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_MULTILINESTRING",
            "　　　TYPENAME_MULTILINESTRING"
        ]
    },
    {
        "name": "TYPENAME_MULTILINESTRING",
        "trans": [
            "static String【TYPENAME_MULTILINESTRING】",
            "　　　TYPENAME_MULTILINESTRING"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_MULTIPOINT",
            "　　　TYPENAME_MULTIPOINT"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_MULTIPOINT",
            "　　　TYPENAME_MULTIPOINT"
        ]
    },
    {
        "name": "TYPENAME_MULTIPOINT",
        "trans": [
            "static String【TYPENAME_MULTIPOINT】",
            "　　　TYPENAME_MULTIPOINT"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_MULTIPOLYGON",
            "　　　TYPENAME_MULTIPOLYGON"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_MULTIPOLYGON",
            "　　　TYPENAME_MULTIPOLYGON"
        ]
    },
    {
        "name": "TYPENAME_MULTIPOLYGON",
        "trans": [
            "static String【TYPENAME_MULTIPOLYGON】",
            "　　　TYPENAME_MULTIPOLYGON"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_POINT",
            "　　　TYPENAME_POINT"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_POINT",
            "　　　TYPENAME_POINT"
        ]
    },
    {
        "name": "TYPENAME_POINT",
        "trans": [
            "static String【TYPENAME_POINT】",
            "　　　TYPENAME_POINT"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String TYPENAME_POLYGON",
            "　　　TYPENAME_POLYGON"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】TYPENAME_POLYGON",
            "　　　TYPENAME_POLYGON"
        ]
    },
    {
        "name": "TYPENAME_POLYGON",
        "trans": [
            "static String【TYPENAME_POLYGON】",
            "　　　TYPENAME_POLYGON"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int M Standard ordinate index value for M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】M Standard ordinate index value for M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "M",
        "trans": [
            "static int【M】Standard ordinate index value for M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int M【Standard】ordinate index value for M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int M Standard【ordinate】index value for M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int M Standard ordinate【index】value for M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int M Standard ordinate index【value】for M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int M Standard ordinate index value【for】M in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "M",
        "trans": [
            "static int M Standard ordinate index value for【M】in XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static int M Standard ordinate index value for M【in】XYM sequences.",
            "　　　米"
        ]
    },
    {
        "name": "XYM",
        "trans": [
            "static int M Standard ordinate index value for M in【XYM】sequences.",
            "　　　米"
        ]
    },
    {
        "name": "sequences.",
        "trans": [
            "static int M Standard ordinate index value for M in XYM【sequences.】",
            "　　　米"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int X Standard ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】X Standard ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "X",
        "trans": [
            "static int【X】Standard ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int X【Standard】ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int X Standard【ordinate】index value for X",
            "　　　X"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int X Standard ordinate【index】value for X",
            "　　　X"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int X Standard ordinate index【value】for X",
            "　　　X"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int X Standard ordinate index value【for】X",
            "　　　X"
        ]
    },
    {
        "name": "X",
        "trans": [
            "static int X Standard ordinate index value for【X】",
            "　　　X"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int Y Standard ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】Y Standard ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "Y",
        "trans": [
            "static int【Y】Standard ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int Y【Standard】ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int Y Standard【ordinate】index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int Y Standard ordinate【index】value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int Y Standard ordinate index【value】for Y",
            "　　　Y"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int Y Standard ordinate index value【for】Y",
            "　　　Y"
        ]
    },
    {
        "name": "Y",
        "trans": [
            "static int Y Standard ordinate index value for【Y】",
            "　　　Y"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int Z CoordinateXYM does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】Z CoordinateXYM does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "Z",
        "trans": [
            "static int【Z】CoordinateXYM does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "CoordinateXYM",
        "trans": [
            "static int Z【CoordinateXYM】does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "does",
        "trans": [
            "static int Z CoordinateXYM【does】not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "not",
        "trans": [
            "static int Z CoordinateXYM does【not】support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "support",
        "trans": [
            "static int Z CoordinateXYM does not【support】Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "Z",
        "trans": [
            "static int Z CoordinateXYM does not support【Z】values.",
            "　　　Z"
        ]
    },
    {
        "name": "values.",
        "trans": [
            "static int Z CoordinateXYM does not support Z【values.】",
            "　　　Z"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int M CoordinateXY does not support M measures.",
            "　　　米"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】M CoordinateXY does not support M measures.",
            "　　　米"
        ]
    },
    {
        "name": "M",
        "trans": [
            "static int【M】CoordinateXY does not support M measures.",
            "　　　米"
        ]
    },
    {
        "name": "CoordinateXY",
        "trans": [
            "static int M【CoordinateXY】does not support M measures.",
            "　　　米"
        ]
    },
    {
        "name": "does",
        "trans": [
            "static int M CoordinateXY【does】not support M measures.",
            "　　　米"
        ]
    },
    {
        "name": "not",
        "trans": [
            "static int M CoordinateXY does【not】support M measures.",
            "　　　米"
        ]
    },
    {
        "name": "support",
        "trans": [
            "static int M CoordinateXY does not【support】M measures.",
            "　　　米"
        ]
    },
    {
        "name": "M",
        "trans": [
            "static int M CoordinateXY does not support【M】measures.",
            "　　　米"
        ]
    },
    {
        "name": "measures.",
        "trans": [
            "static int M CoordinateXY does not support M【measures.】",
            "　　　米"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int X Standard ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】X Standard ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "X",
        "trans": [
            "static int【X】Standard ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int X【Standard】ordinate index value for X",
            "　　　X"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int X Standard【ordinate】index value for X",
            "　　　X"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int X Standard ordinate【index】value for X",
            "　　　X"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int X Standard ordinate index【value】for X",
            "　　　X"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int X Standard ordinate index value【for】X",
            "　　　X"
        ]
    },
    {
        "name": "X",
        "trans": [
            "static int X Standard ordinate index value for【X】",
            "　　　X"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int Y Standard ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】Y Standard ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "Y",
        "trans": [
            "static int【Y】Standard ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int Y【Standard】ordinate index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int Y Standard【ordinate】index value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int Y Standard ordinate【index】value for Y",
            "　　　Y"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int Y Standard ordinate index【value】for Y",
            "　　　Y"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int Y Standard ordinate index value【for】Y",
            "　　　Y"
        ]
    },
    {
        "name": "Y",
        "trans": [
            "static int Y Standard ordinate index value for【Y】",
            "　　　Y"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int Z CoordinateXY does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】Z CoordinateXY does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "Z",
        "trans": [
            "static int【Z】CoordinateXY does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "CoordinateXY",
        "trans": [
            "static int Z【CoordinateXY】does not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "does",
        "trans": [
            "static int Z CoordinateXY【does】not support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "not",
        "trans": [
            "static int Z CoordinateXY does【not】support Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "support",
        "trans": [
            "static int Z CoordinateXY does not【support】Z values.",
            "　　　Z"
        ]
    },
    {
        "name": "Z",
        "trans": [
            "static int Z CoordinateXY does not support【Z】values.",
            "　　　Z"
        ]
    },
    {
        "name": "values.",
        "trans": [
            "static int Z CoordinateXY does not support Z【values.】",
            "　　　Z"
        ]
    },
    {
        "name": "KMLReader",
        "trans": [
            "【KMLReader】Constructs a Geometry object from the OGC KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "Constructs",
        "trans": [
            "KMLReader【Constructs】a Geometry object from the OGC KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "KMLReader Constructs【a】Geometry object from the OGC KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "KMLReader Constructs a【Geometry】object from the OGC KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "object",
        "trans": [
            "KMLReader Constructs a Geometry【object】from the OGC KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "KMLReader Constructs a Geometry object【from】the OGC KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "KMLReader Constructs a Geometry object from【the】OGC KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "OGC",
        "trans": [
            "KMLReader Constructs a Geometry object from the【OGC】KML representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "KML",
        "trans": [
            "KMLReader Constructs a Geometry object from the OGC【KML】representation.",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "representation.",
        "trans": [
            "KMLReader Constructs a Geometry object from the OGC KML【representation.】",
            "　　　构造一个几何对象从OGC KML表示。"
        ]
    },
    {
        "name": "KMLWriter",
        "trans": [
            "【KMLWriter】Writes a formatted string containing the KML representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "Writes",
        "trans": [
            "KMLWriter【Writes】a formatted string containing the KML representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "a",
        "trans": [
            "KMLWriter Writes【a】formatted string containing the KML representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "formatted",
        "trans": [
            "KMLWriter Writes a【formatted】string containing the KML representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "string",
        "trans": [
            "KMLWriter Writes a formatted【string】containing the KML representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "containing",
        "trans": [
            "KMLWriter Writes a formatted string【containing】the KML representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "the",
        "trans": [
            "KMLWriter Writes a formatted string containing【the】KML representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "KML",
        "trans": [
            "KMLWriter Writes a formatted string containing the【KML】representation of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "KMLWriter Writes a formatted string containing the KML【representation】of a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "of",
        "trans": [
            "KMLWriter Writes a formatted string containing the KML representation【of】a JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "a",
        "trans": [
            "KMLWriter Writes a formatted string containing the KML representation of【a】JTS Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "KMLWriter Writes a formatted string containing the KML representation of a【JTS】Geometry.",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "KMLWriter Writes a formatted string containing the KML representation of a JTS【Geometry.】",
            "　　　写一个格式化的字符串包含JTS的KML表示"
        ]
    },
    {
        "name": "GeometryStrategies",
        "trans": [
            "【GeometryStrategies】Container for GML2 Geometry parsing strategies which can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "Container",
        "trans": [
            "GeometryStrategies【Container】for GML2 Geometry parsing strategies which can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryStrategies Container【for】GML2 Geometry parsing strategies which can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "GML2",
        "trans": [
            "GeometryStrategies Container for【GML2】Geometry parsing strategies which can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "GeometryStrategies Container for GML2【Geometry】parsing strategies which can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "parsing",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry【parsing】strategies which can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "strategies",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry parsing【strategies】which can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry parsing strategies【which】can be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "can",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry parsing strategies which【can】be represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "be",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry parsing strategies which can【be】represented in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "represented",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry parsing strategies which can be【represented】in JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry parsing strategies which can be represented【in】JTS.",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "JTS.",
        "trans": [
            "GeometryStrategies Container for GML2 Geometry parsing strategies which can be represented in【JTS.】",
            "　　　容器GML2几何解析策略可以用JTS表示。"
        ]
    },
    {
        "name": "GMLConstants",
        "trans": [
            "【GMLConstants】Various constant strings associated with GML format.",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "Various",
        "trans": [
            "GMLConstants【Various】constant strings associated with GML format.",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "constant",
        "trans": [
            "GMLConstants Various【constant】strings associated with GML format.",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "strings",
        "trans": [
            "GMLConstants Various constant【strings】associated with GML format.",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "associated",
        "trans": [
            "GMLConstants Various constant strings【associated】with GML format.",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "with",
        "trans": [
            "GMLConstants Various constant strings associated【with】GML format.",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "GML",
        "trans": [
            "GMLConstants Various constant strings associated with【GML】format.",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "format.",
        "trans": [
            "GMLConstants Various constant strings associated with GML【format.】",
            "　　　各种常数字符串与GML格式。"
        ]
    },
    {
        "name": "GMLHandler",
        "trans": [
            "【GMLHandler】A SAX DefaultHandler which builds Geometrys from GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GMLHandler【A】SAX DefaultHandler which builds Geometrys from GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "SAX",
        "trans": [
            "GMLHandler A【SAX】DefaultHandler which builds Geometrys from GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "DefaultHandler",
        "trans": [
            "GMLHandler A SAX【DefaultHandler】which builds Geometrys from GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GMLHandler A SAX DefaultHandler【which】builds Geometrys from GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "builds",
        "trans": [
            "GMLHandler A SAX DefaultHandler which【builds】Geometrys from GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GMLHandler A SAX DefaultHandler which builds【Geometrys】from GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "from",
        "trans": [
            "GMLHandler A SAX DefaultHandler which builds Geometrys【from】GML2-formatted geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "GML2-formatted",
        "trans": [
            "GMLHandler A SAX DefaultHandler which builds Geometrys from【GML2-formatted】geometries.",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "GMLHandler A SAX DefaultHandler which builds Geometrys from GML2-formatted【geometries.】",
            "　　　一个SAX DefaultHandler构建几何"
        ]
    },
    {
        "name": "GMLReader",
        "trans": [
            "【GMLReader】Reads a GML2 geometry from an XML fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "Reads",
        "trans": [
            "GMLReader【Reads】a GML2 geometry from an XML fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GMLReader Reads【a】GML2 geometry from an XML fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "GML2",
        "trans": [
            "GMLReader Reads a【GML2】geometry from an XML fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "GMLReader Reads a GML2【geometry】from an XML fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "GMLReader Reads a GML2 geometry【from】an XML fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "GMLReader Reads a GML2 geometry from【an】XML fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "XML",
        "trans": [
            "GMLReader Reads a GML2 geometry from an【XML】fragment into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "fragment",
        "trans": [
            "GMLReader Reads a GML2 geometry from an XML【fragment】into a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "into",
        "trans": [
            "GMLReader Reads a GML2 geometry from an XML fragment【into】a Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GMLReader Reads a GML2 geometry from an XML fragment into【a】Geometry.",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "GMLReader Reads a GML2 geometry from an XML fragment into a【Geometry.】",
            "　　　读取从XML片段GML2几何几何。"
        ]
    },
    {
        "name": "GMLWriter",
        "trans": [
            "【GMLWriter】Writes Geometrys as XML fragments in GML2 format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "Writes",
        "trans": [
            "GMLWriter【Writes】Geometrys as XML fragments in GML2 format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GMLWriter Writes【Geometrys】as XML fragments in GML2 format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "as",
        "trans": [
            "GMLWriter Writes Geometrys【as】XML fragments in GML2 format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "XML",
        "trans": [
            "GMLWriter Writes Geometrys as【XML】fragments in GML2 format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "fragments",
        "trans": [
            "GMLWriter Writes Geometrys as XML【fragments】in GML2 format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "GMLWriter Writes Geometrys as XML fragments【in】GML2 format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "GML2",
        "trans": [
            "GMLWriter Writes Geometrys as XML fragments in【GML2】format.",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "format.",
        "trans": [
            "GMLWriter Writes Geometrys as XML fragments in GML2【format.】",
            "　　　写几何GML2格式的XML片段。"
        ]
    },
    {
        "name": "CollectionUtil.Function",
        "trans": [
            "【CollectionUtil.Function】",
            "　　　CollectionUtil.Function"
        ]
    },
    {
        "name": "Assert",
        "trans": [
            "【Assert】A utility for making programming assertions.",
            "　　　一个实用程序进行编程的断言。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Assert【A】utility for making programming assertions.",
            "　　　一个实用程序进行编程的断言。"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "Assert A【utility】for making programming assertions.",
            "　　　一个实用程序进行编程的断言。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Assert A utility【for】making programming assertions.",
            "　　　一个实用程序进行编程的断言。"
        ]
    },
    {
        "name": "making",
        "trans": [
            "Assert A utility for【making】programming assertions.",
            "　　　一个实用程序进行编程的断言。"
        ]
    },
    {
        "name": "programming",
        "trans": [
            "Assert A utility for making【programming】assertions.",
            "　　　一个实用程序进行编程的断言。"
        ]
    },
    {
        "name": "assertions.",
        "trans": [
            "Assert A utility for making programming【assertions.】",
            "　　　一个实用程序进行编程的断言。"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int A Dimension value of a surface (2).",
            "　　　一个"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】A Dimension value of a surface (2).",
            "　　　一个"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static int【A】Dimension value of a surface (2).",
            "　　　一个"
        ]
    },
    {
        "name": "Dimension",
        "trans": [
            "static int A【Dimension】value of a surface (2).",
            "　　　一个"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int A Dimension【value】of a surface (2).",
            "　　　一个"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int A Dimension value【of】a surface (2).",
            "　　　一个"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int A Dimension value of【a】surface (2).",
            "　　　一个"
        ]
    },
    {
        "name": "surface",
        "trans": [
            "static int A Dimension value of a【surface】(2).",
            "　　　一个"
        ]
    },
    {
        "name": "(2).",
        "trans": [
            "static int A Dimension value of a surface【(2).】",
            "　　　一个"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int DONTCARE Dimension value for any dimension (= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】DONTCARE Dimension value for any dimension (= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "DONTCARE",
        "trans": [
            "static int【DONTCARE】Dimension value for any dimension (= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "Dimension",
        "trans": [
            "static int DONTCARE【Dimension】value for any dimension (= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int DONTCARE Dimension【value】for any dimension (= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int DONTCARE Dimension value【for】any dimension (= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "any",
        "trans": [
            "static int DONTCARE Dimension value for【any】dimension (= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "dimension",
        "trans": [
            "static int DONTCARE Dimension value for any【dimension】(= {FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "(=",
        "trans": [
            "static int DONTCARE Dimension value for any dimension【(=】{FALSE, TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "{FALSE,",
        "trans": [
            "static int DONTCARE Dimension value for any dimension (=【{FALSE,】TRUE}).",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "TRUE}).",
        "trans": [
            "static int DONTCARE Dimension value for any dimension (= {FALSE,【TRUE}).】",
            "　　　DONTCARE"
        ]
    },
    {
        "name": "QuadEdgeLocator",
        "trans": [
            "【QuadEdgeLocator】An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "An",
        "trans": [
            "QuadEdgeLocator【An】interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "QuadEdgeLocator An【interface】for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "for",
        "trans": [
            "QuadEdgeLocator An interface【for】classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "QuadEdgeLocator An interface for【classes】which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "which",
        "trans": [
            "QuadEdgeLocator An interface for classes【which】locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "locate",
        "trans": [
            "QuadEdgeLocator An interface for classes which【locate】an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "an",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate【an】edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an【edge】in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "in",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge【in】a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in【a】QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "QuadEdgeSubdivision",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a【QuadEdgeSubdivision】which either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "which",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision【which】either contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "either",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which【either】contains a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "contains",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either【contains】a given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains【a】given Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "given",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a【given】Vertex V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "Vertex",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given【Vertex】V or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "V",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex【V】or is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "or",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V【or】is an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "is",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or【is】an edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "an",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is【an】edge of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an【edge】of a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge【of】a triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of【a】triangle which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "triangle",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a【triangle】which contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "which",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle【which】contains V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "contains",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which【contains】V.",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "V.",
        "trans": [
            "QuadEdgeLocator An interface for classes which locate an edge in a QuadEdgeSubdivision which either contains a given Vertex V or is an edge of a triangle which contains【V.】",
            "　　　一个接口类的定位QuadEdgeSubdivision优势"
        ]
    },
    {
        "name": "TraversalVisitor",
        "trans": [
            "【TraversalVisitor】Interface for classes which process triangles visited during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "Interface",
        "trans": [
            "TraversalVisitor【Interface】for classes which process triangles visited during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "for",
        "trans": [
            "TraversalVisitor Interface【for】classes which process triangles visited during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "TraversalVisitor Interface for【classes】which process triangles visited during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "which",
        "trans": [
            "TraversalVisitor Interface for classes【which】process triangles visited during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "process",
        "trans": [
            "TraversalVisitor Interface for classes which【process】triangles visited during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "triangles",
        "trans": [
            "TraversalVisitor Interface for classes which process【triangles】visited during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "visited",
        "trans": [
            "TraversalVisitor Interface for classes which process triangles【visited】during traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "during",
        "trans": [
            "TraversalVisitor Interface for classes which process triangles visited【during】traversals of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "traversals",
        "trans": [
            "TraversalVisitor Interface for classes which process triangles visited during【traversals】of a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "of",
        "trans": [
            "TraversalVisitor Interface for classes which process triangles visited during traversals【of】a QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TraversalVisitor Interface for classes which process triangles visited during traversals of【a】QuadEdgeSubdivision",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "QuadEdgeSubdivision",
        "trans": [
            "TraversalVisitor Interface for classes which process triangles visited during traversals of a【QuadEdgeSubdivision】",
            "　　　接口类的三角形访问在遍历的过程"
        ]
    },
    {
        "name": "TriangleVisitor",
        "trans": [
            "【TriangleVisitor】An interface for algorithms which process the triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "TriangleVisitor【An】interface for algorithms which process the triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "TriangleVisitor An【interface】for algorithms which process the triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "TriangleVisitor An interface【for】algorithms which process the triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "algorithms",
        "trans": [
            "TriangleVisitor An interface for【algorithms】which process the triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "TriangleVisitor An interface for algorithms【which】process the triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "process",
        "trans": [
            "TriangleVisitor An interface for algorithms which【process】the triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TriangleVisitor An interface for algorithms which process【the】triangles in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "triangles",
        "trans": [
            "TriangleVisitor An interface for algorithms which process the【triangles】in a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "TriangleVisitor An interface for algorithms which process the triangles【in】a QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TriangleVisitor An interface for algorithms which process the triangles in【a】QuadEdgeSubdivision.",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "QuadEdgeSubdivision.",
        "trans": [
            "TriangleVisitor An interface for algorithms which process the triangles in a【QuadEdgeSubdivision.】",
            "　　　一个接口的算法处理QuadEdgeSubdivision三角形。"
        ]
    },
    {
        "name": "CollectionUtil",
        "trans": [
            "【CollectionUtil】Utilities for processing Collections.",
            "　　　实用程序处理集合。"
        ]
    },
    {
        "name": "Utilities",
        "trans": [
            "CollectionUtil【Utilities】for processing Collections.",
            "　　　实用程序处理集合。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "CollectionUtil Utilities【for】processing Collections.",
            "　　　实用程序处理集合。"
        ]
    },
    {
        "name": "processing",
        "trans": [
            "CollectionUtil Utilities for【processing】Collections.",
            "　　　实用程序处理集合。"
        ]
    },
    {
        "name": "Collections.",
        "trans": [
            "CollectionUtil Utilities for processing【Collections.】",
            "　　　实用程序处理集合。"
        ]
    },
    {
        "name": "CoordinateArrayFilter",
        "trans": [
            "【CoordinateArrayFilter】A CoordinateFilter that creates an array containing every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "A",
        "trans": [
            "CoordinateArrayFilter【A】CoordinateFilter that creates an array containing every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "CoordinateFilter",
        "trans": [
            "CoordinateArrayFilter A【CoordinateFilter】that creates an array containing every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "that",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter【that】creates an array containing every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "creates",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that【creates】an array containing every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "an",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates【an】array containing every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "array",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates an【array】containing every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "containing",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates an array【containing】every coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "every",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates an array containing【every】coordinate in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates an array containing every【coordinate】in a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates an array containing every coordinate【in】a Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates an array containing every coordinate in【a】Geometry.",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "CoordinateArrayFilter A CoordinateFilter that creates an array containing every coordinate in a【Geometry.】",
            "　　　一个包含每个CoordinateFilter创建数组"
        ]
    },
    {
        "name": "CoordinateCountFilter",
        "trans": [
            "【CoordinateCountFilter】A CoordinateFilter that counts the total number of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "A",
        "trans": [
            "CoordinateCountFilter【A】CoordinateFilter that counts the total number of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "CoordinateFilter",
        "trans": [
            "CoordinateCountFilter A【CoordinateFilter】that counts the total number of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "that",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter【that】counts the total number of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "counts",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that【counts】the total number of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts【the】total number of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "total",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts the【total】number of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "number",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts the total【number】of coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts the total number【of】coordinates in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts the total number of【coordinates】in a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts the total number of coordinates【in】a Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts the total number of coordinates in【a】Geometry.",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "CoordinateCountFilter A CoordinateFilter that counts the total number of coordinates in a【Geometry.】",
            "　　　一个CoordinateFilter坐标的总数"
        ]
    },
    {
        "name": "Debug",
        "trans": [
            "【Debug】Provides routines to simplify and localize debugging output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "Debug【Provides】routines to simplify and localize debugging output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "routines",
        "trans": [
            "Debug Provides【routines】to simplify and localize debugging output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Debug Provides routines【to】simplify and localize debugging output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "simplify",
        "trans": [
            "Debug Provides routines to【simplify】and localize debugging output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Debug Provides routines to simplify【and】localize debugging output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "localize",
        "trans": [
            "Debug Provides routines to simplify and【localize】debugging output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "debugging",
        "trans": [
            "Debug Provides routines to simplify and localize【debugging】output.",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "output.",
        "trans": [
            "Debug Provides routines to simplify and localize debugging【output.】",
            "　　　提供的例程来简化和本地化调试输出。"
        ]
    },
    {
        "name": "GeometricShapeFactory",
        "trans": [
            "【GeometricShapeFactory】Computes various kinds of common geometric shapes.",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "GeometricShapeFactory【Computes】various kinds of common geometric shapes.",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "various",
        "trans": [
            "GeometricShapeFactory Computes【various】kinds of common geometric shapes.",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "kinds",
        "trans": [
            "GeometricShapeFactory Computes various【kinds】of common geometric shapes.",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometricShapeFactory Computes various kinds【of】common geometric shapes.",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "common",
        "trans": [
            "GeometricShapeFactory Computes various kinds of【common】geometric shapes.",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "GeometricShapeFactory Computes various kinds of common【geometric】shapes.",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "shapes.",
        "trans": [
            "GeometricShapeFactory Computes various kinds of common geometric【shapes.】",
            "　　　计算各种常见的几何形状。"
        ]
    },
    {
        "name": "IntArrayList",
        "trans": [
            "【IntArrayList】An extendable array of primitive int values.",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "IntArrayList【An】extendable array of primitive int values.",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "extendable",
        "trans": [
            "IntArrayList An【extendable】array of primitive int values.",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "array",
        "trans": [
            "IntArrayList An extendable【array】of primitive int values.",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IntArrayList An extendable array【of】primitive int values.",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "primitive",
        "trans": [
            "IntArrayList An extendable array of【primitive】int values.",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "int",
        "trans": [
            "IntArrayList An extendable array of primitive【int】values.",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "values.",
        "trans": [
            "IntArrayList An extendable array of primitive int【values.】",
            "　　　可扩展数组的原始的int值。"
        ]
    },
    {
        "name": "Memory",
        "trans": [
            "【Memory】Utility functions to report JVM memory usage.",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "Utility",
        "trans": [
            "Memory【Utility】functions to report JVM memory usage.",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "Memory Utility【functions】to report JVM memory usage.",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Memory Utility functions【to】report JVM memory usage.",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "report",
        "trans": [
            "Memory Utility functions to【report】JVM memory usage.",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "JVM",
        "trans": [
            "Memory Utility functions to report【JVM】memory usage.",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "memory",
        "trans": [
            "Memory Utility functions to report JVM【memory】usage.",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "usage.",
        "trans": [
            "Memory Utility functions to report JVM memory【usage.】",
            "　　　效用函数来报告JVM内存使用。"
        ]
    },
    {
        "name": "NumberUtil",
        "trans": [
            "【NumberUtil】",
            "　　　NumberUtil"
        ]
    },
    {
        "name": "ObjectCounter",
        "trans": [
            "【ObjectCounter】Counts occurrences of objects.",
            "　　　重要事件的对象。"
        ]
    },
    {
        "name": "Counts",
        "trans": [
            "ObjectCounter【Counts】occurrences of objects.",
            "　　　重要事件的对象。"
        ]
    },
    {
        "name": "occurrences",
        "trans": [
            "ObjectCounter Counts【occurrences】of objects.",
            "　　　重要事件的对象。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ObjectCounter Counts occurrences【of】objects.",
            "　　　重要事件的对象。"
        ]
    },
    {
        "name": "objects.",
        "trans": [
            "ObjectCounter Counts occurrences of【objects.】",
            "　　　重要事件的对象。"
        ]
    },
    {
        "name": "PriorityQueue",
        "trans": [
            "【PriorityQueue】Deprecated",
            "　　　PriorityQueue"
        ]
    },
    {
        "name": "Deprecated",
        "trans": [
            "PriorityQueue【Deprecated】",
            "　　　PriorityQueue"
        ]
    },
    {
        "name": "Stopwatch",
        "trans": [
            "【Stopwatch】Implements a timer function which can compute elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "Stopwatch【Implements】a timer function which can compute elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Stopwatch Implements【a】timer function which can compute elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "timer",
        "trans": [
            "Stopwatch Implements a【timer】function which can compute elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "function",
        "trans": [
            "Stopwatch Implements a timer【function】which can compute elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Stopwatch Implements a timer function【which】can compute elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "can",
        "trans": [
            "Stopwatch Implements a timer function which【can】compute elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "Stopwatch Implements a timer function which can【compute】elapsed time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "elapsed",
        "trans": [
            "Stopwatch Implements a timer function which can compute【elapsed】time as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "time",
        "trans": [
            "Stopwatch Implements a timer function which can compute elapsed【time】as well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "as",
        "trans": [
            "Stopwatch Implements a timer function which can compute elapsed time【as】well as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "well",
        "trans": [
            "Stopwatch Implements a timer function which can compute elapsed time as【well】as split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "as",
        "trans": [
            "Stopwatch Implements a timer function which can compute elapsed time as well【as】split times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "split",
        "trans": [
            "Stopwatch Implements a timer function which can compute elapsed time as well as【split】times.",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "times.",
        "trans": [
            "Stopwatch Implements a timer function which can compute elapsed time as well as split【times.】",
            "　　　实现了一个计时器函数可以计算"
        ]
    },
    {
        "name": "StringUtil",
        "trans": [
            "【StringUtil】Utility methods for working with Strings.",
            "　　　实用程序方法来处理字符串。"
        ]
    },
    {
        "name": "Utility",
        "trans": [
            "StringUtil【Utility】methods for working with Strings.",
            "　　　实用程序方法来处理字符串。"
        ]
    },
    {
        "name": "methods",
        "trans": [
            "StringUtil Utility【methods】for working with Strings.",
            "　　　实用程序方法来处理字符串。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "StringUtil Utility methods【for】working with Strings.",
            "　　　实用程序方法来处理字符串。"
        ]
    },
    {
        "name": "working",
        "trans": [
            "StringUtil Utility methods for【working】with Strings.",
            "　　　实用程序方法来处理字符串。"
        ]
    },
    {
        "name": "with",
        "trans": [
            "StringUtil Utility methods for working【with】Strings.",
            "　　　实用程序方法来处理字符串。"
        ]
    },
    {
        "name": "Strings.",
        "trans": [
            "StringUtil Utility methods for working with【Strings.】",
            "　　　实用程序方法来处理字符串。"
        ]
    },
    {
        "name": "TestBuilderProxy",
        "trans": [
            "【TestBuilderProxy】A proxy to call TestBuilder functions dynamically.",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "TestBuilderProxy【A】proxy to call TestBuilder functions dynamically.",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "proxy",
        "trans": [
            "TestBuilderProxy A【proxy】to call TestBuilder functions dynamically.",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "TestBuilderProxy A proxy【to】call TestBuilder functions dynamically.",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "call",
        "trans": [
            "TestBuilderProxy A proxy to【call】TestBuilder functions dynamically.",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "TestBuilder",
        "trans": [
            "TestBuilderProxy A proxy to call【TestBuilder】functions dynamically.",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "TestBuilderProxy A proxy to call TestBuilder【functions】dynamically.",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "dynamically.",
        "trans": [
            "TestBuilderProxy A proxy to call TestBuilder functions【dynamically.】",
            "　　　一个动态代理来调用TestBuilder函数。"
        ]
    },
    {
        "name": "UniqueCoordinateArrayFilter",
        "trans": [
            "【UniqueCoordinateArrayFilter】A CoordinateFilter that extracts a unique array of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "UniqueCoordinateArrayFilter【A】CoordinateFilter that extracts a unique array of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "CoordinateFilter",
        "trans": [
            "UniqueCoordinateArrayFilter A【CoordinateFilter】that extracts a unique array of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "UniqueCoordinateArrayFilter A CoordinateFilter【that】extracts a unique array of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "UniqueCoordinateArrayFilter A CoordinateFilter that【extracts】a unique array of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "UniqueCoordinateArrayFilter A CoordinateFilter that extracts【a】unique array of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "unique",
        "trans": [
            "UniqueCoordinateArrayFilter A CoordinateFilter that extracts a【unique】array of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "array",
        "trans": [
            "UniqueCoordinateArrayFilter A CoordinateFilter that extracts a unique【array】of Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "UniqueCoordinateArrayFilter A CoordinateFilter that extracts a unique array【of】Coordinates.",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "Coordinates.",
        "trans": [
            "UniqueCoordinateArrayFilter A CoordinateFilter that extracts a unique array of【Coordinates.】",
            "　　　CoordinateFilter提取一个独特的坐标数组。"
        ]
    },
    {
        "name": "RandomPointsBuilder",
        "trans": [
            "【RandomPointsBuilder】Creates random point sets contained in a region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "RandomPointsBuilder【Creates】random point sets contained in a region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "random",
        "trans": [
            "RandomPointsBuilder Creates【random】point sets contained in a region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "point",
        "trans": [
            "RandomPointsBuilder Creates random【point】sets contained in a region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "RandomPointsBuilder Creates random point【sets】contained in a region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "contained",
        "trans": [
            "RandomPointsBuilder Creates random point sets【contained】in a region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "in",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained【in】a region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in【a】region defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "region",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a【region】defined by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region【defined】by either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "by",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined【by】either a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "either",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined by【either】a rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined by either【a】rectangular or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "rectangular",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined by either a【rectangular】or a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "or",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined by either a rectangular【or】a polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined by either a rectangular or【a】polygonal extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "polygonal",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined by either a rectangular or a【polygonal】extent.",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "extent.",
        "trans": [
            "RandomPointsBuilder Creates random point sets contained in a region defined by either a rectangular or a polygonal【extent.】",
            "　　　创建包含在一个随机的点集"
        ]
    },
    {
        "name": "RandomPointsInGridBuilder",
        "trans": [
            "【RandomPointsInGridBuilder】Creates random point sets where the points are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "RandomPointsInGridBuilder【Creates】random point sets where the points are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "random",
        "trans": [
            "RandomPointsInGridBuilder Creates【random】point sets where the points are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "point",
        "trans": [
            "RandomPointsInGridBuilder Creates random【point】sets where the points are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "RandomPointsInGridBuilder Creates random point【sets】where the points are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "where",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets【where】the points are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where【the】points are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "points",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the【points】are constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "are",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points【are】constrained to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "constrained",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are【constrained】to lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "to",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained【to】lie in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "lie",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained to【lie】in the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "in",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie【in】the cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie in【the】cells of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "cells",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie in the【cells】of a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "of",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie in the cells【of】a grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie in the cells of【a】grid.",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "grid.",
        "trans": [
            "RandomPointsInGridBuilder Creates random point sets where the points are constrained to lie in the cells of a【grid.】",
            "　　　创建随机点设置"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int FALSE Dimension value of the empty geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】FALSE Dimension value of the empty geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "FALSE",
        "trans": [
            "static int【FALSE】Dimension value of the empty geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "Dimension",
        "trans": [
            "static int FALSE【Dimension】value of the empty geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int FALSE Dimension【value】of the empty geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int FALSE Dimension value【of】the empty geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int FALSE Dimension value of【the】empty geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "empty",
        "trans": [
            "static int FALSE Dimension value of the【empty】geometry (-1).",
            "　　　假"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "static int FALSE Dimension value of the empty【geometry】(-1).",
            "　　　假"
        ]
    },
    {
        "name": "(-1).",
        "trans": [
            "static int FALSE Dimension value of the empty geometry【(-1).】",
            "　　　假"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int L Dimension value of a curve (1).",
            "　　　l"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】L Dimension value of a curve (1).",
            "　　　l"
        ]
    },
    {
        "name": "L",
        "trans": [
            "static int【L】Dimension value of a curve (1).",
            "　　　l"
        ]
    },
    {
        "name": "Dimension",
        "trans": [
            "static int L【Dimension】value of a curve (1).",
            "　　　l"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int L Dimension【value】of a curve (1).",
            "　　　l"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int L Dimension value【of】a curve (1).",
            "　　　l"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int L Dimension value of【a】curve (1).",
            "　　　l"
        ]
    },
    {
        "name": "curve",
        "trans": [
            "static int L Dimension value of a【curve】(1).",
            "　　　l"
        ]
    },
    {
        "name": "(1).",
        "trans": [
            "static int L Dimension value of a curve【(1).】",
            "　　　l"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int P Dimension value of a point (0).",
            "　　　P"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】P Dimension value of a point (0).",
            "　　　P"
        ]
    },
    {
        "name": "P",
        "trans": [
            "static int【P】Dimension value of a point (0).",
            "　　　P"
        ]
    },
    {
        "name": "Dimension",
        "trans": [
            "static int P【Dimension】value of a point (0).",
            "　　　P"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int P Dimension【value】of a point (0).",
            "　　　P"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int P Dimension value【of】a point (0).",
            "　　　P"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int P Dimension value of【a】point (0).",
            "　　　P"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static int P Dimension value of a【point】(0).",
            "　　　P"
        ]
    },
    {
        "name": "(0).",
        "trans": [
            "static int P Dimension value of a point【(0).】",
            "　　　P"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】char SYM_A Symbol for the A (dimension 2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "char",
        "trans": [
            "static【char】SYM_A Symbol for the A (dimension 2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "SYM_A",
        "trans": [
            "static char【SYM_A】Symbol for the A (dimension 2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "Symbol",
        "trans": [
            "static char SYM_A【Symbol】for the A (dimension 2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static char SYM_A Symbol【for】the A (dimension 2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static char SYM_A Symbol for【the】A (dimension 2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static char SYM_A Symbol for the【A】(dimension 2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "(dimension",
        "trans": [
            "static char SYM_A Symbol for the A【(dimension】2) pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "2)",
        "trans": [
            "static char SYM_A Symbol for the A (dimension【2)】pattern matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "pattern",
        "trans": [
            "static char SYM_A Symbol for the A (dimension 2)【pattern】matrix entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static char SYM_A Symbol for the A (dimension 2) pattern【matrix】entry",
            "　　　SYM_A"
        ]
    },
    {
        "name": "entry",
        "trans": [
            "static char SYM_A Symbol for the A (dimension 2) pattern matrix【entry】",
            "　　　SYM_A"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】char SYM_DONTCARE Symbol for the DONTCARE pattern matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "char",
        "trans": [
            "static【char】SYM_DONTCARE Symbol for the DONTCARE pattern matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "SYM_DONTCARE",
        "trans": [
            "static char【SYM_DONTCARE】Symbol for the DONTCARE pattern matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "Symbol",
        "trans": [
            "static char SYM_DONTCARE【Symbol】for the DONTCARE pattern matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static char SYM_DONTCARE Symbol【for】the DONTCARE pattern matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static char SYM_DONTCARE Symbol for【the】DONTCARE pattern matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "DONTCARE",
        "trans": [
            "static char SYM_DONTCARE Symbol for the【DONTCARE】pattern matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "pattern",
        "trans": [
            "static char SYM_DONTCARE Symbol for the DONTCARE【pattern】matrix entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static char SYM_DONTCARE Symbol for the DONTCARE pattern【matrix】entry",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "entry",
        "trans": [
            "static char SYM_DONTCARE Symbol for the DONTCARE pattern matrix【entry】",
            "　　　SYM_DONTCARE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】char SYM_FALSE Symbol for the FALSE pattern matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "char",
        "trans": [
            "static【char】SYM_FALSE Symbol for the FALSE pattern matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "SYM_FALSE",
        "trans": [
            "static char【SYM_FALSE】Symbol for the FALSE pattern matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "Symbol",
        "trans": [
            "static char SYM_FALSE【Symbol】for the FALSE pattern matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static char SYM_FALSE Symbol【for】the FALSE pattern matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static char SYM_FALSE Symbol for【the】FALSE pattern matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "FALSE",
        "trans": [
            "static char SYM_FALSE Symbol for the【FALSE】pattern matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "pattern",
        "trans": [
            "static char SYM_FALSE Symbol for the FALSE【pattern】matrix entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static char SYM_FALSE Symbol for the FALSE pattern【matrix】entry",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "entry",
        "trans": [
            "static char SYM_FALSE Symbol for the FALSE pattern matrix【entry】",
            "　　　SYM_FALSE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】char SYM_L Symbol for the L (dimension 1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "char",
        "trans": [
            "static【char】SYM_L Symbol for the L (dimension 1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "SYM_L",
        "trans": [
            "static char【SYM_L】Symbol for the L (dimension 1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "Symbol",
        "trans": [
            "static char SYM_L【Symbol】for the L (dimension 1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static char SYM_L Symbol【for】the L (dimension 1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static char SYM_L Symbol for【the】L (dimension 1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "L",
        "trans": [
            "static char SYM_L Symbol for the【L】(dimension 1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "(dimension",
        "trans": [
            "static char SYM_L Symbol for the L【(dimension】1) pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "1)",
        "trans": [
            "static char SYM_L Symbol for the L (dimension【1)】pattern matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "pattern",
        "trans": [
            "static char SYM_L Symbol for the L (dimension 1)【pattern】matrix entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static char SYM_L Symbol for the L (dimension 1) pattern【matrix】entry",
            "　　　SYM_L"
        ]
    },
    {
        "name": "entry",
        "trans": [
            "static char SYM_L Symbol for the L (dimension 1) pattern matrix【entry】",
            "　　　SYM_L"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】char SYM_P Symbol for the P (dimension 0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "char",
        "trans": [
            "static【char】SYM_P Symbol for the P (dimension 0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "SYM_P",
        "trans": [
            "static char【SYM_P】Symbol for the P (dimension 0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "Symbol",
        "trans": [
            "static char SYM_P【Symbol】for the P (dimension 0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static char SYM_P Symbol【for】the P (dimension 0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static char SYM_P Symbol for【the】P (dimension 0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "P",
        "trans": [
            "static char SYM_P Symbol for the【P】(dimension 0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "(dimension",
        "trans": [
            "static char SYM_P Symbol for the P【(dimension】0) pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "0)",
        "trans": [
            "static char SYM_P Symbol for the P (dimension【0)】pattern matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "pattern",
        "trans": [
            "static char SYM_P Symbol for the P (dimension 0)【pattern】matrix entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static char SYM_P Symbol for the P (dimension 0) pattern【matrix】entry",
            "　　　SYM_P"
        ]
    },
    {
        "name": "entry",
        "trans": [
            "static char SYM_P Symbol for the P (dimension 0) pattern matrix【entry】",
            "　　　SYM_P"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】char SYM_TRUE Symbol for the TRUE pattern matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "char",
        "trans": [
            "static【char】SYM_TRUE Symbol for the TRUE pattern matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "SYM_TRUE",
        "trans": [
            "static char【SYM_TRUE】Symbol for the TRUE pattern matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "Symbol",
        "trans": [
            "static char SYM_TRUE【Symbol】for the TRUE pattern matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static char SYM_TRUE Symbol【for】the TRUE pattern matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static char SYM_TRUE Symbol for【the】TRUE pattern matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "TRUE",
        "trans": [
            "static char SYM_TRUE Symbol for the【TRUE】pattern matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "pattern",
        "trans": [
            "static char SYM_TRUE Symbol for the TRUE【pattern】matrix entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "static char SYM_TRUE Symbol for the TRUE pattern【matrix】entry",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "entry",
        "trans": [
            "static char SYM_TRUE Symbol for the TRUE pattern matrix【entry】",
            "　　　SYM_TRUE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int TRUE Dimension value of non-empty geometries (= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】TRUE Dimension value of non-empty geometries (= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "TRUE",
        "trans": [
            "static int【TRUE】Dimension value of non-empty geometries (= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "Dimension",
        "trans": [
            "static int TRUE【Dimension】value of non-empty geometries (= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int TRUE Dimension【value】of non-empty geometries (= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int TRUE Dimension value【of】non-empty geometries (= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "non-empty",
        "trans": [
            "static int TRUE Dimension value of【non-empty】geometries (= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "static int TRUE Dimension value of non-empty【geometries】(= {P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "(=",
        "trans": [
            "static int TRUE Dimension value of non-empty geometries【(=】{P, L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "{P,",
        "trans": [
            "static int TRUE Dimension value of non-empty geometries (=【{P,】L, A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "L,",
        "trans": [
            "static int TRUE Dimension value of non-empty geometries (= {P,【L,】A}).",
            "　　　真正的"
        ]
    },
    {
        "name": "A}).",
        "trans": [
            "static int TRUE Dimension value of non-empty geometries (= {P, L,【A}).】",
            "　　　真正的"
        ]
    },
    {
        "name": "EdgeConnectedTriangleTraversal",
        "trans": [
            "【EdgeConnectedTriangleTraversal】A framework to visit sets of edge-connected QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "A",
        "trans": [
            "EdgeConnectedTriangleTraversal【A】framework to visit sets of edge-connected QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "framework",
        "trans": [
            "EdgeConnectedTriangleTraversal A【framework】to visit sets of edge-connected QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "to",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework【to】visit sets of edge-connected QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "visit",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to【visit】sets of edge-connected QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to visit【sets】of edge-connected QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to visit sets【of】edge-connected QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "edge-connected",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to visit sets of【edge-connected】QuadEdgeTriangles in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "QuadEdgeTriangles",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to visit sets of edge-connected【QuadEdgeTriangles】in breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "in",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to visit sets of edge-connected QuadEdgeTriangles【in】breadth-first order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "breadth-first",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to visit sets of edge-connected QuadEdgeTriangles in【breadth-first】order",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "order",
        "trans": [
            "EdgeConnectedTriangleTraversal A framework to visit sets of edge-connected QuadEdgeTriangles in breadth-first【order】",
            "　　　一个框架去套edge-connected QuadEdgeTriangles宽度优先顺序"
        ]
    },
    {
        "name": "LastFoundQuadEdgeLocator",
        "trans": [
            "【LastFoundQuadEdgeLocator】Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "Locates",
        "trans": [
            "LastFoundQuadEdgeLocator【Locates】QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "QuadEdges",
        "trans": [
            "LastFoundQuadEdgeLocator Locates【QuadEdges】in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges【in】a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in【a】QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "QuadEdgeSubdivision,",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a【QuadEdgeSubdivision,】optimizing the search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "optimizing",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision,【optimizing】the search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing【the】search by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "search",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the【search】by starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "by",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search【by】starting in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "starting",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by【starting】in the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting【in】the locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in【the】locality of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "locality",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the【locality】of the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality【of】the last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of【the】last edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "last",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the【last】edge found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last【edge】found.",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "found.",
        "trans": [
            "LastFoundQuadEdgeLocator Locates QuadEdges in a QuadEdgeSubdivision, optimizing the search by starting in the locality of the last edge【found.】",
            "　　　定位QuadEdges QuadEdgeSubdivision,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】A class that represents the edge data structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "QuadEdge【A】class that represents the edge data structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "class",
        "trans": [
            "QuadEdge A【class】that represents the edge data structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "QuadEdge A class【that】represents the edge data structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "represents",
        "trans": [
            "QuadEdge A class that【represents】the edge data structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge A class that represents【the】edge data structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge A class that represents the【edge】data structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "data",
        "trans": [
            "QuadEdge A class that represents the edge【data】structure which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "structure",
        "trans": [
            "QuadEdge A class that represents the edge data【structure】which implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "QuadEdge A class that represents the edge data structure【which】implements the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "implements",
        "trans": [
            "QuadEdge A class that represents the edge data structure which【implements】the quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge A class that represents the edge data structure which implements【the】quadedge algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "quadedge",
        "trans": [
            "QuadEdge A class that represents the edge data structure which implements the【quadedge】algebra.",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "algebra.",
        "trans": [
            "QuadEdge A class that represents the edge data structure which implements the quadedge【algebra.】",
            "　　　一个类代表的边缘数据结构实现了quadedge代数。"
        ]
    },
    {
        "name": "QuadEdgeSubdivision",
        "trans": [
            "【QuadEdgeSubdivision】A class that contains the QuadEdges representing a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "A",
        "trans": [
            "QuadEdgeSubdivision【A】class that contains the QuadEdges representing a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "class",
        "trans": [
            "QuadEdgeSubdivision A【class】that contains the QuadEdges representing a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "that",
        "trans": [
            "QuadEdgeSubdivision A class【that】contains the QuadEdges representing a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "contains",
        "trans": [
            "QuadEdgeSubdivision A class that【contains】the QuadEdges representing a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdgeSubdivision A class that contains【the】QuadEdges representing a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "QuadEdges",
        "trans": [
            "QuadEdgeSubdivision A class that contains the【QuadEdges】representing a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges【representing】a planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges representing【a】planar subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges representing a【planar】subdivision that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "subdivision",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges representing a planar【subdivision】that models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "that",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges representing a planar subdivision【that】models a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "models",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges representing a planar subdivision that【models】a triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges representing a planar subdivision that models【a】triangulation.",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "triangulation.",
        "trans": [
            "QuadEdgeSubdivision A class that contains the QuadEdges representing a planar subdivision that models a【triangulation.】",
            "　　　一个类包含QuadEdges代表一个平面"
        ]
    },
    {
        "name": "QuadEdgeTriangle",
        "trans": [
            "【QuadEdgeTriangle】Models a triangle formed from QuadEdges in a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "QuadEdgeTriangle【Models】a triangle formed from QuadEdges in a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeTriangle Models【a】triangle formed from QuadEdges in a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "triangle",
        "trans": [
            "QuadEdgeTriangle Models a【triangle】formed from QuadEdges in a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "formed",
        "trans": [
            "QuadEdgeTriangle Models a triangle【formed】from QuadEdges in a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "from",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed【from】QuadEdges in a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "QuadEdges",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from【QuadEdges】in a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "in",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from QuadEdges【in】a QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from QuadEdges in【a】QuadEdgeSubdivision which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "QuadEdgeSubdivision",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from QuadEdges in a【QuadEdgeSubdivision】which forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "which",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from QuadEdges in a QuadEdgeSubdivision【which】forms a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "forms",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from QuadEdges in a QuadEdgeSubdivision which【forms】a triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "a",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from QuadEdges in a QuadEdgeSubdivision which forms【a】triangulation.",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "triangulation.",
        "trans": [
            "QuadEdgeTriangle Models a triangle formed from QuadEdges in a QuadEdgeSubdivision which forms a【triangulation.】",
            "　　　从在QuadEdgeSubdivision QuadEdges模型形成一个三角形"
        ]
    },
    {
        "name": "QuadEdgeUtil",
        "trans": [
            "【QuadEdgeUtil】Utilities for working with QuadEdges.",
            "　　　公用事业与QuadEdges工作。"
        ]
    },
    {
        "name": "Utilities",
        "trans": [
            "QuadEdgeUtil【Utilities】for working with QuadEdges.",
            "　　　公用事业与QuadEdges工作。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "QuadEdgeUtil Utilities【for】working with QuadEdges.",
            "　　　公用事业与QuadEdges工作。"
        ]
    },
    {
        "name": "working",
        "trans": [
            "QuadEdgeUtil Utilities for【working】with QuadEdges.",
            "　　　公用事业与QuadEdges工作。"
        ]
    },
    {
        "name": "with",
        "trans": [
            "QuadEdgeUtil Utilities for working【with】QuadEdges.",
            "　　　公用事业与QuadEdges工作。"
        ]
    },
    {
        "name": "QuadEdges.",
        "trans": [
            "QuadEdgeUtil Utilities for working with【QuadEdges.】",
            "　　　公用事业与QuadEdges工作。"
        ]
    },
    {
        "name": "TrianglePredicate",
        "trans": [
            "【TrianglePredicate】Algorithms for computing values and predicates associated with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "Algorithms",
        "trans": [
            "TrianglePredicate【Algorithms】for computing values and predicates associated with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "for",
        "trans": [
            "TrianglePredicate Algorithms【for】computing values and predicates associated with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "TrianglePredicate Algorithms for【computing】values and predicates associated with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "values",
        "trans": [
            "TrianglePredicate Algorithms for computing【values】and predicates associated with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "and",
        "trans": [
            "TrianglePredicate Algorithms for computing values【and】predicates associated with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "predicates",
        "trans": [
            "TrianglePredicate Algorithms for computing values and【predicates】associated with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "associated",
        "trans": [
            "TrianglePredicate Algorithms for computing values and predicates【associated】with triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "with",
        "trans": [
            "TrianglePredicate Algorithms for computing values and predicates associated【with】triangles.",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "triangles.",
        "trans": [
            "TrianglePredicate Algorithms for computing values and predicates associated with【triangles.】",
            "　　　算法计算值和谓词"
        ]
    },
    {
        "name": "Vertex",
        "trans": [
            "【Vertex】Models a site (node) in a QuadEdgeSubdivision.",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "Vertex【Models】a site (node) in a QuadEdgeSubdivision.",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Vertex Models【a】site (node) in a QuadEdgeSubdivision.",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "site",
        "trans": [
            "Vertex Models a【site】(node) in a QuadEdgeSubdivision.",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "(node)",
        "trans": [
            "Vertex Models a site【(node)】in a QuadEdgeSubdivision.",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Vertex Models a site (node)【in】a QuadEdgeSubdivision.",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Vertex Models a site (node) in【a】QuadEdgeSubdivision.",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "QuadEdgeSubdivision.",
        "trans": [
            "Vertex Models a site (node) in a【QuadEdgeSubdivision.】",
            "　　　QuadEdgeSubdivision模型网站(节点)。"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "CoordinateArrays.BidirectionalComparator",
        "trans": [
            "static class【CoordinateArrays.BidirectionalComparator】A Comparator for Coordinate arrays modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator【A】Comparator for Coordinate arrays modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "Comparator",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator A【Comparator】for Coordinate arrays modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator A Comparator【for】Coordinate arrays modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator A Comparator for【Coordinate】arrays modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator A Comparator for Coordinate【arrays】modulo their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "modulo",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays【modulo】their directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "their",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays modulo【their】directionality.",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "directionality.",
        "trans": [
            "static class CoordinateArrays.BidirectionalComparator A Comparator for Coordinate arrays modulo their【directionality.】",
            "　　　CoordinateArrays.BidirectionalComparator"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "CoordinateArrays.ForwardComparator",
        "trans": [
            "static class【CoordinateArrays.ForwardComparator】A Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static class CoordinateArrays.ForwardComparator【A】Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "Comparator",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A【Comparator】for Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator【for】Coordinate arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for【Coordinate】arrays in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate【arrays】in the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays【in】the forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in【the】forward direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "forward",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the【forward】direction of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "direction",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward【direction】of their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction【of】their coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "their",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of【their】coordinates, using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "coordinates,",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their【coordinates,】using lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates,【using】lexicographic ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "lexicographic",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates, using【lexicographic】ordering.",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "ordering.",
        "trans": [
            "static class CoordinateArrays.ForwardComparator A Comparator for Coordinate arrays in the forward direction of their coordinates, using lexicographic【ordering.】",
            "　　　CoordinateArrays.ForwardComparator"
        ]
    },
    {
        "name": "AssertionFailedException",
        "trans": [
            "【AssertionFailedException】Thrown when the application is in an inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "Thrown",
        "trans": [
            "AssertionFailedException【Thrown】when the application is in an inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "when",
        "trans": [
            "AssertionFailedException Thrown【when】the application is in an inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "AssertionFailedException Thrown when【the】application is in an inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "application",
        "trans": [
            "AssertionFailedException Thrown when the【application】is in an inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "AssertionFailedException Thrown when the application【is】in an inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "AssertionFailedException Thrown when the application is【in】an inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "AssertionFailedException Thrown when the application is in【an】inconsistent state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "inconsistent",
        "trans": [
            "AssertionFailedException Thrown when the application is in an【inconsistent】state.",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "state.",
        "trans": [
            "AssertionFailedException Thrown when the application is in an inconsistent【state.】",
            "　　　当应用程序处于不一致的状态。"
        ]
    },
    {
        "name": "LocateFailureException",
        "trans": [
            "【LocateFailureException】",
            "　　　LocateFailureException"
        ]
    },
    {
        "name": "HilbertCode",
        "trans": [
            "【HilbertCode】Encodes points as the index along finite planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "Encodes",
        "trans": [
            "HilbertCode【Encodes】points as the index along finite planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "HilbertCode Encodes【points】as the index along finite planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "as",
        "trans": [
            "HilbertCode Encodes points【as】the index along finite planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "HilbertCode Encodes points as【the】index along finite planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "index",
        "trans": [
            "HilbertCode Encodes points as the【index】along finite planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "along",
        "trans": [
            "HilbertCode Encodes points as the index【along】finite planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "finite",
        "trans": [
            "HilbertCode Encodes points as the index along【finite】planar Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "HilbertCode Encodes points as the index along finite【planar】Hilbert curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "Hilbert",
        "trans": [
            "HilbertCode Encodes points as the index along finite planar【Hilbert】curves.",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "curves.",
        "trans": [
            "HilbertCode Encodes points as the index along finite planar Hilbert【curves.】",
            "　　　编码点的指数在有限的平面希尔伯特曲线。"
        ]
    },
    {
        "name": "HilbertCurveBuilder",
        "trans": [
            "【HilbertCurveBuilder】Generates a LineString representing the Hilbert Curve at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "Generates",
        "trans": [
            "HilbertCurveBuilder【Generates】a LineString representing the Hilbert Curve at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "a",
        "trans": [
            "HilbertCurveBuilder Generates【a】LineString representing the Hilbert Curve at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "HilbertCurveBuilder Generates a【LineString】representing the Hilbert Curve at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "HilbertCurveBuilder Generates a LineString【representing】the Hilbert Curve at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "the",
        "trans": [
            "HilbertCurveBuilder Generates a LineString representing【the】Hilbert Curve at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "Hilbert",
        "trans": [
            "HilbertCurveBuilder Generates a LineString representing the【Hilbert】Curve at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "Curve",
        "trans": [
            "HilbertCurveBuilder Generates a LineString representing the Hilbert【Curve】at a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "at",
        "trans": [
            "HilbertCurveBuilder Generates a LineString representing the Hilbert Curve【at】a given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "a",
        "trans": [
            "HilbertCurveBuilder Generates a LineString representing the Hilbert Curve at【a】given level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "given",
        "trans": [
            "HilbertCurveBuilder Generates a LineString representing the Hilbert Curve at a【given】level.",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "level.",
        "trans": [
            "HilbertCurveBuilder Generates a LineString representing the Hilbert Curve at a given【level.】",
            "　　　生成一个LineString代表希尔伯特曲线"
        ]
    },
    {
        "name": "KochSnowflakeBuilder",
        "trans": [
            "【KochSnowflakeBuilder】",
            "　　　KochSnowflakeBuilder"
        ]
    },
    {
        "name": "MortonCode",
        "trans": [
            "【MortonCode】Encodes points as the index along the planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "Encodes",
        "trans": [
            "MortonCode【Encodes】points as the index along the planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "MortonCode Encodes【points】as the index along the planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "as",
        "trans": [
            "MortonCode Encodes points【as】the index along the planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MortonCode Encodes points as【the】index along the planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "index",
        "trans": [
            "MortonCode Encodes points as the【index】along the planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "along",
        "trans": [
            "MortonCode Encodes points as the index【along】the planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MortonCode Encodes points as the index along【the】planar Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "MortonCode Encodes points as the index along the【planar】Morton (Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "Morton",
        "trans": [
            "MortonCode Encodes points as the index along the planar【Morton】(Z-order) curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "(Z-order)",
        "trans": [
            "MortonCode Encodes points as the index along the planar Morton【(Z-order)】curve.",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "curve.",
        "trans": [
            "MortonCode Encodes points as the index along the planar Morton (Z-order)【curve.】",
            "　　　编码点的指数曲线沿平面莫顿(z值)。"
        ]
    },
    {
        "name": "MortonCurveBuilder",
        "trans": [
            "【MortonCurveBuilder】Generates a LineString representing the Morton Curve at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "Generates",
        "trans": [
            "MortonCurveBuilder【Generates】a LineString representing the Morton Curve at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MortonCurveBuilder Generates【a】LineString representing the Morton Curve at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "MortonCurveBuilder Generates a【LineString】representing the Morton Curve at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "MortonCurveBuilder Generates a LineString【representing】the Morton Curve at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MortonCurveBuilder Generates a LineString representing【the】Morton Curve at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "Morton",
        "trans": [
            "MortonCurveBuilder Generates a LineString representing the【Morton】Curve at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "Curve",
        "trans": [
            "MortonCurveBuilder Generates a LineString representing the Morton【Curve】at a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "at",
        "trans": [
            "MortonCurveBuilder Generates a LineString representing the Morton Curve【at】a given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MortonCurveBuilder Generates a LineString representing the Morton Curve at【a】given level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "given",
        "trans": [
            "MortonCurveBuilder Generates a LineString representing the Morton Curve at a【given】level.",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "level.",
        "trans": [
            "MortonCurveBuilder Generates a LineString representing the Morton Curve at a given【level.】",
            "　　　生成一个LineString代表莫顿曲线"
        ]
    },
    {
        "name": "SierpinskiCarpetBuilder",
        "trans": [
            "【SierpinskiCarpetBuilder】",
            "　　　SierpinskiCarpetBuilder"
        ]
    },
    {
        "name": "GeometricShapeBuilder",
        "trans": [
            "【GeometricShapeBuilder】",
            "　　　GeometricShapeBuilder"
        ]
    },
    {
        "name": "CommonBits",
        "trans": [
            "【CommonBits】Determines the maximum number of common most-significant bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "Determines",
        "trans": [
            "CommonBits【Determines】the maximum number of common most-significant bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CommonBits Determines【the】maximum number of common most-significant bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "maximum",
        "trans": [
            "CommonBits Determines the【maximum】number of common most-significant bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "number",
        "trans": [
            "CommonBits Determines the maximum【number】of common most-significant bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CommonBits Determines the maximum number【of】common most-significant bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "common",
        "trans": [
            "CommonBits Determines the maximum number of【common】most-significant bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "most-significant",
        "trans": [
            "CommonBits Determines the maximum number of common【most-significant】bits in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "bits",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant【bits】in the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant bits【in】the mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant bits in【the】mantissa of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "mantissa",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant bits in the【mantissa】of one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant bits in the mantissa【of】one or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "one",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant bits in the mantissa of【one】or numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "or",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant bits in the mantissa of one【or】numbers.",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "numbers.",
        "trans": [
            "CommonBits Determines the maximum number of common most-significant bits in the mantissa of one or【numbers.】",
            "　　　确定共同的最重要的最大数量"
        ]
    },
    {
        "name": "CommonBitsOp",
        "trans": [
            "【CommonBitsOp】Provides versions of Geometry spatial functions which use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "CommonBitsOp【Provides】versions of Geometry spatial functions which use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "versions",
        "trans": [
            "CommonBitsOp Provides【versions】of Geometry spatial functions which use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CommonBitsOp Provides versions【of】Geometry spatial functions which use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "CommonBitsOp Provides versions of【Geometry】spatial functions which use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "CommonBitsOp Provides versions of Geometry【spatial】functions which use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial【functions】which use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "which",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions【which】use common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "use",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which【use】common bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "common",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use【common】bit removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "bit",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common【bit】removal to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "removal",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit【removal】to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "to",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal【to】reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "reduce",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to【reduce】the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to reduce【the】likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "likelihood",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to reduce the【likelihood】of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to reduce the likelihood【of】robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "robustness",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to reduce the likelihood of【robustness】problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "problems.",
        "trans": [
            "CommonBitsOp Provides versions of Geometry spatial functions which use common bit removal to reduce the likelihood of robustness【problems.】",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "CommonBitsRemover",
        "trans": [
            "【CommonBitsRemover】Removes common most-significant mantissa bits from one or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "Removes",
        "trans": [
            "CommonBitsRemover【Removes】common most-significant mantissa bits from one or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "common",
        "trans": [
            "CommonBitsRemover Removes【common】most-significant mantissa bits from one or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "most-significant",
        "trans": [
            "CommonBitsRemover Removes common【most-significant】mantissa bits from one or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "mantissa",
        "trans": [
            "CommonBitsRemover Removes common most-significant【mantissa】bits from one or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "bits",
        "trans": [
            "CommonBitsRemover Removes common most-significant mantissa【bits】from one or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "from",
        "trans": [
            "CommonBitsRemover Removes common most-significant mantissa bits【from】one or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "one",
        "trans": [
            "CommonBitsRemover Removes common most-significant mantissa bits from【one】or more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "or",
        "trans": [
            "CommonBitsRemover Removes common most-significant mantissa bits from one【or】more Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "more",
        "trans": [
            "CommonBitsRemover Removes common most-significant mantissa bits from one or【more】Geometrys.",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "Geometrys.",
        "trans": [
            "CommonBitsRemover Removes common most-significant mantissa bits from one or more【Geometrys.】",
            "　　　消除常见的最重要的尾数"
        ]
    },
    {
        "name": "CoordinatePrecisionReducerFilter",
        "trans": [
            "【CoordinatePrecisionReducerFilter】Reduces the precision of the Coordinates in a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "Reduces",
        "trans": [
            "CoordinatePrecisionReducerFilter【Reduces】the precision of the Coordinates in a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces【the】precision of the Coordinates in a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the【precision】of the Coordinates in a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision【of】the Coordinates in a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of【the】Coordinates in a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "Coordinates",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the【Coordinates】in a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "in",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates【in】a CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in【a】CoordinateSequence to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a【CoordinateSequence】to match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "to",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a CoordinateSequence【to】match the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "match",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a CoordinateSequence to【match】the supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a CoordinateSequence to match【the】supplied PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "supplied",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a CoordinateSequence to match the【supplied】PrecisionModel.",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "PrecisionModel.",
        "trans": [
            "CoordinatePrecisionReducerFilter Reduces the precision of the Coordinates in a CoordinateSequence to match the supplied【PrecisionModel.】",
            "　　　降低了精密的坐标"
        ]
    },
    {
        "name": "EnhancedPrecisionOp",
        "trans": [
            "【EnhancedPrecisionOp】Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "EnhancedPrecisionOp【Provides】versions of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "versions",
        "trans": [
            "EnhancedPrecisionOp Provides【versions】of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EnhancedPrecisionOp Provides versions【of】Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "EnhancedPrecisionOp Provides versions of【Geometry】spatial functions which use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry【spatial】functions which use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial【functions】which use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "which",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions【which】use enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "use",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which【use】enhanced precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "enhanced",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use【enhanced】precision techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced【precision】techniques to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "techniques",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision【techniques】to reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "to",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques【to】reduce the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "reduce",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to【reduce】the likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce【the】likelihood of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "likelihood",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce the【likelihood】of robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood【of】robustness problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "robustness",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of【robustness】problems.",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "problems.",
        "trans": [
            "EnhancedPrecisionOp Provides versions of Geometry spatial functions which use enhanced precision techniques to reduce the likelihood of robustness【problems.】",
            "　　　提供版本的几何空间函数的使用"
        ]
    },
    {
        "name": "GeometryPrecisionReducer",
        "trans": [
            "【GeometryPrecisionReducer】Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "Reduces",
        "trans": [
            "GeometryPrecisionReducer【Reduces】the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryPrecisionReducer Reduces【the】precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "GeometryPrecisionReducer Reduces the【precision】of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision【of】a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of【a】Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a【Geometry】according to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "according",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry【according】to the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "to",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according【to】the supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to【the】supplied PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "supplied",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the【supplied】PrecisionModel, ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "PrecisionModel,",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied【PrecisionModel,】ensuring that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "ensuring",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel,【ensuring】that the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "that",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring【that】the result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that【the】result is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "result",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the【result】is valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "is",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result【is】valid (unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "valid",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is【valid】(unless specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "(unless",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid【(unless】specified otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless【specified】otherwise).",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "otherwise).",
        "trans": [
            "GeometryPrecisionReducer Reduces the precision of a Geometry according to the supplied PrecisionModel, ensuring that the result is valid (unless specified【otherwise).】",
            "　　　降低了几何精度"
        ]
    },
    {
        "name": "MinimumClearance",
        "trans": [
            "【MinimumClearance】Computes the Minimum Clearance of a Geometry.",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "MinimumClearance【Computes】the Minimum Clearance of a Geometry.",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MinimumClearance Computes【the】Minimum Clearance of a Geometry.",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "Minimum",
        "trans": [
            "MinimumClearance Computes the【Minimum】Clearance of a Geometry.",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "Clearance",
        "trans": [
            "MinimumClearance Computes the Minimum【Clearance】of a Geometry.",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MinimumClearance Computes the Minimum Clearance【of】a Geometry.",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MinimumClearance Computes the Minimum Clearance of【a】Geometry.",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "MinimumClearance Computes the Minimum Clearance of a【Geometry.】",
            "　　　计算的最小间隙几何。"
        ]
    },
    {
        "name": "PrecisionReducerCoordinateOperation",
        "trans": [
            "【PrecisionReducerCoordinateOperation】",
            "　　　PrecisionReducerCoordinateOperation"
        ]
    },
    {
        "name": "ConnectedSubgraphFinder",
        "trans": [
            "【ConnectedSubgraphFinder】Finds all connected Subgraphs of a PlanarGraph.",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "ConnectedSubgraphFinder【Finds】all connected Subgraphs of a PlanarGraph.",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "ConnectedSubgraphFinder Finds【all】connected Subgraphs of a PlanarGraph.",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "connected",
        "trans": [
            "ConnectedSubgraphFinder Finds all【connected】Subgraphs of a PlanarGraph.",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "Subgraphs",
        "trans": [
            "ConnectedSubgraphFinder Finds all connected【Subgraphs】of a PlanarGraph.",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ConnectedSubgraphFinder Finds all connected Subgraphs【of】a PlanarGraph.",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConnectedSubgraphFinder Finds all connected Subgraphs of【a】PlanarGraph.",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "PlanarGraph.",
        "trans": [
            "ConnectedSubgraphFinder Finds all connected Subgraphs of a【PlanarGraph.】",
            "　　　找到所有PlanarGraph连通子图。"
        ]
    },
    {
        "name": "DirectedEdge",
        "trans": [
            "【DirectedEdge】Represents a directed edge in a PlanarGraph.",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "DirectedEdge【Represents】a directed edge in a PlanarGraph.",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DirectedEdge Represents【a】directed edge in a PlanarGraph.",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "directed",
        "trans": [
            "DirectedEdge Represents a【directed】edge in a PlanarGraph.",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "DirectedEdge Represents a directed【edge】in a PlanarGraph.",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "DirectedEdge Represents a directed edge【in】a PlanarGraph.",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DirectedEdge Represents a directed edge in【a】PlanarGraph.",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "PlanarGraph.",
        "trans": [
            "DirectedEdge Represents a directed edge in a【PlanarGraph.】",
            "　　　代表一个导演PlanarGraph边缘。"
        ]
    },
    {
        "name": "DirectedEdgeStar",
        "trans": [
            "【DirectedEdgeStar】A sorted collection of DirectedEdges which leave a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "A",
        "trans": [
            "DirectedEdgeStar【A】sorted collection of DirectedEdges which leave a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "sorted",
        "trans": [
            "DirectedEdgeStar A【sorted】collection of DirectedEdges which leave a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "DirectedEdgeStar A sorted【collection】of DirectedEdges which leave a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "DirectedEdgeStar A sorted collection【of】DirectedEdges which leave a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "DirectedEdges",
        "trans": [
            "DirectedEdgeStar A sorted collection of【DirectedEdges】which leave a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "which",
        "trans": [
            "DirectedEdgeStar A sorted collection of DirectedEdges【which】leave a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "leave",
        "trans": [
            "DirectedEdgeStar A sorted collection of DirectedEdges which【leave】a Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DirectedEdgeStar A sorted collection of DirectedEdges which leave【a】Node in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "Node",
        "trans": [
            "DirectedEdgeStar A sorted collection of DirectedEdges which leave a【Node】in a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "in",
        "trans": [
            "DirectedEdgeStar A sorted collection of DirectedEdges which leave a Node【in】a PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DirectedEdgeStar A sorted collection of DirectedEdges which leave a Node in【a】PlanarGraph.",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "PlanarGraph.",
        "trans": [
            "DirectedEdgeStar A sorted collection of DirectedEdges which leave a Node in a【PlanarGraph.】",
            "　　　离开一个节点的排序的DirectedEdges集合"
        ]
    },
    {
        "name": "Edge",
        "trans": [
            "【Edge】Represents an undirected edge of a PlanarGraph.",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "Edge【Represents】an undirected edge of a PlanarGraph.",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "Edge Represents【an】undirected edge of a PlanarGraph.",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "undirected",
        "trans": [
            "Edge Represents an【undirected】edge of a PlanarGraph.",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "Edge Represents an undirected【edge】of a PlanarGraph.",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Edge Represents an undirected edge【of】a PlanarGraph.",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Edge Represents an undirected edge of【a】PlanarGraph.",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "PlanarGraph.",
        "trans": [
            "Edge Represents an undirected edge of a【PlanarGraph.】",
            "　　　代表了一个无向边PlanarGraph。"
        ]
    },
    {
        "name": "GraphComponent",
        "trans": [
            "【GraphComponent】The base class for all graph component classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "GraphComponent【The】base class for all graph component classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "base",
        "trans": [
            "GraphComponent The【base】class for all graph component classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "class",
        "trans": [
            "GraphComponent The base【class】for all graph component classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GraphComponent The base class【for】all graph component classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "GraphComponent The base class for【all】graph component classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "GraphComponent The base class for all【graph】component classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "component",
        "trans": [
            "GraphComponent The base class for all graph【component】classes.",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "classes.",
        "trans": [
            "GraphComponent The base class for all graph component【classes.】",
            "　　　所有图表组件类的基类。"
        ]
    },
    {
        "name": "Node",
        "trans": [
            "【Node】A node in a PlanarGraphis a location where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Node【A】node in a PlanarGraphis a location where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "node",
        "trans": [
            "Node A【node】in a PlanarGraphis a location where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Node A node【in】a PlanarGraphis a location where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Node A node in【a】PlanarGraphis a location where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "PlanarGraphis",
        "trans": [
            "Node A node in a【PlanarGraphis】a location where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Node A node in a PlanarGraphis【a】location where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "location",
        "trans": [
            "Node A node in a PlanarGraphis a【location】where 0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "where",
        "trans": [
            "Node A node in a PlanarGraphis a location【where】0 or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "0",
        "trans": [
            "Node A node in a PlanarGraphis a location where【0】or more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "or",
        "trans": [
            "Node A node in a PlanarGraphis a location where 0【or】more Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "more",
        "trans": [
            "Node A node in a PlanarGraphis a location where 0 or【more】Edges meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "Edges",
        "trans": [
            "Node A node in a PlanarGraphis a location where 0 or more【Edges】meet.",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "meet.",
        "trans": [
            "Node A node in a PlanarGraphis a location where 0 or more Edges【meet.】",
            "　　　PlanarGraphis位置0中的一个节点或多个边缘"
        ]
    },
    {
        "name": "NodeMap",
        "trans": [
            "【NodeMap】A map of Nodes, indexed by the coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "NodeMap【A】map of Nodes, indexed by the coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "map",
        "trans": [
            "NodeMap A【map】of Nodes, indexed by the coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NodeMap A map【of】Nodes, indexed by the coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "Nodes,",
        "trans": [
            "NodeMap A map of【Nodes,】indexed by the coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "indexed",
        "trans": [
            "NodeMap A map of Nodes,【indexed】by the coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "NodeMap A map of Nodes, indexed【by】the coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NodeMap A map of Nodes, indexed by【the】coordinate of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "NodeMap A map of Nodes, indexed by the【coordinate】of the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NodeMap A map of Nodes, indexed by the coordinate【of】the node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NodeMap A map of Nodes, indexed by the coordinate of【the】node.",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "node.",
        "trans": [
            "NodeMap A map of Nodes, indexed by the coordinate of the【node.】",
            "　　　的地图节点,索引节点的坐标。"
        ]
    },
    {
        "name": "PlanarGraph",
        "trans": [
            "【PlanarGraph】Represents a directed graph which is embeddable in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "PlanarGraph【Represents】a directed graph which is embeddable in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PlanarGraph Represents【a】directed graph which is embeddable in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "directed",
        "trans": [
            "PlanarGraph Represents a【directed】graph which is embeddable in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "PlanarGraph Represents a directed【graph】which is embeddable in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "PlanarGraph Represents a directed graph【which】is embeddable in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "PlanarGraph Represents a directed graph which【is】embeddable in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "embeddable",
        "trans": [
            "PlanarGraph Represents a directed graph which is【embeddable】in a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "PlanarGraph Represents a directed graph which is embeddable【in】a planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PlanarGraph Represents a directed graph which is embeddable in【a】planar surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "PlanarGraph Represents a directed graph which is embeddable in a【planar】surface.",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "surface.",
        "trans": [
            "PlanarGraph Represents a directed graph which is embeddable in a planar【surface.】",
            "　　　代表了一种有向图可嵌入在一个平面的表面。"
        ]
    },
    {
        "name": "Subgraph",
        "trans": [
            "【Subgraph】A subgraph of a PlanarGraph.",
            "　　　PlanarGraph的子图。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Subgraph【A】subgraph of a PlanarGraph.",
            "　　　PlanarGraph的子图。"
        ]
    },
    {
        "name": "subgraph",
        "trans": [
            "Subgraph A【subgraph】of a PlanarGraph.",
            "　　　PlanarGraph的子图。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Subgraph A subgraph【of】a PlanarGraph.",
            "　　　PlanarGraph的子图。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Subgraph A subgraph of【a】PlanarGraph.",
            "　　　PlanarGraph的子图。"
        ]
    },
    {
        "name": "PlanarGraph.",
        "trans": [
            "Subgraph A subgraph of a【PlanarGraph.】",
            "　　　PlanarGraph的子图。"
        ]
    },
    {
        "name": "BoundaryOp",
        "trans": [
            "【BoundaryOp】Computes the boundary of a Geometry.",
            "　　　计算几何的边界。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "BoundaryOp【Computes】the boundary of a Geometry.",
            "　　　计算几何的边界。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BoundaryOp Computes【the】boundary of a Geometry.",
            "　　　计算几何的边界。"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "BoundaryOp Computes the【boundary】of a Geometry.",
            "　　　计算几何的边界。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BoundaryOp Computes the boundary【of】a Geometry.",
            "　　　计算几何的边界。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BoundaryOp Computes the boundary of【a】Geometry.",
            "　　　计算几何的边界。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "BoundaryOp Computes the boundary of a【Geometry.】",
            "　　　计算几何的边界。"
        ]
    },
    {
        "name": "GeometryGraphOperation",
        "trans": [
            "【GeometryGraphOperation】The base class for operations that require GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "GeometryGraphOperation【The】base class for operations that require GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "base",
        "trans": [
            "GeometryGraphOperation The【base】class for operations that require GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "class",
        "trans": [
            "GeometryGraphOperation The base【class】for operations that require GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryGraphOperation The base class【for】operations that require GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "operations",
        "trans": [
            "GeometryGraphOperation The base class for【operations】that require GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "GeometryGraphOperation The base class for operations【that】require GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "require",
        "trans": [
            "GeometryGraphOperation The base class for operations that【require】GeometryGraphs.",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "GeometryGraphs.",
        "trans": [
            "GeometryGraphOperation The base class for operations that require【GeometryGraphs.】",
            "　　　操作要求GeometryGraphs的基类。"
        ]
    },
    {
        "name": "IsSimpleOp",
        "trans": [
            "【IsSimpleOp】Tests whether a Geometry is simple.",
            "　　　测试是否简单几何。"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "IsSimpleOp【Tests】whether a Geometry is simple.",
            "　　　测试是否简单几何。"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "IsSimpleOp Tests【whether】a Geometry is simple.",
            "　　　测试是否简单几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IsSimpleOp Tests whether【a】Geometry is simple.",
            "　　　测试是否简单几何。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "IsSimpleOp Tests whether a【Geometry】is simple.",
            "　　　测试是否简单几何。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "IsSimpleOp Tests whether a Geometry【is】simple.",
            "　　　测试是否简单几何。"
        ]
    },
    {
        "name": "simple.",
        "trans": [
            "IsSimpleOp Tests whether a Geometry is【simple.】",
            "　　　测试是否简单几何。"
        ]
    },
    {
        "name": "SimpleGeometryPrecisionReducer",
        "trans": [
            "【SimpleGeometryPrecisionReducer】Deprecated use GeometryPrecisionReducer",
            "　　　弃用"
        ]
    },
    {
        "name": "Deprecated",
        "trans": [
            "SimpleGeometryPrecisionReducer【Deprecated】use GeometryPrecisionReducer",
            "　　　弃用"
        ]
    },
    {
        "name": "use",
        "trans": [
            "SimpleGeometryPrecisionReducer Deprecated【use】GeometryPrecisionReducer",
            "　　　弃用"
        ]
    },
    {
        "name": "GeometryPrecisionReducer",
        "trans": [
            "SimpleGeometryPrecisionReducer Deprecated use【GeometryPrecisionReducer】",
            "　　　弃用"
        ]
    },
    {
        "name": "SimpleMinimumClearance",
        "trans": [
            "【SimpleMinimumClearance】Computes the minimum clearance of a geometry or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "SimpleMinimumClearance【Computes】the minimum clearance of a geometry or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SimpleMinimumClearance Computes【the】minimum clearance of a geometry or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "minimum",
        "trans": [
            "SimpleMinimumClearance Computes the【minimum】clearance of a geometry or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "clearance",
        "trans": [
            "SimpleMinimumClearance Computes the minimum【clearance】of a geometry or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleMinimumClearance Computes the minimum clearance【of】a geometry or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SimpleMinimumClearance Computes the minimum clearance of【a】geometry or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "SimpleMinimumClearance Computes the minimum clearance of a【geometry】or set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "or",
        "trans": [
            "SimpleMinimumClearance Computes the minimum clearance of a geometry【or】set of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "set",
        "trans": [
            "SimpleMinimumClearance Computes the minimum clearance of a geometry or【set】of geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleMinimumClearance Computes the minimum clearance of a geometry or set【of】geometries.",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "SimpleMinimumClearance Computes the minimum clearance of a geometry or set of【geometries.】",
            "　　　计算的最小间隙几何或"
        ]
    },
    {
        "name": "GeometryNoder",
        "trans": [
            "【GeometryNoder】Nodes the linework in a list of Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "Nodes",
        "trans": [
            "GeometryNoder【Nodes】the linework in a list of Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryNoder Nodes【the】linework in a list of Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "linework",
        "trans": [
            "GeometryNoder Nodes the【linework】in a list of Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "in",
        "trans": [
            "GeometryNoder Nodes the linework【in】a list of Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryNoder Nodes the linework in【a】list of Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "list",
        "trans": [
            "GeometryNoder Nodes the linework in a【list】of Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryNoder Nodes the linework in a list【of】Geometrys using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "GeometryNoder Nodes the linework in a list of【Geometrys】using Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "using",
        "trans": [
            "GeometryNoder Nodes the linework in a list of Geometrys【using】Snap-Rounding to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "Snap-Rounding",
        "trans": [
            "GeometryNoder Nodes the linework in a list of Geometrys using【Snap-Rounding】to a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "to",
        "trans": [
            "GeometryNoder Nodes the linework in a list of Geometrys using Snap-Rounding【to】a given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryNoder Nodes the linework in a list of Geometrys using Snap-Rounding to【a】given PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "given",
        "trans": [
            "GeometryNoder Nodes the linework in a list of Geometrys using Snap-Rounding to a【given】PrecisionModel.",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "PrecisionModel.",
        "trans": [
            "GeometryNoder Nodes the linework in a list of Geometrys using Snap-Rounding to a given【PrecisionModel.】",
            "　　　节点的列表中划线使用Snap-Rounding几何"
        ]
    },
    {
        "name": "HotPixel",
        "trans": [
            "【HotPixel】Implements a \"hot pixel\" as used in the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "HotPixel【Implements】a \"hot pixel\" as used in the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "HotPixel Implements【a】\"hot pixel\" as used in the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "\"hot",
        "trans": [
            "HotPixel Implements a【\"hot】pixel\" as used in the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "pixel\"",
        "trans": [
            "HotPixel Implements a \"hot【pixel\"】as used in the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "as",
        "trans": [
            "HotPixel Implements a \"hot pixel\"【as】used in the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "used",
        "trans": [
            "HotPixel Implements a \"hot pixel\" as【used】in the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "HotPixel Implements a \"hot pixel\" as used【in】the Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "HotPixel Implements a \"hot pixel\" as used in【the】Snap Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "Snap",
        "trans": [
            "HotPixel Implements a \"hot pixel\" as used in the【Snap】Rounding algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "Rounding",
        "trans": [
            "HotPixel Implements a \"hot pixel\" as used in the Snap【Rounding】algorithm.",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "algorithm.",
        "trans": [
            "HotPixel Implements a \"hot pixel\" as used in the Snap Rounding【algorithm.】",
            "　　　实现了一个“热像素”是用于快速舍入算法。"
        ]
    },
    {
        "name": "MCIndexPointSnapper",
        "trans": [
            "【MCIndexPointSnapper】\"Snaps\" all SegmentStrings in a SpatialIndex containing MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "\"Snaps\"",
        "trans": [
            "MCIndexPointSnapper【\"Snaps\"】all SegmentStrings in a SpatialIndex containing MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "all",
        "trans": [
            "MCIndexPointSnapper \"Snaps\"【all】SegmentStrings in a SpatialIndex containing MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all【SegmentStrings】in a SpatialIndex containing MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "in",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings【in】a SpatialIndex containing MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in【a】SpatialIndex containing MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "SpatialIndex",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in a【SpatialIndex】containing MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "containing",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in a SpatialIndex【containing】MonotoneChains to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "MonotoneChains",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in a SpatialIndex containing【MonotoneChains】to a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "to",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in a SpatialIndex containing MonotoneChains【to】a given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in a SpatialIndex containing MonotoneChains to【a】given HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "given",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in a SpatialIndex containing MonotoneChains to a【given】HotPixel.",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "HotPixel.",
        "trans": [
            "MCIndexPointSnapper \"Snaps\" all SegmentStrings in a SpatialIndex containing MonotoneChains to a given【HotPixel.】",
            "　　　“快照”中的所有SegmentStrings SpatialIndex包含"
        ]
    },
    {
        "name": "MCIndexPointSnapper.HotPixelSnapAction",
        "trans": [
            "【MCIndexPointSnapper.HotPixelSnapAction】",
            "　　　MCIndexPointSnapper.HotPixelSnapAction"
        ]
    },
    {
        "name": "MCIndexSnapRounder",
        "trans": [
            "【MCIndexSnapRounder】Deprecated Not robust.",
            "　　　弃用"
        ]
    },
    {
        "name": "Deprecated",
        "trans": [
            "MCIndexSnapRounder【Deprecated】Not robust.",
            "　　　弃用"
        ]
    },
    {
        "name": "Not",
        "trans": [
            "MCIndexSnapRounder Deprecated【Not】robust.",
            "　　　弃用"
        ]
    },
    {
        "name": "robust.",
        "trans": [
            "MCIndexSnapRounder Deprecated Not【robust.】",
            "　　　弃用"
        ]
    },
    {
        "name": "SnapRoundingIntersectionAdder",
        "trans": [
            "【SnapRoundingIntersectionAdder】Finds intersections between line segments which will be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "SnapRoundingIntersectionAdder【Finds】intersections between line segments which will be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "SnapRoundingIntersectionAdder Finds【intersections】between line segments which will be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections【between】line segments which will be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between【line】segments which will be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line【segments】which will be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments【which】will be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "will",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which【will】be snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "be",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will【be】snap-rounded, and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "snap-rounded,",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be【snap-rounded,】and adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded,【and】adds them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "adds",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and【adds】them as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "them",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds【them】as nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "as",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds them【as】nodes to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds them as【nodes】to the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds them as nodes【to】the segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds them as nodes to【the】segments.",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "SnapRoundingIntersectionAdder Finds intersections between line segments which will be snap-rounded, and adds them as nodes to the【segments.】",
            "　　　发现线段将snap-rounded之间的十字路口,"
        ]
    },
    {
        "name": "SnapRoundingNoder",
        "trans": [
            "【SnapRoundingNoder】Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "Uses",
        "trans": [
            "SnapRoundingNoder【Uses】Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "Snap",
        "trans": [
            "SnapRoundingNoder Uses【Snap】Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "Rounding",
        "trans": [
            "SnapRoundingNoder Uses Snap【Rounding】to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding【to】compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to【compute】a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute【a】rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "rounded,",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a【rounded,】fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "fully",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded,【fully】noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "noded",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully【noded】arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "arrangement",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded【arrangement】from a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "from",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement【from】a set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from【a】set of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "set",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a【set】of SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set【of】SegmentStrings, in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "SegmentStrings,",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of【SegmentStrings,】in a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings,【in】a performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in【a】performant way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "performant",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a【performant】way, and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "way,",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant【way,】and avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way,【and】avoiding unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "avoiding",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and【avoiding】unnecessary noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "unnecessary",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding【unnecessary】noding.",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "noding.",
        "trans": [
            "SnapRoundingNoder Uses Snap Rounding to compute a rounded, fully noded arrangement from a set of SegmentStrings, in a performant way, and avoiding unnecessary【noding.】",
            "　　　使用快速舍入计算一个圆形,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "Coordinate.DimensionalComparator",
        "trans": [
            "static class【Coordinate.DimensionalComparator】Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "Compares",
        "trans": [
            "static class Coordinate.DimensionalComparator【Compares】two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "two",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares【two】Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "Coordinates,",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two【Coordinates,】allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "allowing",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates,【allowing】for either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing【for】either a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "either",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for【either】a 2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either【a】2-dimensional or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "2-dimensional",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a【2-dimensional】or 3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional【or】3-dimensional comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "3-dimensional",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or【3-dimensional】comparison, and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "comparison,",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional【comparison,】and handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison,【and】handling NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "handling",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and【handling】NaN values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "NaN",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling【NaN】values correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "values",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN【values】correctly.",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "correctly.",
        "trans": [
            "static class Coordinate.DimensionalComparator Compares two Coordinates, allowing for either a 2-dimensional or 3-dimensional comparison, and handling NaN values【correctly.】",
            "　　　Coordinate.DimensionalComparator"
        ]
    },
    {
        "name": "NodableSegmentString",
        "trans": [
            "【NodableSegmentString】An interface for classes which support adding nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "An",
        "trans": [
            "NodableSegmentString【An】interface for classes which support adding nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "NodableSegmentString An【interface】for classes which support adding nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "for",
        "trans": [
            "NodableSegmentString An interface【for】classes which support adding nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "NodableSegmentString An interface for【classes】which support adding nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "which",
        "trans": [
            "NodableSegmentString An interface for classes【which】support adding nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "support",
        "trans": [
            "NodableSegmentString An interface for classes which【support】adding nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "adding",
        "trans": [
            "NodableSegmentString An interface for classes which support【adding】nodes to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "NodableSegmentString An interface for classes which support adding【nodes】to a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "to",
        "trans": [
            "NodableSegmentString An interface for classes which support adding nodes【to】a segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "a",
        "trans": [
            "NodableSegmentString An interface for classes which support adding nodes to【a】segment string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "NodableSegmentString An interface for classes which support adding nodes to a【segment】string.",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "string.",
        "trans": [
            "NodableSegmentString An interface for classes which support adding nodes to a segment【string.】",
            "　　　一个支持将节点添加到接口的类"
        ]
    },
    {
        "name": "Noder",
        "trans": [
            "【Noder】Computes all intersections between segments in a set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "Noder【Computes】all intersections between segments in a set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "Noder Computes【all】intersections between segments in a set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "Noder Computes all【intersections】between segments in a set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "Noder Computes all intersections【between】segments in a set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "Noder Computes all intersections between【segments】in a set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Noder Computes all intersections between segments【in】a set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Noder Computes all intersections between segments in【a】set of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "set",
        "trans": [
            "Noder Computes all intersections between segments in a【set】of SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Noder Computes all intersections between segments in a set【of】SegmentStrings.",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "SegmentStrings.",
        "trans": [
            "Noder Computes all intersections between segments in a set of【SegmentStrings.】",
            "　　　计算所有路口段之间的一组SegmentStrings。"
        ]
    },
    {
        "name": "SegmentIntersector",
        "trans": [
            "【SegmentIntersector】Processes possible intersections detected by a Noder.",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "Processes",
        "trans": [
            "SegmentIntersector【Processes】possible intersections detected by a Noder.",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "possible",
        "trans": [
            "SegmentIntersector Processes【possible】intersections detected by a Noder.",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "SegmentIntersector Processes possible【intersections】detected by a Noder.",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "detected",
        "trans": [
            "SegmentIntersector Processes possible intersections【detected】by a Noder.",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "SegmentIntersector Processes possible intersections detected【by】a Noder.",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SegmentIntersector Processes possible intersections detected by【a】Noder.",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "Noder.",
        "trans": [
            "SegmentIntersector Processes possible intersections detected by a【Noder.】",
            "　　　过程可能的十字路口节点检测到。"
        ]
    },
    {
        "name": "SegmentSetMutualIntersector",
        "trans": [
            "【SegmentSetMutualIntersector】An intersector for the red-blue intersection problem.",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "SegmentSetMutualIntersector【An】intersector for the red-blue intersection problem.",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "intersector",
        "trans": [
            "SegmentSetMutualIntersector An【intersector】for the red-blue intersection problem.",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "SegmentSetMutualIntersector An intersector【for】the red-blue intersection problem.",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentSetMutualIntersector An intersector for【the】red-blue intersection problem.",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "red-blue",
        "trans": [
            "SegmentSetMutualIntersector An intersector for the【red-blue】intersection problem.",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "SegmentSetMutualIntersector An intersector for the red-blue【intersection】problem.",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "problem.",
        "trans": [
            "SegmentSetMutualIntersector An intersector for the red-blue intersection【problem.】",
            "　　　红蓝的intersector交叉问题。"
        ]
    },
    {
        "name": "SegmentString",
        "trans": [
            "【SegmentString】An interface for classes which represent a sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "SegmentString【An】interface for classes which represent a sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "SegmentString An【interface】for classes which represent a sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "SegmentString An interface【for】classes which represent a sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "SegmentString An interface for【classes】which represent a sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SegmentString An interface for classes【which】represent a sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "represent",
        "trans": [
            "SegmentString An interface for classes which【represent】a sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SegmentString An interface for classes which represent【a】sequence of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "SegmentString An interface for classes which represent a【sequence】of contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentString An interface for classes which represent a sequence【of】contiguous line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "contiguous",
        "trans": [
            "SegmentString An interface for classes which represent a sequence of【contiguous】line segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "line",
        "trans": [
            "SegmentString An interface for classes which represent a sequence of contiguous【line】segments.",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "SegmentString An interface for classes which represent a sequence of contiguous line【segments.】",
            "　　　一个接口类,它代表的是一系列连续的线段。"
        ]
    },
    {
        "name": "SegmentStringDissolver.SegmentStringMerger",
        "trans": [
            "【SegmentStringDissolver.SegmentStringMerger】A merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "A",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger【A】merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "merging",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A【merging】strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "strategy",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging【strategy】which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy【which】can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "can",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which【can】be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "be",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can【be】used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "used",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be【used】to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used【to】update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "update",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to【update】the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update【the】context data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "context",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the【context】data of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "data",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context【data】of SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data【of】SegmentStrings which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of【SegmentStrings】which are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings【which】are merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "are",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which【are】merged during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "merged",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are【merged】during the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "during",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged【during】the dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during【the】dissolve process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "dissolve",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during the【dissolve】process.",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "process.",
        "trans": [
            "SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve【process.】",
            "　　　合并策略可以用来更新SegmentStrings的上下文数据"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "【DD】Implements extended-precision floating-point numbers which maintain 106 bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "DD【Implements】extended-precision floating-point numbers which maintain 106 bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "extended-precision",
        "trans": [
            "DD Implements【extended-precision】floating-point numbers which maintain 106 bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "floating-point",
        "trans": [
            "DD Implements extended-precision【floating-point】numbers which maintain 106 bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "numbers",
        "trans": [
            "DD Implements extended-precision floating-point【numbers】which maintain 106 bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "which",
        "trans": [
            "DD Implements extended-precision floating-point numbers【which】maintain 106 bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "maintain",
        "trans": [
            "DD Implements extended-precision floating-point numbers which【maintain】106 bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "106",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain【106】bits (approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "bits",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain 106【bits】(approximately 30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "(approximately",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain 106 bits【(approximately】30 decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "30",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain 106 bits (approximately【30】decimal digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "decimal",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain 106 bits (approximately 30【decimal】digits) of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "digits)",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain 106 bits (approximately 30 decimal【digits)】of precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "of",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain 106 bits (approximately 30 decimal digits)【of】precision.",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "precision.",
        "trans": [
            "DD Implements extended-precision floating-point numbers which maintain 106 bits (approximately 30 decimal digits) of【precision.】",
            "　　　给出实现浮点数"
        ]
    },
    {
        "name": "MathUtil",
        "trans": [
            "【MathUtil】Various utility functions for mathematical and numerical operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "Various",
        "trans": [
            "MathUtil【Various】utility functions for mathematical and numerical operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "utility",
        "trans": [
            "MathUtil Various【utility】functions for mathematical and numerical operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "functions",
        "trans": [
            "MathUtil Various utility【functions】for mathematical and numerical operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MathUtil Various utility functions【for】mathematical and numerical operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "mathematical",
        "trans": [
            "MathUtil Various utility functions for【mathematical】and numerical operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "MathUtil Various utility functions for mathematical【and】numerical operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "numerical",
        "trans": [
            "MathUtil Various utility functions for mathematical and【numerical】operations.",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "MathUtil Various utility functions for mathematical and numerical【operations.】",
            "　　　不同的效用函数为数学和数值操作。"
        ]
    },
    {
        "name": "Matrix",
        "trans": [
            "【Matrix】Implements some 2D matrix operations (in particular, solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "Matrix【Implements】some 2D matrix operations (in particular, solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "some",
        "trans": [
            "Matrix Implements【some】2D matrix operations (in particular, solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "2D",
        "trans": [
            "Matrix Implements some【2D】matrix operations (in particular, solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "matrix",
        "trans": [
            "Matrix Implements some 2D【matrix】operations (in particular, solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "operations",
        "trans": [
            "Matrix Implements some 2D matrix【operations】(in particular, solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "(in",
        "trans": [
            "Matrix Implements some 2D matrix operations【(in】particular, solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "particular,",
        "trans": [
            "Matrix Implements some 2D matrix operations (in【particular,】solving systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "solving",
        "trans": [
            "Matrix Implements some 2D matrix operations (in particular,【solving】systems of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "systems",
        "trans": [
            "Matrix Implements some 2D matrix operations (in particular, solving【systems】of linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Matrix Implements some 2D matrix operations (in particular, solving systems【of】linear equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "Matrix Implements some 2D matrix operations (in particular, solving systems of【linear】equations).",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "equations).",
        "trans": [
            "Matrix Implements some 2D matrix operations (in particular, solving systems of linear【equations).】",
            "　　　实现了一些2 d矩阵运算"
        ]
    },
    {
        "name": "Plane3D",
        "trans": [
            "【Plane3D】Models a plane in 3-dimensional Cartesian space.",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "Plane3D【Models】a plane in 3-dimensional Cartesian space.",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Plane3D Models【a】plane in 3-dimensional Cartesian space.",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "plane",
        "trans": [
            "Plane3D Models a【plane】in 3-dimensional Cartesian space.",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Plane3D Models a plane【in】3-dimensional Cartesian space.",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "3-dimensional",
        "trans": [
            "Plane3D Models a plane in【3-dimensional】Cartesian space.",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "Plane3D Models a plane in 3-dimensional【Cartesian】space.",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "space.",
        "trans": [
            "Plane3D Models a plane in 3-dimensional Cartesian【space.】",
            "　　　模型飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "Vector2D",
        "trans": [
            "【Vector2D】A 2-dimensional mathematical vector represented by double-precision X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Vector2D【A】2-dimensional mathematical vector represented by double-precision X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "2-dimensional",
        "trans": [
            "Vector2D A【2-dimensional】mathematical vector represented by double-precision X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "mathematical",
        "trans": [
            "Vector2D A 2-dimensional【mathematical】vector represented by double-precision X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "vector",
        "trans": [
            "Vector2D A 2-dimensional mathematical【vector】represented by double-precision X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "represented",
        "trans": [
            "Vector2D A 2-dimensional mathematical vector【represented】by double-precision X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "by",
        "trans": [
            "Vector2D A 2-dimensional mathematical vector represented【by】double-precision X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "double-precision",
        "trans": [
            "Vector2D A 2-dimensional mathematical vector represented by【double-precision】X and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "X",
        "trans": [
            "Vector2D A 2-dimensional mathematical vector represented by double-precision【X】and Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Vector2D A 2-dimensional mathematical vector represented by double-precision X【and】Y components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "Y",
        "trans": [
            "Vector2D A 2-dimensional mathematical vector represented by double-precision X and【Y】components.",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "components.",
        "trans": [
            "Vector2D A 2-dimensional mathematical vector represented by double-precision X and Y【components.】",
            "　　　一个二维的数学向量由双精度X和Y分量表示。"
        ]
    },
    {
        "name": "Vector3D",
        "trans": [
            "【Vector3D】Represents a vector in 3-dimensional Cartesian space.",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "Vector3D【Represents】a vector in 3-dimensional Cartesian space.",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Vector3D Represents【a】vector in 3-dimensional Cartesian space.",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "vector",
        "trans": [
            "Vector3D Represents a【vector】in 3-dimensional Cartesian space.",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Vector3D Represents a vector【in】3-dimensional Cartesian space.",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "3-dimensional",
        "trans": [
            "Vector3D Represents a vector in【3-dimensional】Cartesian space.",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "Vector3D Represents a vector in 3-dimensional【Cartesian】space.",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "space.",
        "trans": [
            "Vector3D Represents a vector in 3-dimensional Cartesian【space.】",
            "　　　代表了一个在三维笛卡尔空间中向量。"
        ]
    },
    {
        "name": "BasicSegmentString",
        "trans": [
            "【BasicSegmentString】Represents a list of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "BasicSegmentString【Represents】a list of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BasicSegmentString Represents【a】list of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "list",
        "trans": [
            "BasicSegmentString Represents a【list】of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BasicSegmentString Represents a list【of】contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "contiguous",
        "trans": [
            "BasicSegmentString Represents a list of【contiguous】line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "BasicSegmentString Represents a list of contiguous【line】segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "segments,",
        "trans": [
            "BasicSegmentString Represents a list of contiguous line【segments,】and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "BasicSegmentString Represents a list of contiguous line segments,【and】supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "supports",
        "trans": [
            "BasicSegmentString Represents a list of contiguous line segments, and【supports】noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "noding",
        "trans": [
            "BasicSegmentString Represents a list of contiguous line segments, and supports【noding】the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BasicSegmentString Represents a list of contiguous line segments, and supports noding【the】segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "BasicSegmentString Represents a list of contiguous line segments, and supports noding the【segments.】",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "SnappingIntersectionAdder",
        "trans": [
            "【SnappingIntersectionAdder】Finds intersections between line segments which are being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "SnappingIntersectionAdder【Finds】intersections between line segments which are being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "SnappingIntersectionAdder Finds【intersections】between line segments which are being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "SnappingIntersectionAdder Finds intersections【between】line segments which are being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between【line】segments which are being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line【segments】which are being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments【which】are being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "are",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which【are】being snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "being",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which are【being】snapped, and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "snapped,",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which are being【snapped,】and adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which are being snapped,【and】adds them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "adds",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which are being snapped, and【adds】them as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "them",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which are being snapped, and adds【them】as nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "as",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which are being snapped, and adds them【as】nodes.",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "nodes.",
        "trans": [
            "SnappingIntersectionAdder Finds intersections between line segments which are being snapped, and adds them as【nodes.】",
            "　　　发现路口线段之间正在拍摄,"
        ]
    },
    {
        "name": "SnappingNoder",
        "trans": [
            "【SnappingNoder】Nodes a set of segment strings snapping vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "Nodes",
        "trans": [
            "SnappingNoder【Nodes】a set of segment strings snapping vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SnappingNoder Nodes【a】set of segment strings snapping vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "set",
        "trans": [
            "SnappingNoder Nodes a【set】of segment strings snapping vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SnappingNoder Nodes a set【of】segment strings snapping vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "SnappingNoder Nodes a set of【segment】strings snapping vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "strings",
        "trans": [
            "SnappingNoder Nodes a set of segment【strings】snapping vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "snapping",
        "trans": [
            "SnappingNoder Nodes a set of segment strings【snapping】vertices and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping【vertices】and intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices【and】intersection points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and【intersection】points together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "points",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection【points】together if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "together",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points【together】if they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "if",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together【if】they lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "they",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if【they】lie within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "lie",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they【lie】within the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "within",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie【within】the given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie within【the】given snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "given",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie within the【given】snap tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "snap",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie within the given【snap】tolerance distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "tolerance",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie within the given snap【tolerance】distance.",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "distance.",
        "trans": [
            "SnappingNoder Nodes a set of segment strings snapping vertices and intersection points together if they lie within the given snap tolerance【distance.】",
            "　　　节点组段字符串"
        ]
    },
    {
        "name": "SnappingPointIndex",
        "trans": [
            "【SnappingPointIndex】An index providing fast creation and lookup of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "SnappingPointIndex【An】index providing fast creation and lookup of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "index",
        "trans": [
            "SnappingPointIndex An【index】providing fast creation and lookup of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "providing",
        "trans": [
            "SnappingPointIndex An index【providing】fast creation and lookup of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "fast",
        "trans": [
            "SnappingPointIndex An index providing【fast】creation and lookup of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "creation",
        "trans": [
            "SnappingPointIndex An index providing fast【creation】and lookup of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SnappingPointIndex An index providing fast creation【and】lookup of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "lookup",
        "trans": [
            "SnappingPointIndex An index providing fast creation and【lookup】of snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SnappingPointIndex An index providing fast creation and lookup【of】snap points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "snap",
        "trans": [
            "SnappingPointIndex An index providing fast creation and lookup of【snap】points.",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "points.",
        "trans": [
            "SnappingPointIndex An index providing fast creation and lookup of snap【points.】",
            "　　　索引提供快速的创建和查找提前点。"
        ]
    },
    {
        "name": "FastNodingValidator",
        "trans": [
            "【FastNodingValidator】Validates that a collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "Validates",
        "trans": [
            "FastNodingValidator【Validates】that a collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "FastNodingValidator Validates【that】a collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FastNodingValidator Validates that【a】collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "FastNodingValidator Validates that a【collection】of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "FastNodingValidator Validates that a collection【of】SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "FastNodingValidator Validates that a collection of【SegmentStrings】is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "FastNodingValidator Validates that a collection of SegmentStrings【is】correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "correctly",
        "trans": [
            "FastNodingValidator Validates that a collection of SegmentStrings is【correctly】noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "noded.",
        "trans": [
            "FastNodingValidator Validates that a collection of SegmentStrings is correctly【noded.】",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "FastSegmentSetIntersectionFinder",
        "trans": [
            "【FastSegmentSetIntersectionFinder】Finds if two sets of SegmentStrings intersect.",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "FastSegmentSetIntersectionFinder【Finds】if two sets of SegmentStrings intersect.",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "if",
        "trans": [
            "FastSegmentSetIntersectionFinder Finds【if】two sets of SegmentStrings intersect.",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "FastSegmentSetIntersectionFinder Finds if【two】sets of SegmentStrings intersect.",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "FastSegmentSetIntersectionFinder Finds if two【sets】of SegmentStrings intersect.",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "FastSegmentSetIntersectionFinder Finds if two sets【of】SegmentStrings intersect.",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "FastSegmentSetIntersectionFinder Finds if two sets of【SegmentStrings】intersect.",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "intersect.",
        "trans": [
            "FastSegmentSetIntersectionFinder Finds if two sets of SegmentStrings【intersect.】",
            "　　　发现如果两套SegmentStrings相交。"
        ]
    },
    {
        "name": "InteriorIntersectionFinderAdder",
        "trans": [
            "【InteriorIntersectionFinderAdder】Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "InteriorIntersectionFinderAdder【Finds】interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "interior",
        "trans": [
            "InteriorIntersectionFinderAdder Finds【interior】intersections between line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior【intersections】between line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections【between】line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between【line】segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line【segments】in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments【in】NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "NodedSegmentStrings,",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in【NodedSegmentStrings,】and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings,【and】adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "adds",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and【adds】them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "them",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds【them】as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "as",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them【as】nodes using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as【nodes】using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes【using】NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "NodedSegmentString.addIntersection(LineIntersector,",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using【NodedSegmentString.addIntersection(LineIntersector,】int, int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "int,",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector,【int,】int, int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "int,",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int,【int,】int).",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "int).",
        "trans": [
            "InteriorIntersectionFinderAdder Finds interior intersections between line segments in NodedSegmentStrings, and adds them as nodes using NodedSegmentString.addIntersection(LineIntersector, int, int,【int).】",
            "　　　发现内部NodedSegmentStrings线段之间的十字路口,"
        ]
    },
    {
        "name": "IntersectionAdder",
        "trans": [
            "【IntersectionAdder】Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "IntersectionAdder【Computes】the possible intersections between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "the",
        "trans": [
            "IntersectionAdder Computes【the】possible intersections between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "possible",
        "trans": [
            "IntersectionAdder Computes the【possible】intersections between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "IntersectionAdder Computes the possible【intersections】between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "between",
        "trans": [
            "IntersectionAdder Computes the possible intersections【between】two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "two",
        "trans": [
            "IntersectionAdder Computes the possible intersections between【two】line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "line",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two【line】segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line【segments】in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "in",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments【in】NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "NodedSegmentStrings",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in【NodedSegmentStrings】and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "and",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings【and】adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "adds",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and【adds】them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "them",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds【them】to each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "to",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them【to】each string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "each",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to【each】string using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "string",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to each【string】using NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "using",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to each string【using】NodedSegmentString.addIntersection(LineIntersector, int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "NodedSegmentString.addIntersection(LineIntersector,",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to each string using【NodedSegmentString.addIntersection(LineIntersector,】int, int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "int,",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector,【int,】int, int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "int,",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int,【int,】int).",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "int).",
        "trans": [
            "IntersectionAdder Computes the possible intersections between two line segments in NodedSegmentStrings and adds them to each string using NodedSegmentString.addIntersection(LineIntersector, int, int,【int).】",
            "　　　计算两个线段NodedSegmentStrings之间可能的十字路口"
        ]
    },
    {
        "name": "IntersectionFinderAdder",
        "trans": [
            "【IntersectionFinderAdder】Deprecated see InteriorIntersectionFinderAdder",
            "　　　弃用"
        ]
    },
    {
        "name": "Deprecated",
        "trans": [
            "IntersectionFinderAdder【Deprecated】see InteriorIntersectionFinderAdder",
            "　　　弃用"
        ]
    },
    {
        "name": "see",
        "trans": [
            "IntersectionFinderAdder Deprecated【see】InteriorIntersectionFinderAdder",
            "　　　弃用"
        ]
    },
    {
        "name": "InteriorIntersectionFinderAdder",
        "trans": [
            "IntersectionFinderAdder Deprecated see【InteriorIntersectionFinderAdder】",
            "　　　弃用"
        ]
    },
    {
        "name": "IteratedNoder",
        "trans": [
            "【IteratedNoder】Nodes a set of NodedSegmentStrings completely.",
            "　　　节点组NodedSegmentStrings完全。"
        ]
    },
    {
        "name": "Nodes",
        "trans": [
            "IteratedNoder【Nodes】a set of NodedSegmentStrings completely.",
            "　　　节点组NodedSegmentStrings完全。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IteratedNoder Nodes【a】set of NodedSegmentStrings completely.",
            "　　　节点组NodedSegmentStrings完全。"
        ]
    },
    {
        "name": "set",
        "trans": [
            "IteratedNoder Nodes a【set】of NodedSegmentStrings completely.",
            "　　　节点组NodedSegmentStrings完全。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IteratedNoder Nodes a set【of】NodedSegmentStrings completely.",
            "　　　节点组NodedSegmentStrings完全。"
        ]
    },
    {
        "name": "NodedSegmentStrings",
        "trans": [
            "IteratedNoder Nodes a set of【NodedSegmentStrings】completely.",
            "　　　节点组NodedSegmentStrings完全。"
        ]
    },
    {
        "name": "completely.",
        "trans": [
            "IteratedNoder Nodes a set of NodedSegmentStrings【completely.】",
            "　　　节点组NodedSegmentStrings完全。"
        ]
    },
    {
        "name": "MCIndexNoder",
        "trans": [
            "【MCIndexNoder】Nodes a set of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "Nodes",
        "trans": [
            "MCIndexNoder【Nodes】a set of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MCIndexNoder Nodes【a】set of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "set",
        "trans": [
            "MCIndexNoder Nodes a【set】of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MCIndexNoder Nodes a set【of】SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "MCIndexNoder Nodes a set of【SegmentStrings】using a index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "using",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings【using】a index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using【a】index based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "index",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using a【index】based on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "based",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using a index【based】on MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "on",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using a index based【on】MonotoneChains and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "MonotoneChains",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using a index based on【MonotoneChains】and a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "and",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using a index based on MonotoneChains【and】a SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using a index based on MonotoneChains and【a】SpatialIndex.",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "SpatialIndex.",
        "trans": [
            "MCIndexNoder Nodes a set of SegmentStrings using a index based on MonotoneChains and a【SpatialIndex.】",
            "　　　一组节点SegmentStrings使用索引的基础"
        ]
    },
    {
        "name": "MCIndexNoder.SegmentOverlapAction",
        "trans": [
            "【MCIndexNoder.SegmentOverlapAction】",
            "　　　MCIndexNoder.SegmentOverlapAction"
        ]
    },
    {
        "name": "MCIndexSegmentSetMutualIntersector",
        "trans": [
            "【MCIndexSegmentSetMutualIntersector】Intersects two sets of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "Intersects",
        "trans": [
            "MCIndexSegmentSetMutualIntersector【Intersects】two sets of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "two",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects【two】sets of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two【sets】of SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets【of】SegmentStrings using a index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of【SegmentStrings】using a index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "using",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings【using】a index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using【a】index based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "index",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using a【index】based on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "based",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using a index【based】on MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "on",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using a index based【on】MonotoneChains and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "MonotoneChains",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using a index based on【MonotoneChains】and a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "and",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using a index based on MonotoneChains【and】a SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using a index based on MonotoneChains and【a】SpatialIndex.",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "SpatialIndex.",
        "trans": [
            "MCIndexSegmentSetMutualIntersector Intersects two sets of SegmentStrings using a index based on MonotoneChains and a【SpatialIndex.】",
            "　　　基于相交两套SegmentStrings使用索引"
        ]
    },
    {
        "name": "MCIndexSegmentSetMutualIntersector.SegmentOverlapAction",
        "trans": [
            "【MCIndexSegmentSetMutualIntersector.SegmentOverlapAction】",
            "　　　MCIndexSegmentSetMutualIntersector.SegmentOverlapAction"
        ]
    },
    {
        "name": "NodedSegmentString",
        "trans": [
            "【NodedSegmentString】Represents a list of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "NodedSegmentString【Represents】a list of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "NodedSegmentString Represents【a】list of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "list",
        "trans": [
            "NodedSegmentString Represents a【list】of contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NodedSegmentString Represents a list【of】contiguous line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "contiguous",
        "trans": [
            "NodedSegmentString Represents a list of【contiguous】line segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "NodedSegmentString Represents a list of contiguous【line】segments, and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "segments,",
        "trans": [
            "NodedSegmentString Represents a list of contiguous line【segments,】and supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "NodedSegmentString Represents a list of contiguous line segments,【and】supports noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "supports",
        "trans": [
            "NodedSegmentString Represents a list of contiguous line segments, and【supports】noding the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "noding",
        "trans": [
            "NodedSegmentString Represents a list of contiguous line segments, and supports【noding】the segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NodedSegmentString Represents a list of contiguous line segments, and supports noding【the】segments.",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "NodedSegmentString Represents a list of contiguous line segments, and supports noding the【segments.】",
            "　　　代表一个连续的线段的列表,"
        ]
    },
    {
        "name": "NodingIntersectionFinder",
        "trans": [
            "【NodingIntersectionFinder】Finds non-noded intersections in a set of SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "NodingIntersectionFinder【Finds】non-noded intersections in a set of SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "non-noded",
        "trans": [
            "NodingIntersectionFinder Finds【non-noded】intersections in a set of SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "NodingIntersectionFinder Finds non-noded【intersections】in a set of SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections【in】a set of SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections in【a】set of SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "set",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections in a【set】of SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections in a set【of】SegmentStrings, if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "SegmentStrings,",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections in a set of【SegmentStrings,】if any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "if",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections in a set of SegmentStrings,【if】any exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "any",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections in a set of SegmentStrings, if【any】exist.",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "exist.",
        "trans": [
            "NodingIntersectionFinder Finds non-noded intersections in a set of SegmentStrings, if any【exist.】",
            "　　　发现在一组SegmentStrings non-noded十字路口,"
        ]
    },
    {
        "name": "NodingValidator",
        "trans": [
            "【NodingValidator】Validates that a collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "Validates",
        "trans": [
            "NodingValidator【Validates】that a collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "NodingValidator Validates【that】a collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "NodingValidator Validates that【a】collection of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "NodingValidator Validates that a【collection】of SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NodingValidator Validates that a collection【of】SegmentStrings is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "NodingValidator Validates that a collection of【SegmentStrings】is correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "NodingValidator Validates that a collection of SegmentStrings【is】correctly noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "correctly",
        "trans": [
            "NodingValidator Validates that a collection of SegmentStrings is【correctly】noded.",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "noded.",
        "trans": [
            "NodingValidator Validates that a collection of SegmentStrings is correctly【noded.】",
            "　　　验证正确SegmentStrings是分散开的集合。"
        ]
    },
    {
        "name": "Octant",
        "trans": [
            "【Octant】Methods for computing and working with octants of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "Methods",
        "trans": [
            "Octant【Methods】for computing and working with octants of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Octant Methods【for】computing and working with octants of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "Octant Methods for【computing】and working with octants of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "and",
        "trans": [
            "Octant Methods for computing【and】working with octants of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "working",
        "trans": [
            "Octant Methods for computing and【working】with octants of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "with",
        "trans": [
            "Octant Methods for computing and working【with】octants of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "octants",
        "trans": [
            "Octant Methods for computing and working with【octants】of the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Octant Methods for computing and working with octants【of】the Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Octant Methods for computing and working with octants of【the】Cartesian plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "Octant Methods for computing and working with octants of the【Cartesian】plane Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "plane",
        "trans": [
            "Octant Methods for computing and working with octants of the Cartesian【plane】Octants are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "Octants",
        "trans": [
            "Octant Methods for computing and working with octants of the Cartesian plane【Octants】are numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "are",
        "trans": [
            "Octant Methods for computing and working with octants of the Cartesian plane Octants【are】numbered as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "numbered",
        "trans": [
            "Octant Methods for computing and working with octants of the Cartesian plane Octants are【numbered】as follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "as",
        "trans": [
            "Octant Methods for computing and working with octants of the Cartesian plane Octants are numbered【as】follows:",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "follows:",
        "trans": [
            "Octant Methods for computing and working with octants of the Cartesian plane Octants are numbered as【follows:】",
            "　　　笛卡尔的方法计算和处理八分圆平面"
        ]
    },
    {
        "name": "OrientedCoordinateArray",
        "trans": [
            "【OrientedCoordinateArray】Allows comparing Coordinate arrays in an orientation-independent way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "Allows",
        "trans": [
            "OrientedCoordinateArray【Allows】comparing Coordinate arrays in an orientation-independent way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "comparing",
        "trans": [
            "OrientedCoordinateArray Allows【comparing】Coordinate arrays in an orientation-independent way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "OrientedCoordinateArray Allows comparing【Coordinate】arrays in an orientation-independent way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "arrays",
        "trans": [
            "OrientedCoordinateArray Allows comparing Coordinate【arrays】in an orientation-independent way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "in",
        "trans": [
            "OrientedCoordinateArray Allows comparing Coordinate arrays【in】an orientation-independent way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "an",
        "trans": [
            "OrientedCoordinateArray Allows comparing Coordinate arrays in【an】orientation-independent way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "orientation-independent",
        "trans": [
            "OrientedCoordinateArray Allows comparing Coordinate arrays in an【orientation-independent】way.",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "way.",
        "trans": [
            "OrientedCoordinateArray Allows comparing Coordinate arrays in an orientation-independent【way.】",
            "　　　允许比较坐标数组"
        ]
    },
    {
        "name": "ScaledNoder",
        "trans": [
            "【ScaledNoder】Wraps a Noder and transforms its input into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "Wraps",
        "trans": [
            "ScaledNoder【Wraps】a Noder and transforms its input into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ScaledNoder Wraps【a】Noder and transforms its input into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "Noder",
        "trans": [
            "ScaledNoder Wraps a【Noder】and transforms its input into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "and",
        "trans": [
            "ScaledNoder Wraps a Noder【and】transforms its input into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "transforms",
        "trans": [
            "ScaledNoder Wraps a Noder and【transforms】its input into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "its",
        "trans": [
            "ScaledNoder Wraps a Noder and transforms【its】input into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "input",
        "trans": [
            "ScaledNoder Wraps a Noder and transforms its【input】into the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "into",
        "trans": [
            "ScaledNoder Wraps a Noder and transforms its input【into】the integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ScaledNoder Wraps a Noder and transforms its input into【the】integer domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "integer",
        "trans": [
            "ScaledNoder Wraps a Noder and transforms its input into the【integer】domain.",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "domain.",
        "trans": [
            "ScaledNoder Wraps a Noder and transforms its input into the integer【domain.】",
            "　　　包装其输入节点和转换"
        ]
    },
    {
        "name": "SegmentExtractingNoder",
        "trans": [
            "【SegmentExtractingNoder】A noder which extracts all line segments as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "A",
        "trans": [
            "SegmentExtractingNoder【A】noder which extracts all line segments as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "noder",
        "trans": [
            "SegmentExtractingNoder A【noder】which extracts all line segments as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SegmentExtractingNoder A noder【which】extracts all line segments as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "SegmentExtractingNoder A noder which【extracts】all line segments as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "all",
        "trans": [
            "SegmentExtractingNoder A noder which extracts【all】line segments as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "line",
        "trans": [
            "SegmentExtractingNoder A noder which extracts all【line】segments as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "SegmentExtractingNoder A noder which extracts all line【segments】as SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "as",
        "trans": [
            "SegmentExtractingNoder A noder which extracts all line segments【as】SegmentStrings.",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "SegmentStrings.",
        "trans": [
            "SegmentExtractingNoder A noder which extracts all line segments as【SegmentStrings.】",
            "　　　一个节点中提取所有的线段"
        ]
    },
    {
        "name": "SegmentIntersectionDetector",
        "trans": [
            "【SegmentIntersectionDetector】Detects and records an intersection between two SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "Detects",
        "trans": [
            "SegmentIntersectionDetector【Detects】and records an intersection between two SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SegmentIntersectionDetector Detects【and】records an intersection between two SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "records",
        "trans": [
            "SegmentIntersectionDetector Detects and【records】an intersection between two SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "SegmentIntersectionDetector Detects and records【an】intersection between two SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "SegmentIntersectionDetector Detects and records an【intersection】between two SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "SegmentIntersectionDetector Detects and records an intersection【between】two SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SegmentIntersectionDetector Detects and records an intersection between【two】SegmentStrings, if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "SegmentStrings,",
        "trans": [
            "SegmentIntersectionDetector Detects and records an intersection between two【SegmentStrings,】if one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "if",
        "trans": [
            "SegmentIntersectionDetector Detects and records an intersection between two SegmentStrings,【if】one exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "one",
        "trans": [
            "SegmentIntersectionDetector Detects and records an intersection between two SegmentStrings, if【one】exists.",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "exists.",
        "trans": [
            "SegmentIntersectionDetector Detects and records an intersection between two SegmentStrings, if one【exists.】",
            "　　　检测和记录两个SegmentStrings之间的一个十字路口,"
        ]
    },
    {
        "name": "SegmentNode",
        "trans": [
            "【SegmentNode】Represents an intersection point between two SegmentStrings.",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "SegmentNode【Represents】an intersection point between two SegmentStrings.",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "SegmentNode Represents【an】intersection point between two SegmentStrings.",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "SegmentNode Represents an【intersection】point between two SegmentStrings.",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "SegmentNode Represents an intersection【point】between two SegmentStrings.",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "SegmentNode Represents an intersection point【between】two SegmentStrings.",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SegmentNode Represents an intersection point between【two】SegmentStrings.",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "SegmentStrings.",
        "trans": [
            "SegmentNode Represents an intersection point between two【SegmentStrings.】",
            "　　　代表了两个SegmentStrings之间的交点。"
        ]
    },
    {
        "name": "SegmentNodeList",
        "trans": [
            "【SegmentNodeList】A list of the SegmentNodes present along a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "SegmentNodeList【A】list of the SegmentNodes present along a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "SegmentNodeList A【list】of the SegmentNodes present along a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentNodeList A list【of】the SegmentNodes present along a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentNodeList A list of【the】SegmentNodes present along a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "SegmentNodes",
        "trans": [
            "SegmentNodeList A list of the【SegmentNodes】present along a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "present",
        "trans": [
            "SegmentNodeList A list of the SegmentNodes【present】along a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "along",
        "trans": [
            "SegmentNodeList A list of the SegmentNodes present【along】a noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SegmentNodeList A list of the SegmentNodes present along【a】noded SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "noded",
        "trans": [
            "SegmentNodeList A list of the SegmentNodes present along a【noded】SegmentString.",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "SegmentString.",
        "trans": [
            "SegmentNodeList A list of the SegmentNodes present along a noded【SegmentString.】",
            "　　　一个列表的分散开沿着SegmentString SegmentNodes礼物。"
        ]
    },
    {
        "name": "SegmentPointComparator",
        "trans": [
            "【SegmentPointComparator】Implements a robust method of comparing the relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "SegmentPointComparator【Implements】a robust method of comparing the relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SegmentPointComparator Implements【a】robust method of comparing the relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "robust",
        "trans": [
            "SegmentPointComparator Implements a【robust】method of comparing the relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "method",
        "trans": [
            "SegmentPointComparator Implements a robust【method】of comparing the relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentPointComparator Implements a robust method【of】comparing the relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "comparing",
        "trans": [
            "SegmentPointComparator Implements a robust method of【comparing】the relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing【the】relative position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the【relative】position of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "position",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative【position】of two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative position【of】two points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative position of【two】points along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "points",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative position of two【points】along the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "along",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative position of two points【along】the same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative position of two points along【the】same segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "same",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative position of two points along the【same】segment.",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "segment.",
        "trans": [
            "SegmentPointComparator Implements a robust method of comparing the relative position of two points along the same【segment.】",
            "　　　实现了一个健壮的比较两个的相对位置的方法"
        ]
    },
    {
        "name": "SegmentStringDissolver",
        "trans": [
            "【SegmentStringDissolver】Dissolves a noded collection of SegmentStrings to produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "Dissolves",
        "trans": [
            "SegmentStringDissolver【Dissolves】a noded collection of SegmentStrings to produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SegmentStringDissolver Dissolves【a】noded collection of SegmentStrings to produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "noded",
        "trans": [
            "SegmentStringDissolver Dissolves a【noded】collection of SegmentStrings to produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "SegmentStringDissolver Dissolves a noded【collection】of SegmentStrings to produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection【of】SegmentStrings to produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of【SegmentStrings】to produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings【to】produce a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "produce",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to【produce】a set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce【a】set of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "set",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce a【set】of merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce a set【of】merged linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "merged",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce a set of【merged】linework with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "linework",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce a set of merged【linework】with unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "with",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce a set of merged linework【with】unique segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "unique",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce a set of merged linework with【unique】segments.",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "SegmentStringDissolver Dissolves a noded collection of SegmentStrings to produce a set of merged linework with unique【segments.】",
            "　　　生产溶解分散开的SegmentStrings集合"
        ]
    },
    {
        "name": "SegmentStringUtil",
        "trans": [
            "【SegmentStringUtil】Utility methods for processing SegmentStrings.",
            "　　　为处理SegmentStrings实用方法。"
        ]
    },
    {
        "name": "Utility",
        "trans": [
            "SegmentStringUtil【Utility】methods for processing SegmentStrings.",
            "　　　为处理SegmentStrings实用方法。"
        ]
    },
    {
        "name": "methods",
        "trans": [
            "SegmentStringUtil Utility【methods】for processing SegmentStrings.",
            "　　　为处理SegmentStrings实用方法。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "SegmentStringUtil Utility methods【for】processing SegmentStrings.",
            "　　　为处理SegmentStrings实用方法。"
        ]
    },
    {
        "name": "processing",
        "trans": [
            "SegmentStringUtil Utility methods for【processing】SegmentStrings.",
            "　　　为处理SegmentStrings实用方法。"
        ]
    },
    {
        "name": "SegmentStrings.",
        "trans": [
            "SegmentStringUtil Utility methods for processing【SegmentStrings.】",
            "　　　为处理SegmentStrings实用方法。"
        ]
    },
    {
        "name": "SimpleNoder",
        "trans": [
            "【SimpleNoder】Nodes a set of SegmentStrings by performing a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "Nodes",
        "trans": [
            "SimpleNoder【Nodes】a set of SegmentStrings by performing a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SimpleNoder Nodes【a】set of SegmentStrings by performing a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "set",
        "trans": [
            "SimpleNoder Nodes a【set】of SegmentStrings by performing a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleNoder Nodes a set【of】SegmentStrings by performing a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "SimpleNoder Nodes a set of【SegmentStrings】by performing a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "by",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings【by】performing a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "performing",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by【performing】a brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing【a】brute-force comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "brute-force",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a【brute-force】comparison of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "comparison",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force【comparison】of every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force comparison【of】every segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "every",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force comparison of【every】segment to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force comparison of every【segment】to every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force comparison of every segment【to】every other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "every",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force comparison of every segment to【every】other one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "other",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force comparison of every segment to every【other】one.",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "one.",
        "trans": [
            "SimpleNoder Nodes a set of SegmentStrings by performing a brute-force comparison of every segment to every other【one.】",
            "　　　SegmentStrings的一组节点"
        ]
    },
    {
        "name": "SimpleSegmentSetMutualIntersector",
        "trans": [
            "【SimpleSegmentSetMutualIntersector】Intersects two sets of SegmentStrings using brute-force comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "Intersects",
        "trans": [
            "SimpleSegmentSetMutualIntersector【Intersects】two sets of SegmentStrings using brute-force comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SimpleSegmentSetMutualIntersector Intersects【two】sets of SegmentStrings using brute-force comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "SimpleSegmentSetMutualIntersector Intersects two【sets】of SegmentStrings using brute-force comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleSegmentSetMutualIntersector Intersects two sets【of】SegmentStrings using brute-force comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "SimpleSegmentSetMutualIntersector Intersects two sets of【SegmentStrings】using brute-force comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SimpleSegmentSetMutualIntersector Intersects two sets of SegmentStrings【using】brute-force comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "brute-force",
        "trans": [
            "SimpleSegmentSetMutualIntersector Intersects two sets of SegmentStrings using【brute-force】comparison.",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "comparison.",
        "trans": [
            "SimpleSegmentSetMutualIntersector Intersects two sets of SegmentStrings using brute-force【comparison.】",
            "　　　相交两套SegmentStrings使用"
        ]
    },
    {
        "name": "SinglePassNoder",
        "trans": [
            "【SinglePassNoder】Base class for Noders which make a single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "Base",
        "trans": [
            "SinglePassNoder【Base】class for Noders which make a single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "class",
        "trans": [
            "SinglePassNoder Base【class】for Noders which make a single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "for",
        "trans": [
            "SinglePassNoder Base class【for】Noders which make a single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "Noders",
        "trans": [
            "SinglePassNoder Base class for【Noders】which make a single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "which",
        "trans": [
            "SinglePassNoder Base class for Noders【which】make a single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "make",
        "trans": [
            "SinglePassNoder Base class for Noders which【make】a single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SinglePassNoder Base class for Noders which make【a】single pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "single",
        "trans": [
            "SinglePassNoder Base class for Noders which make a【single】pass to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "pass",
        "trans": [
            "SinglePassNoder Base class for Noders which make a single【pass】to find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SinglePassNoder Base class for Noders which make a single pass【to】find intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "find",
        "trans": [
            "SinglePassNoder Base class for Noders which make a single pass to【find】intersections.",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "intersections.",
        "trans": [
            "SinglePassNoder Base class for Noders which make a single pass to find【intersections.】",
            "　　　基类Noders使得单一"
        ]
    },
    {
        "name": "ValidatingNoder",
        "trans": [
            "【ValidatingNoder】A wrapper for Noders which validates the output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ValidatingNoder【A】wrapper for Noders which validates the output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "wrapper",
        "trans": [
            "ValidatingNoder A【wrapper】for Noders which validates the output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ValidatingNoder A wrapper【for】Noders which validates the output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "Noders",
        "trans": [
            "ValidatingNoder A wrapper for【Noders】which validates the output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "which",
        "trans": [
            "ValidatingNoder A wrapper for Noders【which】validates the output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "validates",
        "trans": [
            "ValidatingNoder A wrapper for Noders which【validates】the output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ValidatingNoder A wrapper for Noders which validates【the】output arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "output",
        "trans": [
            "ValidatingNoder A wrapper for Noders which validates the【output】arrangement is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "arrangement",
        "trans": [
            "ValidatingNoder A wrapper for Noders which validates the output【arrangement】is correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "is",
        "trans": [
            "ValidatingNoder A wrapper for Noders which validates the output arrangement【is】correctly noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "correctly",
        "trans": [
            "ValidatingNoder A wrapper for Noders which validates the output arrangement is【correctly】noded.",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "noded.",
        "trans": [
            "ValidatingNoder A wrapper for Noders which validates the output arrangement is correctly【noded.】",
            "　　　一个包装器Noders验证"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_ATTR_SRSNAME",
            "　　　GML_ATTR_SRSNAME"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_ATTR_SRSNAME",
            "　　　GML_ATTR_SRSNAME"
        ]
    },
    {
        "name": "GML_ATTR_SRSNAME",
        "trans": [
            "static String【GML_ATTR_SRSNAME】",
            "　　　GML_ATTR_SRSNAME"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_BOX",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_BOX",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_BOX",
        "trans": [
            "static String【GML_BOX】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_COORD",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_COORD",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_COORD",
        "trans": [
            "static String【GML_COORD】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_COORD_X",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_COORD_X",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_COORD_X",
        "trans": [
            "static String【GML_COORD_X】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_COORD_Y",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_COORD_Y",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_COORD_Y",
        "trans": [
            "static String【GML_COORD_Y】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_COORD_Z",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_COORD_Z",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_COORD_Z",
        "trans": [
            "static String【GML_COORD_Z】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_COORDINATES",
            "　　　GML_COORDINATES"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_COORDINATES",
            "　　　GML_COORDINATES"
        ]
    },
    {
        "name": "GML_COORDINATES",
        "trans": [
            "static String【GML_COORDINATES】",
            "　　　GML_COORDINATES"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_GEOMETRY_MEMBER",
            "　　　GML_GEOMETRY_MEMBER"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_GEOMETRY_MEMBER",
            "　　　GML_GEOMETRY_MEMBER"
        ]
    },
    {
        "name": "GML_GEOMETRY_MEMBER",
        "trans": [
            "static String【GML_GEOMETRY_MEMBER】",
            "　　　GML_GEOMETRY_MEMBER"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_INNER_BOUNDARY_IS",
            "　　　GML_INNER_BOUNDARY_IS"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_INNER_BOUNDARY_IS",
            "　　　GML_INNER_BOUNDARY_IS"
        ]
    },
    {
        "name": "GML_INNER_BOUNDARY_IS",
        "trans": [
            "static String【GML_INNER_BOUNDARY_IS】",
            "　　　GML_INNER_BOUNDARY_IS"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_LINEARRING",
            "　　　GML_LINEARRING"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_LINEARRING",
            "　　　GML_LINEARRING"
        ]
    },
    {
        "name": "GML_LINEARRING",
        "trans": [
            "static String【GML_LINEARRING】",
            "　　　GML_LINEARRING"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_LINESTRING",
            "　　　GML_LINESTRING"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_LINESTRING",
            "　　　GML_LINESTRING"
        ]
    },
    {
        "name": "GML_LINESTRING",
        "trans": [
            "static String【GML_LINESTRING】",
            "　　　GML_LINESTRING"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_LINESTRING_MEMBER",
            "　　　GML_LINESTRING_MEMBER"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_LINESTRING_MEMBER",
            "　　　GML_LINESTRING_MEMBER"
        ]
    },
    {
        "name": "GML_LINESTRING_MEMBER",
        "trans": [
            "static String【GML_LINESTRING_MEMBER】",
            "　　　GML_LINESTRING_MEMBER"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_MULTI_GEOMETRY",
            "　　　GML_MULTI_GEOMETRY"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_MULTI_GEOMETRY",
            "　　　GML_MULTI_GEOMETRY"
        ]
    },
    {
        "name": "GML_MULTI_GEOMETRY",
        "trans": [
            "static String【GML_MULTI_GEOMETRY】",
            "　　　GML_MULTI_GEOMETRY"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_MULTI_LINESTRING",
            "　　　GML_MULTI_LINESTRING"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_MULTI_LINESTRING",
            "　　　GML_MULTI_LINESTRING"
        ]
    },
    {
        "name": "GML_MULTI_LINESTRING",
        "trans": [
            "static String【GML_MULTI_LINESTRING】",
            "　　　GML_MULTI_LINESTRING"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】visit(QuadEdge[] triEdges) Visits the QuadEdges of a triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "visit(QuadEdge[]",
        "trans": [
            "void【visit(QuadEdge[]】triEdges) Visits the QuadEdges of a triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "triEdges)",
        "trans": [
            "void visit(QuadEdge[]【triEdges)】Visits the QuadEdges of a triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "Visits",
        "trans": [
            "void visit(QuadEdge[] triEdges)【Visits】the QuadEdges of a triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void visit(QuadEdge[] triEdges) Visits【the】QuadEdges of a triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "QuadEdges",
        "trans": [
            "void visit(QuadEdge[] triEdges) Visits the【QuadEdges】of a triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "void visit(QuadEdge[] triEdges) Visits the QuadEdges【of】a triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void visit(QuadEdge[] triEdges) Visits the QuadEdges of【a】triangle.",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "triangle.",
        "trans": [
            "void visit(QuadEdge[] triEdges) Visits the QuadEdges of a【triangle.】",
            "　　　访问(QuadEdge [] triEdges)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String ALTITUDE_MODE_ABSOLUTE The KML standard value absolute for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】ALTITUDE_MODE_ABSOLUTE The KML standard value absolute for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "ALTITUDE_MODE_ABSOLUTE",
        "trans": [
            "static String【ALTITUDE_MODE_ABSOLUTE】The KML standard value absolute for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE【The】KML standard value absolute for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "KML",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The【KML】standard value absolute for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "standard",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The KML【standard】value absolute for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The KML standard【value】absolute for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "absolute",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The KML standard value【absolute】for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The KML standard value absolute【for】use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "use",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The KML standard value absolute for【use】in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The KML standard value absolute for use【in】setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "setAltitudeMode(String).",
        "trans": [
            "static String ALTITUDE_MODE_ABSOLUTE The KML standard value absolute for use in【setAltitudeMode(String).】",
            "　　　ALTITUDE_MODE_ABSOLUTE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String ALTITUDE_MODE_CLAMPTOGROUND The KML standard value clampToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】ALTITUDE_MODE_CLAMPTOGROUND The KML standard value clampToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "ALTITUDE_MODE_CLAMPTOGROUND",
        "trans": [
            "static String【ALTITUDE_MODE_CLAMPTOGROUND】The KML standard value clampToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND【The】KML standard value clampToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "KML",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The【KML】standard value clampToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "standard",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The KML【standard】value clampToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The KML standard【value】clampToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "clampToGround",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The KML standard value【clampToGround】for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The KML standard value clampToGround【for】use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "use",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The KML standard value clampToGround for【use】in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The KML standard value clampToGround for use【in】setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "setAltitudeMode(String).",
        "trans": [
            "static String ALTITUDE_MODE_CLAMPTOGROUND The KML standard value clampToGround for use in【setAltitudeMode(String).】",
            "　　　ALTITUDE_MODE_CLAMPTOGROUND"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String ALTITUDE_MODE_RELATIVETOGROUND The KML standard value relativeToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】ALTITUDE_MODE_RELATIVETOGROUND The KML standard value relativeToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "ALTITUDE_MODE_RELATIVETOGROUND",
        "trans": [
            "static String【ALTITUDE_MODE_RELATIVETOGROUND】The KML standard value relativeToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND【The】KML standard value relativeToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "KML",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The【KML】standard value relativeToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "standard",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The KML【standard】value relativeToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The KML standard【value】relativeToGround for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "relativeToGround",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The KML standard value【relativeToGround】for use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The KML standard value relativeToGround【for】use in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "use",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The KML standard value relativeToGround for【use】in setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The KML standard value relativeToGround for use【in】setAltitudeMode(String).",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "setAltitudeMode(String).",
        "trans": [
            "static String ALTITUDE_MODE_RELATIVETOGROUND The KML standard value relativeToGround for use in【setAltitudeMode(String).】",
            "　　　ALTITUDE_MODE_RELATIVETOGROUND"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_MULTI_POINT",
            "　　　GML_MULTI_POINT"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_MULTI_POINT",
            "　　　GML_MULTI_POINT"
        ]
    },
    {
        "name": "GML_MULTI_POINT",
        "trans": [
            "static String【GML_MULTI_POINT】",
            "　　　GML_MULTI_POINT"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_MULTI_POLYGON",
            "　　　GML_MULTI_POLYGON"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_MULTI_POLYGON",
            "　　　GML_MULTI_POLYGON"
        ]
    },
    {
        "name": "GML_MULTI_POLYGON",
        "trans": [
            "static String【GML_MULTI_POLYGON】",
            "　　　GML_MULTI_POLYGON"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_NAMESPACE",
            "　　　GML_NAMESPACE"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_NAMESPACE",
            "　　　GML_NAMESPACE"
        ]
    },
    {
        "name": "GML_NAMESPACE",
        "trans": [
            "static String【GML_NAMESPACE】",
            "　　　GML_NAMESPACE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_OUTER_BOUNDARY_IS",
            "　　　GML_OUTER_BOUNDARY_IS"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_OUTER_BOUNDARY_IS",
            "　　　GML_OUTER_BOUNDARY_IS"
        ]
    },
    {
        "name": "GML_OUTER_BOUNDARY_IS",
        "trans": [
            "static String【GML_OUTER_BOUNDARY_IS】",
            "　　　GML_OUTER_BOUNDARY_IS"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_POINT",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_POINT",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_POINT",
        "trans": [
            "static String【GML_POINT】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_POINT_MEMBER",
            "　　　GML_POINT_MEMBER"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_POINT_MEMBER",
            "　　　GML_POINT_MEMBER"
        ]
    },
    {
        "name": "GML_POINT_MEMBER",
        "trans": [
            "static String【GML_POINT_MEMBER】",
            "　　　GML_POINT_MEMBER"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_POLYGON",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_POLYGON",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_POLYGON",
        "trans": [
            "static String【GML_POLYGON】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_POLYGON_MEMBER",
            "　　　GML_POLYGON_MEMBER"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_POLYGON_MEMBER",
            "　　　GML_POLYGON_MEMBER"
        ]
    },
    {
        "name": "GML_POLYGON_MEMBER",
        "trans": [
            "static String【GML_POLYGON_MEMBER】",
            "　　　GML_POLYGON_MEMBER"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String GML_PREFIX",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】GML_PREFIX",
            "　　　静态字符串"
        ]
    },
    {
        "name": "GML_PREFIX",
        "trans": [
            "static String【GML_PREFIX】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "visit(QuadEdgeTriangle",
        "trans": [
            "boolean【visit(QuadEdgeTriangle】currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "currTri,",
        "trans": [
            "boolean visit(QuadEdgeTriangle【currTri,】int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri,【int】edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "edgeIndex,",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int【edgeIndex,】QuadEdgeTriangle neighbTri) Visits a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "QuadEdgeTriangle",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex,【QuadEdgeTriangle】neighbTri) Visits a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "neighbTri)",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle【neighbTri)】Visits a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "Visits",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri)【Visits】a triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits【a】triangle during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "triangle",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a【triangle】during a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "during",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle【during】a traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during【a】traversal of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "traversal",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a【traversal】of a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a traversal【of】a QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a traversal of【a】QuadEdgeSubdivision.",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "QuadEdgeSubdivision.",
        "trans": [
            "boolean visit(QuadEdgeTriangle currTri, int edgeIndex, QuadEdgeTriangle neighbTri) Visits a triangle during a traversal of a【QuadEdgeSubdivision.】",
            "　　　访问(QuadEdgeTriangle currTri,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int XY_PLANE Enums for the 3 coordinate planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】XY_PLANE Enums for the 3 coordinate planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "XY_PLANE",
        "trans": [
            "static int【XY_PLANE】Enums for the 3 coordinate planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "Enums",
        "trans": [
            "static int XY_PLANE【Enums】for the 3 coordinate planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "for",
        "trans": [
            "static int XY_PLANE Enums【for】the 3 coordinate planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int XY_PLANE Enums for【the】3 coordinate planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "3",
        "trans": [
            "static int XY_PLANE Enums for the【3】coordinate planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "static int XY_PLANE Enums for the 3【coordinate】planes",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "planes",
        "trans": [
            "static int XY_PLANE Enums for the 3 coordinate【planes】",
            "　　　XY_PLANE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int XZ_PLANE",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】XZ_PLANE",
            "　　　静态int"
        ]
    },
    {
        "name": "XZ_PLANE",
        "trans": [
            "static int【XZ_PLANE】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int YZ_PLANE",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】YZ_PLANE",
            "　　　静态int"
        ]
    },
    {
        "name": "YZ_PLANE",
        "trans": [
            "static int【YZ_PLANE】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class MCIndexSegmentSetMutualIntersector.SegmentOverlapAction",
            "　　　MCIndexSegmentSetMutualIntersector.SegmentOverlapAction"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】MCIndexSegmentSetMutualIntersector.SegmentOverlapAction",
            "　　　MCIndexSegmentSetMutualIntersector.SegmentOverlapAction"
        ]
    },
    {
        "name": "MCIndexSegmentSetMutualIntersector.SegmentOverlapAction",
        "trans": [
            "static class【MCIndexSegmentSetMutualIntersector.SegmentOverlapAction】",
            "　　　MCIndexSegmentSetMutualIntersector.SegmentOverlapAction"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】coord",
            "　　　协调"
        ]
    },
    {
        "name": "coord",
        "trans": [
            "Coordinate【coord】",
            "　　　协调"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】segmentIndex",
            "　　　segmentIndex"
        ]
    },
    {
        "name": "segmentIndex",
        "trans": [
            "int【segmentIndex】",
            "　　　segmentIndex"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "static【interface】SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "SegmentStringDissolver.SegmentStringMerger",
        "trans": [
            "static interface【SegmentStringDissolver.SegmentStringMerger】A merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger【A】merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "merging",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A【merging】strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "strategy",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging【strategy】which can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy【which】can be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "can",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which【can】be used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can【be】used to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "used",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be【used】to update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used【to】update the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "update",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to【update】the context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update【the】context data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "context",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the【context】data of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "data",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context【data】of SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data【of】SegmentStrings which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of【SegmentStrings】which are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings【which】are merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "are",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which【are】merged during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "merged",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are【merged】during the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "during",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged【during】the dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during【the】dissolve process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "dissolve",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during the【dissolve】process.",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "process.",
        "trans": [
            "static interface SegmentStringDissolver.SegmentStringMerger A merging strategy which can be used to update the context data of SegmentStrings which are merged during the dissolve【process.】",
            "　　　SegmentStringDissolver.SegmentStringMerger"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int octant(Coordinate p0, Coordinate p1) Returns the octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】octant(Coordinate p0, Coordinate p1) Returns the octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "octant(Coordinate",
        "trans": [
            "static int【octant(Coordinate】p0, Coordinate p1) Returns the octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "p0,",
        "trans": [
            "static int octant(Coordinate【p0,】Coordinate p1) Returns the octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static int octant(Coordinate p0,【Coordinate】p1) Returns the octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "p1)",
        "trans": [
            "static int octant(Coordinate p0, Coordinate【p1)】Returns the octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1)【Returns】the octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns【the】octant of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "octant",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the【octant】of a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant【of】a directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of【a】directed line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "directed",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of a【directed】line segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of a directed【line】segment from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of a directed line【segment】from p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "from",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of a directed line segment【from】p0 to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "p0",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of a directed line segment from【p0】to p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of a directed line segment from p0【to】p1.",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "p1.",
        "trans": [
            "static int octant(Coordinate p0, Coordinate p1) Returns the octant of a directed line segment from p0 to【p1.】",
            "　　　八分仪(协调p0,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "octant(double",
        "trans": [
            "static int【octant(double】dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "dx,",
        "trans": [
            "static int octant(double【dx,】double dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int octant(double dx,【double】dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "dy)",
        "trans": [
            "static int octant(double dx, double【dy)】Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "static int octant(double dx, double dy)【Returns】the octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int octant(double dx, double dy) Returns【the】octant of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "octant",
        "trans": [
            "static int octant(double dx, double dy) Returns the【octant】of a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant【of】a directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of【a】directed line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "directed",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a【directed】line segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed【line】segment (specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line【segment】(specified as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "(specified",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment【(specified】as x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "as",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified【as】x and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "x",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as【x】and y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x【and】y displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "y",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and【y】displacements, which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "displacements,",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y【displacements,】which cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements,【which】cannot both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "cannot",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements, which【cannot】both be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "both",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot【both】be 0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both【be】0).",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "0).",
        "trans": [
            "static int octant(double dx, double dy) Returns the octant of a directed line segment (specified as x and y displacements, which cannot both be【0).】",
            "　　　八分仪(双dx,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class MCIndexNoder.SegmentOverlapAction",
            "　　　MCIndexNoder.SegmentOverlapAction"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】MCIndexNoder.SegmentOverlapAction",
            "　　　MCIndexNoder.SegmentOverlapAction"
        ]
    },
    {
        "name": "MCIndexNoder.SegmentOverlapAction",
        "trans": [
            "static class【MCIndexNoder.SegmentOverlapAction】",
            "　　　MCIndexNoder.SegmentOverlapAction"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MAX_ITER",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MAX_ITER",
            "　　　静态int"
        ]
    },
    {
        "name": "MAX_ITER",
        "trans": [
            "static int【MAX_ITER】",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】numInteriorIntersections",
            "　　　numInteriorIntersections"
        ]
    },
    {
        "name": "numInteriorIntersections",
        "trans": [
            "int【numInteriorIntersections】",
            "　　　numInteriorIntersections"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】numIntersections",
            "　　　numIntersections"
        ]
    },
    {
        "name": "numIntersections",
        "trans": [
            "int【numIntersections】",
            "　　　numIntersections"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】numProperIntersections",
            "　　　numProperIntersections"
        ]
    },
    {
        "name": "numProperIntersections",
        "trans": [
            "int【numProperIntersections】",
            "　　　numProperIntersections"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】numTests",
            "　　　numTests"
        ]
    },
    {
        "name": "numTests",
        "trans": [
            "int【numTests】",
            "　　　numTests"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "merge(SegmentString",
        "trans": [
            "void【merge(SegmentString】mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "mergeTarget,",
        "trans": [
            "void merge(SegmentString【mergeTarget,】SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "SegmentString",
        "trans": [
            "void merge(SegmentString mergeTarget,【SegmentString】ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "ssToMerge,",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString【ssToMerge,】boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge,【boolean】isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "isSameOrientation)",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean【isSameOrientation)】Updates the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "Updates",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation)【Updates】the context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates【the】context data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "context",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the【context】data of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "data",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context【data】of a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data【of】a SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of【a】SegmentString when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "SegmentString",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a【SegmentString】when an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "when",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString【when】an identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when【an】identical (up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "identical",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an【identical】(up to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "(up",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical【(up】to orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up【to】orientation) one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "orientation)",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to【orientation)】one is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "one",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation)【one】is found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "is",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one【is】found during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "found",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is【found】during dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "during",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found【during】dissolving.",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "dissolving.",
        "trans": [
            "void merge(SegmentString mergeTarget, SegmentString ssToMerge, boolean isSameOrientation) Updates the context data of a SegmentString when an identical (up to orientation) one is found during【dissolving.】",
            "　　　合并(SegmentString mergeTarget,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】getCoordinate(int i)",
            "　　　getCoordinate(int i)"
        ]
    },
    {
        "name": "getCoordinate(int",
        "trans": [
            "Coordinate【getCoordinate(int】i)",
            "　　　getCoordinate(int i)"
        ]
    },
    {
        "name": "i)",
        "trans": [
            "Coordinate getCoordinate(int【i)】",
            "　　　getCoordinate(int i)"
        ]
    },
    {
        "name": "Coordinate[]",
        "trans": [
            "【Coordinate[]】getCoordinates()",
            "　　　getCoordinates ()"
        ]
    },
    {
        "name": "getCoordinates()",
        "trans": [
            "Coordinate[]【getCoordinates()】",
            "　　　getCoordinates ()"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "【Object】getData() Gets the user-defined data for this segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "getData()",
        "trans": [
            "Object【getData()】Gets the user-defined data for this segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "Object getData()【Gets】the user-defined data for this segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Object getData() Gets【the】user-defined data for this segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "user-defined",
        "trans": [
            "Object getData() Gets the【user-defined】data for this segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "data",
        "trans": [
            "Object getData() Gets the user-defined【data】for this segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Object getData() Gets the user-defined data【for】this segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "Object getData() Gets the user-defined data for【this】segment string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "Object getData() Gets the user-defined data for this【segment】string.",
            "　　　getData ()"
        ]
    },
    {
        "name": "string.",
        "trans": [
            "Object getData() Gets the user-defined data for this segment【string.】",
            "　　　getData ()"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】isClosed()",
            "　　　关闭()"
        ]
    },
    {
        "name": "isClosed()",
        "trans": [
            "boolean【isClosed()】",
            "　　　关闭()"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】setData(Object data) Sets the user-defined data for this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "setData(Object",
        "trans": [
            "void【setData(Object】data) Sets the user-defined data for this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "data)",
        "trans": [
            "void setData(Object【data)】Sets the user-defined data for this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "Sets",
        "trans": [
            "void setData(Object data)【Sets】the user-defined data for this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void setData(Object data) Sets【the】user-defined data for this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "user-defined",
        "trans": [
            "void setData(Object data) Sets the【user-defined】data for this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "data",
        "trans": [
            "void setData(Object data) Sets the user-defined【data】for this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "for",
        "trans": [
            "void setData(Object data) Sets the user-defined data【for】this segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "this",
        "trans": [
            "void setData(Object data) Sets the user-defined data for【this】segment string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "void setData(Object data) Sets the user-defined data for this【segment】string.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "string.",
        "trans": [
            "void setData(Object data) Sets the user-defined data for this segment【string.】",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】size()",
            "　　　尺寸()"
        ]
    },
    {
        "name": "size()",
        "trans": [
            "int【size()】",
            "　　　尺寸()"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "process(Collection",
        "trans": [
            "void【process(Collection】segStrings, SegmentIntersector segInt) Computes the intersections with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "segStrings,",
        "trans": [
            "void process(Collection【segStrings,】SegmentIntersector segInt) Computes the intersections with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "SegmentIntersector",
        "trans": [
            "void process(Collection segStrings,【SegmentIntersector】segInt) Computes the intersections with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "segInt)",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector【segInt)】Computes the intersections with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt)【Computes】the intersections with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes【the】intersections with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the【intersections】with a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections【with】a given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with【a】given set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a【given】set of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "set",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given【set】of SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given set【of】SegmentStrings, using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "SegmentStrings,",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given set of【SegmentStrings,】using the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given set of SegmentStrings,【using】the supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given set of SegmentStrings, using【the】supplied SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "supplied",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given set of SegmentStrings, using the【supplied】SegmentIntersector.",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "SegmentIntersector.",
        "trans": [
            "void process(Collection segStrings, SegmentIntersector segInt) Computes the intersections with a given set of SegmentStrings, using the supplied【SegmentIntersector.】",
            "　　　过程(segStrings集合,"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】isDone() Reports whether the client of this class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "isDone()",
        "trans": [
            "boolean【isDone()】Reports whether the client of this class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "Reports",
        "trans": [
            "boolean isDone()【Reports】whether the client of this class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean isDone() Reports【whether】the client of this class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean isDone() Reports whether【the】client of this class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "client",
        "trans": [
            "boolean isDone() Reports whether the【client】of this class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "boolean isDone() Reports whether the client【of】this class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "boolean isDone() Reports whether the client of【this】class needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "class",
        "trans": [
            "boolean isDone() Reports whether the client of this【class】needs to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "needs",
        "trans": [
            "boolean isDone() Reports whether the client of this class【needs】to continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "to",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs【to】continue testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "continue",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs to【continue】testing all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "testing",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs to continue【testing】all intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "all",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs to continue testing【all】intersections in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs to continue testing all【intersections】in an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "in",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs to continue testing all intersections【in】an arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "an",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs to continue testing all intersections in【an】arrangement.",
            "　　　结束()"
        ]
    },
    {
        "name": "arrangement.",
        "trans": [
            "boolean isDone() Reports whether the client of this class needs to continue testing all intersections in an【arrangement.】",
            "　　　结束()"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "processIntersections(SegmentString",
        "trans": [
            "void【processIntersections(SegmentString】e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "e0,",
        "trans": [
            "void processIntersections(SegmentString【e0,】int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "int",
        "trans": [
            "void processIntersections(SegmentString e0,【int】segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "segIndex0,",
        "trans": [
            "void processIntersections(SegmentString e0, int【segIndex0,】SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "SegmentString",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0,【SegmentString】e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "e1,",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString【e1,】int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "int",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1,【int】segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "segIndex1)",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int【segIndex1)】This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "This",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1)【This】method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "method",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This【method】is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "is",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method【is】called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "called",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is【called】by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "by",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called【by】clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "clients",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by【clients】of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "of",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients【of】the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of【the】SegmentIntersector interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "SegmentIntersector",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the【SegmentIntersector】interface to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector【interface】to process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "to",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface【to】process intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "process",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to【process】intersections for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process【intersections】for two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "for",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections【for】two segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "two",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for【two】segments of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two【segments】of the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "of",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments【of】the SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of【the】SegmentStrings being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "SegmentStrings",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the【SegmentStrings】being intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "being",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings【being】intersected.",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "intersected.",
        "trans": [
            "void processIntersections(SegmentString e0, int segIndex0, SegmentString e1, int segIndex1) This method is called by clients of the SegmentIntersector interface to process intersections for two segments of the SegmentStrings being【intersected.】",
            "　　　processIntersections (SegmentString e0、"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】computeNodes(Collection segStrings) Computes the noding for a collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "computeNodes(Collection",
        "trans": [
            "void【computeNodes(Collection】segStrings) Computes the noding for a collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "segStrings)",
        "trans": [
            "void computeNodes(Collection【segStrings)】Computes the noding for a collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "void computeNodes(Collection segStrings)【Computes】the noding for a collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void computeNodes(Collection segStrings) Computes【the】noding for a collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "noding",
        "trans": [
            "void computeNodes(Collection segStrings) Computes the【noding】for a collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "for",
        "trans": [
            "void computeNodes(Collection segStrings) Computes the noding【for】a collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void computeNodes(Collection segStrings) Computes the noding for【a】collection of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "void computeNodes(Collection segStrings) Computes the noding for a【collection】of SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "void computeNodes(Collection segStrings) Computes the noding for a collection【of】SegmentStrings.",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "SegmentStrings.",
        "trans": [
            "void computeNodes(Collection segStrings) Computes the noding for a collection of【SegmentStrings.】",
            "　　　computenode(收集segStrings)"
        ]
    },
    {
        "name": "Collection",
        "trans": [
            "【Collection】getNodedSubstrings() Returns a Collection of fully noded SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "getNodedSubstrings()",
        "trans": [
            "Collection【getNodedSubstrings()】Returns a Collection of fully noded SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "Collection getNodedSubstrings()【Returns】a Collection of fully noded SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Collection getNodedSubstrings() Returns【a】Collection of fully noded SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "Collection",
        "trans": [
            "Collection getNodedSubstrings() Returns a【Collection】of fully noded SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Collection getNodedSubstrings() Returns a Collection【of】fully noded SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "fully",
        "trans": [
            "Collection getNodedSubstrings() Returns a Collection of【fully】noded SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "noded",
        "trans": [
            "Collection getNodedSubstrings() Returns a Collection of fully【noded】SegmentStrings.",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "SegmentStrings.",
        "trans": [
            "Collection getNodedSubstrings() Returns a Collection of fully noded【SegmentStrings.】",
            "　　　getNodedSubstrings ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】DD E The value nearest to the constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static【DD】E The value nearest to the constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "E",
        "trans": [
            "static DD【E】The value nearest to the constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static DD E【The】value nearest to the constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static DD E The【value】nearest to the constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "nearest",
        "trans": [
            "static DD E The value【nearest】to the constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static DD E The value nearest【to】the constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static DD E The value nearest to【the】constant e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "constant",
        "trans": [
            "static DD E The value nearest to the【constant】e (the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "e",
        "trans": [
            "static DD E The value nearest to the constant【e】(the natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "(the",
        "trans": [
            "static DD E The value nearest to the constant e【(the】natural logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "natural",
        "trans": [
            "static DD E The value nearest to the constant e (the【natural】logarithm base).",
            "　　　E"
        ]
    },
    {
        "name": "logarithm",
        "trans": [
            "static DD E The value nearest to the constant e (the natural【logarithm】base).",
            "　　　E"
        ]
    },
    {
        "name": "base).",
        "trans": [
            "static DD E The value nearest to the constant e (the natural logarithm【base).】",
            "　　　E"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double EPS The smallest representable relative difference between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】EPS The smallest representable relative difference between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "EPS",
        "trans": [
            "static double【EPS】The smallest representable relative difference between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static double EPS【The】smallest representable relative difference between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "smallest",
        "trans": [
            "static double EPS The【smallest】representable relative difference between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "representable",
        "trans": [
            "static double EPS The smallest【representable】relative difference between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "static double EPS The smallest representable【relative】difference between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "difference",
        "trans": [
            "static double EPS The smallest representable relative【difference】between two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "between",
        "trans": [
            "static double EPS The smallest representable relative difference【between】two {link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "two",
        "trans": [
            "static double EPS The smallest representable relative difference between【two】{link @ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "{link",
        "trans": [
            "static double EPS The smallest representable relative difference between two【{link】@ DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "@",
        "trans": [
            "static double EPS The smallest representable relative difference between two {link【@】DoubleDouble} values",
            "　　　每股收益"
        ]
    },
    {
        "name": "DoubleDouble}",
        "trans": [
            "static double EPS The smallest representable relative difference between two {link @【DoubleDouble}】values",
            "　　　每股收益"
        ]
    },
    {
        "name": "values",
        "trans": [
            "static double EPS The smallest representable relative difference between two {link @ DoubleDouble}【values】",
            "　　　每股收益"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "addIntersection(Coordinate",
        "trans": [
            "void【addIntersection(Coordinate】intPt, int segmentIndex) Adds an intersection node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "intPt,",
        "trans": [
            "void addIntersection(Coordinate【intPt,】int segmentIndex) Adds an intersection node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "void addIntersection(Coordinate intPt,【int】segmentIndex) Adds an intersection node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "segmentIndex)",
        "trans": [
            "void addIntersection(Coordinate intPt, int【segmentIndex)】Adds an intersection node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "Adds",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex)【Adds】an intersection node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds【an】intersection node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an【intersection】node for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "node",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection【node】for a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "for",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node【for】a given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for【a】given point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a【given】point and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "point",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given【point】and segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given point【and】segment to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given point and【segment】to this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given point and segment【to】this segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "this",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given point and segment to【this】segment string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given point and segment to this【segment】string.",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "string.",
        "trans": [
            "void addIntersection(Coordinate intPt, int segmentIndex) Adds an intersection node for a given point and segment to this segment【string.】",
            "　　　addIntersection(协调intPt,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】DD NaN A value representing the result of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static【DD】NaN A value representing the result of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "NaN",
        "trans": [
            "static DD【NaN】A value representing the result of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "A",
        "trans": [
            "static DD NaN【A】value representing the result of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static DD NaN A【value】representing the result of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "static DD NaN A value【representing】the result of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static DD NaN A value representing【the】result of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "result",
        "trans": [
            "static DD NaN A value representing the【result】of an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static DD NaN A value representing the result【of】an operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static DD NaN A value representing the result of【an】operation which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "static DD NaN A value representing the result of an【operation】which does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "which",
        "trans": [
            "static DD NaN A value representing the result of an operation【which】does not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "does",
        "trans": [
            "static DD NaN A value representing the result of an operation which【does】not return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "not",
        "trans": [
            "static DD NaN A value representing the result of an operation which does【not】return a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "return",
        "trans": [
            "static DD NaN A value representing the result of an operation which does not【return】a valid number.",
            "　　　南"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static DD NaN A value representing the result of an operation which does not return【a】valid number.",
            "　　　南"
        ]
    },
    {
        "name": "valid",
        "trans": [
            "static DD NaN A value representing the result of an operation which does not return a【valid】number.",
            "　　　南"
        ]
    },
    {
        "name": "number.",
        "trans": [
            "static DD NaN A value representing the result of an operation which does not return a valid【number.】",
            "　　　南"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】DD PI The value nearest to the constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static【DD】PI The value nearest to the constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "PI",
        "trans": [
            "static DD【PI】The value nearest to the constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static DD PI【The】value nearest to the constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static DD PI The【value】nearest to the constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "nearest",
        "trans": [
            "static DD PI The value【nearest】to the constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static DD PI The value nearest【to】the constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static DD PI The value nearest to【the】constant Pi.",
            "　　　π"
        ]
    },
    {
        "name": "constant",
        "trans": [
            "static DD PI The value nearest to the【constant】Pi.",
            "　　　π"
        ]
    },
    {
        "name": "Pi.",
        "trans": [
            "static DD PI The value nearest to the constant【Pi.】",
            "　　　π"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】DD PI_2 The value nearest to the constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static【DD】PI_2 The value nearest to the constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "PI_2",
        "trans": [
            "static DD【PI_2】The value nearest to the constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static DD PI_2【The】value nearest to the constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static DD PI_2 The【value】nearest to the constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "nearest",
        "trans": [
            "static DD PI_2 The value【nearest】to the constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static DD PI_2 The value nearest【to】the constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static DD PI_2 The value nearest to【the】constant Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "constant",
        "trans": [
            "static DD PI_2 The value nearest to the【constant】Pi / 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "Pi",
        "trans": [
            "static DD PI_2 The value nearest to the constant【Pi】/ 2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "/",
        "trans": [
            "static DD PI_2 The value nearest to the constant Pi【/】2.",
            "　　　PI_2"
        ]
    },
    {
        "name": "2.",
        "trans": [
            "static DD PI_2 The value nearest to the constant Pi /【2.】",
            "　　　PI_2"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】DD TWO_PI The value nearest to the constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "DD",
        "trans": [
            "static【DD】TWO_PI The value nearest to the constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "TWO_PI",
        "trans": [
            "static DD【TWO_PI】The value nearest to the constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static DD TWO_PI【The】value nearest to the constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static DD TWO_PI The【value】nearest to the constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "nearest",
        "trans": [
            "static DD TWO_PI The value【nearest】to the constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static DD TWO_PI The value nearest【to】the constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static DD TWO_PI The value nearest to【the】constant 2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "constant",
        "trans": [
            "static DD TWO_PI The value nearest to the【constant】2 * Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "2",
        "trans": [
            "static DD TWO_PI The value nearest to the constant【2】* Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "*",
        "trans": [
            "static DD TWO_PI The value nearest to the constant 2【*】Pi.",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "Pi.",
        "trans": [
            "static DD TWO_PI The value nearest to the constant 2 *【Pi.】",
            "　　　TWO_PI"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class MCIndexPointSnapper.HotPixelSnapAction",
            "　　　MCIndexPointSnapper.HotPixelSnapAction"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】MCIndexPointSnapper.HotPixelSnapAction",
            "　　　MCIndexPointSnapper.HotPixelSnapAction"
        ]
    },
    {
        "name": "MCIndexPointSnapper.HotPixelSnapAction",
        "trans": [
            "static class【MCIndexPointSnapper.HotPixelSnapAction】",
            "　　　MCIndexPointSnapper.HotPixelSnapAction"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MAX_LEVEL The maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MAX_LEVEL The maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "MAX_LEVEL",
        "trans": [
            "static int【MAX_LEVEL】The maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int MAX_LEVEL【The】maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "maximum",
        "trans": [
            "static int MAX_LEVEL The【maximum】curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "curve",
        "trans": [
            "static int MAX_LEVEL The maximum【curve】level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "level",
        "trans": [
            "static int MAX_LEVEL The maximum curve【level】that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int MAX_LEVEL The maximum curve level【that】can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "can",
        "trans": [
            "static int MAX_LEVEL The maximum curve level that【can】be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static int MAX_LEVEL The maximum curve level that can【be】represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "represented.",
        "trans": [
            "static int MAX_LEVEL The maximum curve level that can be【represented.】",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MAX_LEVEL The maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MAX_LEVEL The maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "MAX_LEVEL",
        "trans": [
            "static int【MAX_LEVEL】The maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static int MAX_LEVEL【The】maximum curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "maximum",
        "trans": [
            "static int MAX_LEVEL The【maximum】curve level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "curve",
        "trans": [
            "static int MAX_LEVEL The maximum【curve】level that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "level",
        "trans": [
            "static int MAX_LEVEL The maximum curve【level】that can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static int MAX_LEVEL The maximum curve level【that】can be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "can",
        "trans": [
            "static int MAX_LEVEL The maximum curve level that【can】be represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static int MAX_LEVEL The maximum curve level that can【be】represented.",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "represented.",
        "trans": [
            "static int MAX_LEVEL The maximum curve level that can be【represented.】",
            "　　　MAX_LEVEL"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "static【QuadEdge】connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "connect(QuadEdge",
        "trans": [
            "static QuadEdge【connect(QuadEdge】a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "a,",
        "trans": [
            "static QuadEdge connect(QuadEdge【a,】QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "static QuadEdge connect(QuadEdge a,【QuadEdge】b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "b)",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge【b)】Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b)【Creates】a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates【a】new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "new",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a【new】QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new【QuadEdge】connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "connecting",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge【connecting】the destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting【the】destination of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "destination",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the【destination】of a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination【of】a to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of【a】to the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a【to】the origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to【the】origin of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "origin",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the【origin】of b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin【of】b, in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "b,",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of【b,】in such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b,【in】such a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "such",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in【such】a way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such【a】way that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "way",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a【way】that all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "that",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way【that】all three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "all",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that【all】three have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "three",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all【three】have the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "have",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three【have】the same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have【the】same left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "same",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the【same】left face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "left",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same【left】face after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "face",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left【face】after the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "after",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face【after】the connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after【the】connection is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "connection",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the【connection】is complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection【is】complete.",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "complete.",
        "trans": [
            "static QuadEdge connect(QuadEdge a, QuadEdge b) Creates a new QuadEdge connecting the destination of a to the origin of b, in such a way that all three have the same left face after the connection is【complete.】",
            "　　　连接(QuadEdge,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】delete() Marks this quadedge as being deleted.",
            "　　　delete ()"
        ]
    },
    {
        "name": "delete()",
        "trans": [
            "void【delete()】Marks this quadedge as being deleted.",
            "　　　delete ()"
        ]
    },
    {
        "name": "Marks",
        "trans": [
            "void delete()【Marks】this quadedge as being deleted.",
            "　　　delete ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "void delete() Marks【this】quadedge as being deleted.",
            "　　　delete ()"
        ]
    },
    {
        "name": "quadedge",
        "trans": [
            "void delete() Marks this【quadedge】as being deleted.",
            "　　　delete ()"
        ]
    },
    {
        "name": "as",
        "trans": [
            "void delete() Marks this quadedge【as】being deleted.",
            "　　　delete ()"
        ]
    },
    {
        "name": "being",
        "trans": [
            "void delete() Marks this quadedge as【being】deleted.",
            "　　　delete ()"
        ]
    },
    {
        "name": "deleted.",
        "trans": [
            "void delete() Marks this quadedge as being【deleted.】",
            "　　　delete ()"
        ]
    },
    {
        "name": "Vertex",
        "trans": [
            "【Vertex】dest() Gets the vertex for the edge's destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "dest()",
        "trans": [
            "Vertex【dest()】Gets the vertex for the edge's destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "Vertex dest()【Gets】the vertex for the edge's destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Vertex dest() Gets【the】vertex for the edge's destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "vertex",
        "trans": [
            "Vertex dest() Gets the【vertex】for the edge's destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Vertex dest() Gets the vertex【for】the edge's destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Vertex dest() Gets the vertex for【the】edge's destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "edge's",
        "trans": [
            "Vertex dest() Gets the vertex for the【edge's】destination",
            "　　　桌子()"
        ]
    },
    {
        "name": "destination",
        "trans": [
            "Vertex dest() Gets the vertex for the edge's【destination】",
            "　　　桌子()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】dNext() Gets the next CCW edge around (into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "dNext()",
        "trans": [
            "QuadEdge【dNext()】Gets the next CCW edge around (into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge dNext()【Gets】the next CCW edge around (into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge dNext() Gets【the】next CCW edge around (into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "next",
        "trans": [
            "QuadEdge dNext() Gets the【next】CCW edge around (into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "CCW",
        "trans": [
            "QuadEdge dNext() Gets the next【CCW】edge around (into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge dNext() Gets the next CCW【edge】around (into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge dNext() Gets the next CCW edge【around】(into) the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "(into)",
        "trans": [
            "QuadEdge dNext() Gets the next CCW edge around【(into)】the destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge dNext() Gets the next CCW edge around (into)【the】destination of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "destination",
        "trans": [
            "QuadEdge dNext() Gets the next CCW edge around (into) the【destination】of this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge dNext() Gets the next CCW edge around (into) the destination【of】this edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge dNext() Gets the next CCW edge around (into) the destination of【this】edge.",
            "　　　dNext ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge dNext() Gets the next CCW edge around (into) the destination of this【edge.】",
            "　　　dNext ()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】dPrev() Gets the next CW edge around (into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "dPrev()",
        "trans": [
            "QuadEdge【dPrev()】Gets the next CW edge around (into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge dPrev()【Gets】the next CW edge around (into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge dPrev() Gets【the】next CW edge around (into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "next",
        "trans": [
            "QuadEdge dPrev() Gets the【next】CW edge around (into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "CW",
        "trans": [
            "QuadEdge dPrev() Gets the next【CW】edge around (into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge dPrev() Gets the next CW【edge】around (into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge dPrev() Gets the next CW edge【around】(into) the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "(into)",
        "trans": [
            "QuadEdge dPrev() Gets the next CW edge around【(into)】the destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge dPrev() Gets the next CW edge around (into)【the】destination of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "destination",
        "trans": [
            "QuadEdge dPrev() Gets the next CW edge around (into) the【destination】of this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge dPrev() Gets the next CW edge around (into) the destination【of】this edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge dPrev() Gets the next CW edge around (into) the destination of【this】edge.",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge dPrev() Gets the next CW edge around (into) the destination of this【edge.】",
            "　　　dPrev ()"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "equalsNonOriented(QuadEdge",
        "trans": [
            "boolean【equalsNonOriented(QuadEdge】qe) Tests if this quadedge and another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "qe)",
        "trans": [
            "boolean equalsNonOriented(QuadEdge【qe)】Tests if this quadedge and another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe)【Tests】if this quadedge and another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "if",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests【if】this quadedge and another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "this",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if【this】quadedge and another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "quadedge",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this【quadedge】and another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "and",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge【and】another have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "another",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and【another】have the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "have",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another【have】the same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have【the】same line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "same",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the【same】line segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "line",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the same【line】segment geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the same line【segment】geometry, regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "geometry,",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment【geometry,】regardless of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "regardless",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry,【regardless】of orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry, regardless【of】orientation.",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "orientation.",
        "trans": [
            "boolean equalsNonOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry, regardless of【orientation.】",
            "　　　equalsNonOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "equalsOriented(QuadEdge",
        "trans": [
            "boolean【equalsOriented(QuadEdge】qe) Tests if this quadedge and another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "qe)",
        "trans": [
            "boolean equalsOriented(QuadEdge【qe)】Tests if this quadedge and another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean equalsOriented(QuadEdge qe)【Tests】if this quadedge and another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "if",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests【if】this quadedge and another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "this",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if【this】quadedge and another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "quadedge",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this【quadedge】and another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "and",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge【and】another have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "another",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and【another】have the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "have",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another【have】the same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have【the】same line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "same",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the【same】line segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "line",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same【line】segment geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "segment",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same line【segment】geometry with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment【geometry】with the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "with",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry【with】the same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry with【the】same orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "same",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry with the【same】orientation.",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "orientation.",
        "trans": [
            "boolean equalsOriented(QuadEdge qe) Tests if this quadedge and another have the same line segment geometry with the same【orientation.】",
            "　　　equalsOriented (QuadEdge qe)"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "【Object】getData() Gets the external data value for this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "getData()",
        "trans": [
            "Object【getData()】Gets the external data value for this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "Object getData()【Gets】the external data value for this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Object getData() Gets【the】external data value for this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "external",
        "trans": [
            "Object getData() Gets the【external】data value for this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "data",
        "trans": [
            "Object getData() Gets the external【data】value for this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "value",
        "trans": [
            "Object getData() Gets the external data【value】for this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Object getData() Gets the external data value【for】this edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "Object getData() Gets the external data value for【this】edge.",
            "　　　getData ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "Object getData() Gets the external data value for this【edge.】",
            "　　　getData ()"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】getLength() Gets the length of the geometry of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "getLength()",
        "trans": [
            "double【getLength()】Gets the length of the geometry of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "double getLength()【Gets】the length of the geometry of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "double getLength() Gets【the】length of the geometry of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "length",
        "trans": [
            "double getLength() Gets the【length】of the geometry of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "double getLength() Gets the length【of】the geometry of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "double getLength() Gets the length of【the】geometry of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "double getLength() Gets the length of the【geometry】of this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "double getLength() Gets the length of the geometry【of】this quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "double getLength() Gets the length of the geometry of【this】quadedge.",
            "　　　getLength ()"
        ]
    },
    {
        "name": "quadedge.",
        "trans": [
            "double getLength() Gets the length of the geometry of this【quadedge.】",
            "　　　getLength ()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】getPrimary() Gets the primary edge of this quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "getPrimary()",
        "trans": [
            "QuadEdge【getPrimary()】Gets the primary edge of this quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge getPrimary()【Gets】the primary edge of this quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge getPrimary() Gets【the】primary edge of this quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "primary",
        "trans": [
            "QuadEdge getPrimary() Gets the【primary】edge of this quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge getPrimary() Gets the primary【edge】of this quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge getPrimary() Gets the primary edge【of】this quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge getPrimary() Gets the primary edge of【this】quadedge and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "quadedge",
        "trans": [
            "QuadEdge getPrimary() Gets the primary edge of this【quadedge】and its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "and",
        "trans": [
            "QuadEdge getPrimary() Gets the primary edge of this quadedge【and】its sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "its",
        "trans": [
            "QuadEdge getPrimary() Gets the primary edge of this quadedge and【its】sym.",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "sym.",
        "trans": [
            "QuadEdge getPrimary() Gets the primary edge of this quadedge and its【sym.】",
            "　　　getPrimary ()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】invRot() Gets the dual of this edge, directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "invRot()",
        "trans": [
            "QuadEdge【invRot()】Gets the dual of this edge, directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge invRot()【Gets】the dual of this edge, directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge invRot() Gets【the】dual of this edge, directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "dual",
        "trans": [
            "QuadEdge invRot() Gets the【dual】of this edge, directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge invRot() Gets the dual【of】this edge, directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge invRot() Gets the dual of【this】edge, directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "edge,",
        "trans": [
            "QuadEdge invRot() Gets the dual of this【edge,】directed from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "directed",
        "trans": [
            "QuadEdge invRot() Gets the dual of this edge,【directed】from its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "from",
        "trans": [
            "QuadEdge invRot() Gets the dual of this edge, directed【from】its left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "its",
        "trans": [
            "QuadEdge invRot() Gets the dual of this edge, directed from【its】left to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "left",
        "trans": [
            "QuadEdge invRot() Gets the dual of this edge, directed from its【left】to its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "to",
        "trans": [
            "QuadEdge invRot() Gets the dual of this edge, directed from its left【to】its right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "its",
        "trans": [
            "QuadEdge invRot() Gets the dual of this edge, directed from its left to【its】right.",
            "　　　invRot ()"
        ]
    },
    {
        "name": "right.",
        "trans": [
            "QuadEdge invRot() Gets the dual of this edge, directed from its left to its【right.】",
            "　　　invRot ()"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】isLive() Tests whether this edge has been deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "isLive()",
        "trans": [
            "boolean【isLive()】Tests whether this edge has been deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "boolean isLive()【Tests】whether this edge has been deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean isLive() Tests【whether】this edge has been deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "boolean isLive() Tests whether【this】edge has been deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "boolean isLive() Tests whether this【edge】has been deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "has",
        "trans": [
            "boolean isLive() Tests whether this edge【has】been deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "been",
        "trans": [
            "boolean isLive() Tests whether this edge has【been】deleted.",
            "　　　isLive ()"
        ]
    },
    {
        "name": "deleted.",
        "trans": [
            "boolean isLive() Tests whether this edge has been【deleted.】",
            "　　　isLive ()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】lNext() Gets the CCW edge around the left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "lNext()",
        "trans": [
            "QuadEdge【lNext()】Gets the CCW edge around the left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge lNext()【Gets】the CCW edge around the left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge lNext() Gets【the】CCW edge around the left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "CCW",
        "trans": [
            "QuadEdge lNext() Gets the【CCW】edge around the left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge lNext() Gets the CCW【edge】around the left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge lNext() Gets the CCW edge【around】the left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge lNext() Gets the CCW edge around【the】left face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "left",
        "trans": [
            "QuadEdge lNext() Gets the CCW edge around the【left】face following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "face",
        "trans": [
            "QuadEdge lNext() Gets the CCW edge around the left【face】following this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "following",
        "trans": [
            "QuadEdge lNext() Gets the CCW edge around the left face【following】this edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge lNext() Gets the CCW edge around the left face following【this】edge.",
            "　　　lNext ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge lNext() Gets the CCW edge around the left face following this【edge.】",
            "　　　lNext ()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】lPrev() Gets the CCW edge around the left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "lPrev()",
        "trans": [
            "QuadEdge【lPrev()】Gets the CCW edge around the left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge lPrev()【Gets】the CCW edge around the left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge lPrev() Gets【the】CCW edge around the left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "CCW",
        "trans": [
            "QuadEdge lPrev() Gets the【CCW】edge around the left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge lPrev() Gets the CCW【edge】around the left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge lPrev() Gets the CCW edge【around】the left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge lPrev() Gets the CCW edge around【the】left face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "left",
        "trans": [
            "QuadEdge lPrev() Gets the CCW edge around the【left】face before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "face",
        "trans": [
            "QuadEdge lPrev() Gets the CCW edge around the left【face】before this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "before",
        "trans": [
            "QuadEdge lPrev() Gets the CCW edge around the left face【before】this edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge lPrev() Gets the CCW edge around the left face before【this】edge.",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge lPrev() Gets the CCW edge around the left face before this【edge.】",
            "　　　lPrev ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "static【QuadEdge】makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "makeEdge(Vertex",
        "trans": [
            "static QuadEdge【makeEdge(Vertex】o, Vertex d) Creates a new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "o,",
        "trans": [
            "static QuadEdge makeEdge(Vertex【o,】Vertex d) Creates a new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "Vertex",
        "trans": [
            "static QuadEdge makeEdge(Vertex o,【Vertex】d) Creates a new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "d)",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex【d)】Creates a new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d)【Creates】a new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates【a】new QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "new",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a【new】QuadEdge quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new【QuadEdge】quartet from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "quartet",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge【quartet】from Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "from",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet【from】Vertex o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "Vertex",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet from【Vertex】o to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "o",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet from Vertex【o】to Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet from Vertex o【to】Vertex d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "Vertex",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet from Vertex o to【Vertex】d.",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "d.",
        "trans": [
            "static QuadEdge makeEdge(Vertex o, Vertex d) Creates a new QuadEdge quartet from Vertex o to Vertex【d.】",
            "　　　makeEdge(顶点啊,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】oNext() Gets the next CCW edge around the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "oNext()",
        "trans": [
            "QuadEdge【oNext()】Gets the next CCW edge around the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge oNext()【Gets】the next CCW edge around the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge oNext() Gets【the】next CCW edge around the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "next",
        "trans": [
            "QuadEdge oNext() Gets the【next】CCW edge around the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "CCW",
        "trans": [
            "QuadEdge oNext() Gets the next【CCW】edge around the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge oNext() Gets the next CCW【edge】around the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge oNext() Gets the next CCW edge【around】the origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge oNext() Gets the next CCW edge around【the】origin of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "origin",
        "trans": [
            "QuadEdge oNext() Gets the next CCW edge around the【origin】of this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge oNext() Gets the next CCW edge around the origin【of】this edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge oNext() Gets the next CCW edge around the origin of【this】edge.",
            "　　　oNext ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge oNext() Gets the next CCW edge around the origin of this【edge.】",
            "　　　oNext ()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】oPrev() Gets the next CW edge around (from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "oPrev()",
        "trans": [
            "QuadEdge【oPrev()】Gets the next CW edge around (from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge oPrev()【Gets】the next CW edge around (from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge oPrev() Gets【the】next CW edge around (from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "next",
        "trans": [
            "QuadEdge oPrev() Gets the【next】CW edge around (from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "CW",
        "trans": [
            "QuadEdge oPrev() Gets the next【CW】edge around (from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge oPrev() Gets the next CW【edge】around (from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge oPrev() Gets the next CW edge【around】(from) the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "(from)",
        "trans": [
            "QuadEdge oPrev() Gets the next CW edge around【(from)】the origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge oPrev() Gets the next CW edge around (from)【the】origin of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "origin",
        "trans": [
            "QuadEdge oPrev() Gets the next CW edge around (from) the【origin】of this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge oPrev() Gets the next CW edge around (from) the origin【of】this edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge oPrev() Gets the next CW edge around (from) the origin of【this】edge.",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge oPrev() Gets the next CW edge around (from) the origin of this【edge.】",
            "　　　oPrev ()"
        ]
    },
    {
        "name": "Vertex",
        "trans": [
            "【Vertex】orig() Gets the vertex for the edge's origin",
            "　　　源自()"
        ]
    },
    {
        "name": "orig()",
        "trans": [
            "Vertex【orig()】Gets the vertex for the edge's origin",
            "　　　源自()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "Vertex orig()【Gets】the vertex for the edge's origin",
            "　　　源自()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Vertex orig() Gets【the】vertex for the edge's origin",
            "　　　源自()"
        ]
    },
    {
        "name": "vertex",
        "trans": [
            "Vertex orig() Gets the【vertex】for the edge's origin",
            "　　　源自()"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Vertex orig() Gets the vertex【for】the edge's origin",
            "　　　源自()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Vertex orig() Gets the vertex for【the】edge's origin",
            "　　　源自()"
        ]
    },
    {
        "name": "edge's",
        "trans": [
            "Vertex orig() Gets the vertex for the【edge's】origin",
            "　　　源自()"
        ]
    },
    {
        "name": "origin",
        "trans": [
            "Vertex orig() Gets the vertex for the edge's【origin】",
            "　　　源自()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】rNext() Gets the edge around the right face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "rNext()",
        "trans": [
            "QuadEdge【rNext()】Gets the edge around the right face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge rNext()【Gets】the edge around the right face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge rNext() Gets【the】edge around the right face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge rNext() Gets the【edge】around the right face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge rNext() Gets the edge【around】the right face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge rNext() Gets the edge around【the】right face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "right",
        "trans": [
            "QuadEdge rNext() Gets the edge around the【right】face ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "face",
        "trans": [
            "QuadEdge rNext() Gets the edge around the right【face】ccw following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "ccw",
        "trans": [
            "QuadEdge rNext() Gets the edge around the right face【ccw】following this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "following",
        "trans": [
            "QuadEdge rNext() Gets the edge around the right face ccw【following】this edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge rNext() Gets the edge around the right face ccw following【this】edge.",
            "　　　rNext ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge rNext() Gets the edge around the right face ccw following this【edge.】",
            "　　　rNext ()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】rot() Gets the dual of this edge, directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "rot()",
        "trans": [
            "QuadEdge【rot()】Gets the dual of this edge, directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge rot()【Gets】the dual of this edge, directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge rot() Gets【the】dual of this edge, directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "dual",
        "trans": [
            "QuadEdge rot() Gets the【dual】of this edge, directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge rot() Gets the dual【of】this edge, directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge rot() Gets the dual of【this】edge, directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "edge,",
        "trans": [
            "QuadEdge rot() Gets the dual of this【edge,】directed from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "directed",
        "trans": [
            "QuadEdge rot() Gets the dual of this edge,【directed】from its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "from",
        "trans": [
            "QuadEdge rot() Gets the dual of this edge, directed【from】its right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "its",
        "trans": [
            "QuadEdge rot() Gets the dual of this edge, directed from【its】right to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "right",
        "trans": [
            "QuadEdge rot() Gets the dual of this edge, directed from its【right】to its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "to",
        "trans": [
            "QuadEdge rot() Gets the dual of this edge, directed from its right【to】its left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "its",
        "trans": [
            "QuadEdge rot() Gets the dual of this edge, directed from its right to【its】left.",
            "　　　腐烂()"
        ]
    },
    {
        "name": "left.",
        "trans": [
            "QuadEdge rot() Gets the dual of this edge, directed from its right to its【left.】",
            "　　　腐烂()"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】rPrev() Gets the edge around the right face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "rPrev()",
        "trans": [
            "QuadEdge【rPrev()】Gets the edge around the right face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge rPrev()【Gets】the edge around the right face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge rPrev() Gets【the】edge around the right face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge rPrev() Gets the【edge】around the right face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "around",
        "trans": [
            "QuadEdge rPrev() Gets the edge【around】the right face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge rPrev() Gets the edge around【the】right face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "right",
        "trans": [
            "QuadEdge rPrev() Gets the edge around the【right】face ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "face",
        "trans": [
            "QuadEdge rPrev() Gets the edge around the right【face】ccw before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "ccw",
        "trans": [
            "QuadEdge rPrev() Gets the edge around the right face【ccw】before this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "before",
        "trans": [
            "QuadEdge rPrev() Gets the edge around the right face ccw【before】this edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge rPrev() Gets the edge around the right face ccw before【this】edge.",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge rPrev() Gets the edge around the right face ccw before this【edge.】",
            "　　　rPrev ()"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】setData(Object data) Sets the external data value for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "setData(Object",
        "trans": [
            "void【setData(Object】data) Sets the external data value for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "data)",
        "trans": [
            "void setData(Object【data)】Sets the external data value for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "Sets",
        "trans": [
            "void setData(Object data)【Sets】the external data value for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void setData(Object data) Sets【the】external data value for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "external",
        "trans": [
            "void setData(Object data) Sets the【external】data value for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "data",
        "trans": [
            "void setData(Object data) Sets the external【data】value for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "value",
        "trans": [
            "void setData(Object data) Sets the external data【value】for this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "for",
        "trans": [
            "void setData(Object data) Sets the external data value【for】this edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "this",
        "trans": [
            "void setData(Object data) Sets the external data value for【this】edge.",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "void setData(Object data) Sets the external data value for this【edge.】",
            "　　　setData(对象数据)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】setNext(QuadEdge next) Sets the connected edge",
            "　　　setNext (QuadEdge下)"
        ]
    },
    {
        "name": "setNext(QuadEdge",
        "trans": [
            "void【setNext(QuadEdge】next) Sets the connected edge",
            "　　　setNext (QuadEdge下)"
        ]
    },
    {
        "name": "next)",
        "trans": [
            "void setNext(QuadEdge【next)】Sets the connected edge",
            "　　　setNext (QuadEdge下)"
        ]
    },
    {
        "name": "Sets",
        "trans": [
            "void setNext(QuadEdge next)【Sets】the connected edge",
            "　　　setNext (QuadEdge下)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void setNext(QuadEdge next) Sets【the】connected edge",
            "　　　setNext (QuadEdge下)"
        ]
    },
    {
        "name": "connected",
        "trans": [
            "void setNext(QuadEdge next) Sets the【connected】edge",
            "　　　setNext (QuadEdge下)"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "void setNext(QuadEdge next) Sets the connected【edge】",
            "　　　setNext (QuadEdge下)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void splice(QuadEdge a, QuadEdge b) Splices two edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】splice(QuadEdge a, QuadEdge b) Splices two edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "splice(QuadEdge",
        "trans": [
            "static void【splice(QuadEdge】a, QuadEdge b) Splices two edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "a,",
        "trans": [
            "static void splice(QuadEdge【a,】QuadEdge b) Splices two edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "static void splice(QuadEdge a,【QuadEdge】b) Splices two edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "b)",
        "trans": [
            "static void splice(QuadEdge a, QuadEdge【b)】Splices two edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "Splices",
        "trans": [
            "static void splice(QuadEdge a, QuadEdge b)【Splices】two edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "static void splice(QuadEdge a, QuadEdge b) Splices【two】edges together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "static void splice(QuadEdge a, QuadEdge b) Splices two【edges】together or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "together",
        "trans": [
            "static void splice(QuadEdge a, QuadEdge b) Splices two edges【together】or apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "or",
        "trans": [
            "static void splice(QuadEdge a, QuadEdge b) Splices two edges together【or】apart.",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "apart.",
        "trans": [
            "static void splice(QuadEdge a, QuadEdge b) Splices two edges together or【apart.】",
            "　　　拼接(QuadEdge,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void swap(QuadEdge e) Turns an edge counterclockwise inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】swap(QuadEdge e) Turns an edge counterclockwise inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "swap(QuadEdge",
        "trans": [
            "static void【swap(QuadEdge】e) Turns an edge counterclockwise inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "e)",
        "trans": [
            "static void swap(QuadEdge【e)】Turns an edge counterclockwise inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "Turns",
        "trans": [
            "static void swap(QuadEdge e)【Turns】an edge counterclockwise inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static void swap(QuadEdge e) Turns【an】edge counterclockwise inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "static void swap(QuadEdge e) Turns an【edge】counterclockwise inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "counterclockwise",
        "trans": [
            "static void swap(QuadEdge e) Turns an edge【counterclockwise】inside its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "inside",
        "trans": [
            "static void swap(QuadEdge e) Turns an edge counterclockwise【inside】its enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "its",
        "trans": [
            "static void swap(QuadEdge e) Turns an edge counterclockwise inside【its】enclosing quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "enclosing",
        "trans": [
            "static void swap(QuadEdge e) Turns an edge counterclockwise inside its【enclosing】quadrilateral.",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "quadrilateral.",
        "trans": [
            "static void swap(QuadEdge e) Turns an edge counterclockwise inside its enclosing【quadrilateral.】",
            "　　　交换(QuadEdge e)"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】sym() Gets the edge from the destination to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "sym()",
        "trans": [
            "QuadEdge【sym()】Gets the edge from the destination to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "Gets",
        "trans": [
            "QuadEdge sym()【Gets】the edge from the destination to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge sym() Gets【the】edge from the destination to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "QuadEdge sym() Gets the【edge】from the destination to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "from",
        "trans": [
            "QuadEdge sym() Gets the edge【from】the destination to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge sym() Gets the edge from【the】destination to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "destination",
        "trans": [
            "QuadEdge sym() Gets the edge from the【destination】to the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "to",
        "trans": [
            "QuadEdge sym() Gets the edge from the destination【to】the origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "QuadEdge sym() Gets the edge from the destination to【the】origin of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "origin",
        "trans": [
            "QuadEdge sym() Gets the edge from the destination to the【origin】of this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "QuadEdge sym() Gets the edge from the destination to the origin【of】this edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "QuadEdge sym() Gets the edge from the destination to the origin of【this】edge.",
            "　　　信谊()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "QuadEdge sym() Gets the edge from the destination to the origin of this【edge.】",
            "　　　信谊()"
        ]
    },
    {
        "name": "LineSegment",
        "trans": [
            "【LineSegment】toLineSegment() Creates a LineSegment representing the geometry of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "toLineSegment()",
        "trans": [
            "LineSegment【toLineSegment()】Creates a LineSegment representing the geometry of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "LineSegment toLineSegment()【Creates】a LineSegment representing the geometry of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineSegment toLineSegment() Creates【a】LineSegment representing the geometry of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "LineSegment",
        "trans": [
            "LineSegment toLineSegment() Creates a【LineSegment】representing the geometry of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "LineSegment toLineSegment() Creates a LineSegment【representing】the geometry of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineSegment toLineSegment() Creates a LineSegment representing【the】geometry of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "LineSegment toLineSegment() Creates a LineSegment representing the【geometry】of this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineSegment toLineSegment() Creates a LineSegment representing the geometry【of】this edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "LineSegment toLineSegment() Creates a LineSegment representing the geometry of【this】edge.",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "LineSegment toLineSegment() Creates a LineSegment representing the geometry of this【edge.】",
            "　　　toLineSegment ()"
        ]
    },
    {
        "name": "String",
        "trans": [
            "【String】toString() Converts this edge to a WKT two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "toString()",
        "trans": [
            "String【toString()】Converts this edge to a WKT two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "Converts",
        "trans": [
            "String toString()【Converts】this edge to a WKT two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "String toString() Converts【this】edge to a WKT two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "String toString() Converts this【edge】to a WKT two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "to",
        "trans": [
            "String toString() Converts this edge【to】a WKT two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "a",
        "trans": [
            "String toString() Converts this edge to【a】WKT two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "WKT",
        "trans": [
            "String toString() Converts this edge to a【WKT】two-point LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "two-point",
        "trans": [
            "String toString() Converts this edge to a WKT【two-point】LINESTRING indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "LINESTRING",
        "trans": [
            "String toString() Converts this edge to a WKT two-point【LINESTRING】indicating the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "indicating",
        "trans": [
            "String toString() Converts this edge to a WKT two-point LINESTRING【indicating】the geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "String toString() Converts this edge to a WKT two-point LINESTRING indicating【the】geometry of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "String toString() Converts this edge to a WKT two-point LINESTRING indicating the【geometry】of this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "String toString() Converts this edge to a WKT two-point LINESTRING indicating the geometry【of】this edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "String toString() Converts this edge to a WKT two-point LINESTRING indicating the geometry of【this】edge.",
            "　　　toString ()"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "String toString() Converts this edge to a WKT two-point LINESTRING indicating the geometry of this【edge.】",
            "　　　toString ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String NEWLINE",
            "　　　静态字符串"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】NEWLINE",
            "　　　静态字符串"
        ]
    },
    {
        "name": "NEWLINE",
        "trans": [
            "static String【NEWLINE】",
            "　　　静态字符串"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int BEHIND",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】BEHIND",
            "　　　静态int"
        ]
    },
    {
        "name": "BEHIND",
        "trans": [
            "static int【BEHIND】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int BETWEEN",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】BETWEEN",
            "　　　静态int"
        ]
    },
    {
        "name": "BETWEEN",
        "trans": [
            "static int【BETWEEN】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int BEYOND",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】BEYOND",
            "　　　静态int"
        ]
    },
    {
        "name": "BEYOND",
        "trans": [
            "static int【BEYOND】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int DESTINATION",
            "　　　目的地"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】DESTINATION",
            "　　　目的地"
        ]
    },
    {
        "name": "DESTINATION",
        "trans": [
            "static int【DESTINATION】",
            "　　　目的地"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int LEFT",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】LEFT",
            "　　　静态int"
        ]
    },
    {
        "name": "LEFT",
        "trans": [
            "static int【LEFT】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int ORIGIN",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】ORIGIN",
            "　　　静态int"
        ]
    },
    {
        "name": "ORIGIN",
        "trans": [
            "static int【ORIGIN】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int RIGHT",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】RIGHT",
            "　　　静态int"
        ]
    },
    {
        "name": "RIGHT",
        "trans": [
            "static int【RIGHT】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double GB",
            "　　　静态双"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】GB",
            "　　　静态双"
        ]
    },
    {
        "name": "GB",
        "trans": [
            "static double【GB】",
            "　　　静态双"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double KB",
            "　　　静态双"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】KB",
            "　　　静态双"
        ]
    },
    {
        "name": "KB",
        "trans": [
            "static double【KB】",
            "　　　静态双"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double MB",
            "　　　静态双"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】MB",
            "　　　静态双"
        ]
    },
    {
        "name": "MB",
        "trans": [
            "static double【MB】",
            "　　　静态双"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String DEBUG_PROPERTY_NAME",
            "　　　DEBUG_PROPERTY_NAME"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】DEBUG_PROPERTY_NAME",
            "　　　DEBUG_PROPERTY_NAME"
        ]
    },
    {
        "name": "DEBUG_PROPERTY_NAME",
        "trans": [
            "static String【DEBUG_PROPERTY_NAME】",
            "　　　DEBUG_PROPERTY_NAME"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String DEBUG_PROPERTY_VALUE_ON",
            "　　　DEBUG_PROPERTY_VALUE_ON"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】DEBUG_PROPERTY_VALUE_ON",
            "　　　DEBUG_PROPERTY_VALUE_ON"
        ]
    },
    {
        "name": "DEBUG_PROPERTY_VALUE_ON",
        "trans": [
            "static String【DEBUG_PROPERTY_VALUE_ON】",
            "　　　DEBUG_PROPERTY_VALUE_ON"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String DEBUG_PROPERTY_VALUE_TRUE",
            "　　　DEBUG_PROPERTY_VALUE_TRUE"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】DEBUG_PROPERTY_VALUE_TRUE",
            "　　　DEBUG_PROPERTY_VALUE_TRUE"
        ]
    },
    {
        "name": "DEBUG_PROPERTY_VALUE_TRUE",
        "trans": [
            "static String【DEBUG_PROPERTY_VALUE_TRUE】",
            "　　　DEBUG_PROPERTY_VALUE_TRUE"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void addWatch(Object obj) Adds an object to be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】addWatch(Object obj) Adds an object to be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "addWatch(Object",
        "trans": [
            "static void【addWatch(Object】obj) Adds an object to be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "static void addWatch(Object【obj)】Adds an object to be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "Adds",
        "trans": [
            "static void addWatch(Object obj)【Adds】an object to be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "an",
        "trans": [
            "static void addWatch(Object obj) Adds【an】object to be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "object",
        "trans": [
            "static void addWatch(Object obj) Adds an【object】to be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static void addWatch(Object obj) Adds an object【to】be watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static void addWatch(Object obj) Adds an object to【be】watched.",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "watched.",
        "trans": [
            "static void addWatch(Object obj) Adds an object to be【watched.】",
            "　　　addWatch(对象obj)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】interface CollectionUtil.Function",
            "　　　CollectionUtil.Function"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "static【interface】CollectionUtil.Function",
            "　　　CollectionUtil.Function"
        ]
    },
    {
        "name": "CollectionUtil.Function",
        "trans": [
            "static interface【CollectionUtil.Function】",
            "　　　CollectionUtil.Function"
        ]
    },
    {
        "name": "QuadEdge",
        "trans": [
            "【QuadEdge】locate(Vertex v)",
            "　　　locate(Vertex v)"
        ]
    },
    {
        "name": "locate(Vertex",
        "trans": [
            "QuadEdge【locate(Vertex】v)",
            "　　　locate(Vertex v)"
        ]
    },
    {
        "name": "v)",
        "trans": [
            "QuadEdge locate(Vertex【v)】",
            "　　　locate(Vertex v)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void breakIf(boolean cond)",
            "　　　breakIf(布尔条件数)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】breakIf(boolean cond)",
            "　　　breakIf(布尔条件数)"
        ]
    },
    {
        "name": "breakIf(boolean",
        "trans": [
            "static void【breakIf(boolean】cond)",
            "　　　breakIf(布尔条件数)"
        ]
    },
    {
        "name": "cond)",
        "trans": [
            "static void breakIf(boolean【cond)】",
            "　　　breakIf(布尔条件数)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void breakIfEqual(Coordinate p0, Coordinate p1, double tolerance)",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】breakIfEqual(Coordinate p0, Coordinate p1, double tolerance)",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "breakIfEqual(Coordinate",
        "trans": [
            "static void【breakIfEqual(Coordinate】p0, Coordinate p1, double tolerance)",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "p0,",
        "trans": [
            "static void breakIfEqual(Coordinate【p0,】Coordinate p1, double tolerance)",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static void breakIfEqual(Coordinate p0,【Coordinate】p1, double tolerance)",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "p1,",
        "trans": [
            "static void breakIfEqual(Coordinate p0, Coordinate【p1,】double tolerance)",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static void breakIfEqual(Coordinate p0, Coordinate p1,【double】tolerance)",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "tolerance)",
        "trans": [
            "static void breakIfEqual(Coordinate p0, Coordinate p1, double【tolerance)】",
            "　　　breakIfEqual(协调p0,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void breakIfEqual(Object o1, Object o2)",
            "　　　breakIfEqual(对象o1,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】breakIfEqual(Object o1, Object o2)",
            "　　　breakIfEqual(对象o1,"
        ]
    },
    {
        "name": "breakIfEqual(Object",
        "trans": [
            "static void【breakIfEqual(Object】o1, Object o2)",
            "　　　breakIfEqual(对象o1,"
        ]
    },
    {
        "name": "o1,",
        "trans": [
            "static void breakIfEqual(Object【o1,】Object o2)",
            "　　　breakIfEqual(对象o1,"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "static void breakIfEqual(Object o1,【Object】o2)",
            "　　　breakIfEqual(对象o1,"
        ]
    },
    {
        "name": "o2)",
        "trans": [
            "static void breakIfEqual(Object o1, Object【o2)】",
            "　　　breakIfEqual(对象o1,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】boolean equals(Coordinate c1, Coordinate c2, double tolerance)",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "static【boolean】equals(Coordinate c1, Coordinate c2, double tolerance)",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "equals(Coordinate",
        "trans": [
            "static boolean【equals(Coordinate】c1, Coordinate c2, double tolerance)",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "c1,",
        "trans": [
            "static boolean equals(Coordinate【c1,】Coordinate c2, double tolerance)",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static boolean equals(Coordinate c1,【Coordinate】c2, double tolerance)",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "c2,",
        "trans": [
            "static boolean equals(Coordinate c1, Coordinate【c2,】double tolerance)",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static boolean equals(Coordinate c1, Coordinate c2,【double】tolerance)",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "tolerance)",
        "trans": [
            "static boolean equals(Coordinate c1, Coordinate c2, double【tolerance)】",
            "　　　equals (c1,协调"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】boolean hasSegment(Geometry geom, Coordinate p0, Coordinate p1)",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "static【boolean】hasSegment(Geometry geom, Coordinate p0, Coordinate p1)",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "hasSegment(Geometry",
        "trans": [
            "static boolean【hasSegment(Geometry】geom, Coordinate p0, Coordinate p1)",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "geom,",
        "trans": [
            "static boolean hasSegment(Geometry【geom,】Coordinate p0, Coordinate p1)",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static boolean hasSegment(Geometry geom,【Coordinate】p0, Coordinate p1)",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "p0,",
        "trans": [
            "static boolean hasSegment(Geometry geom, Coordinate【p0,】Coordinate p1)",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static boolean hasSegment(Geometry geom, Coordinate p0,【Coordinate】p1)",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "p1)",
        "trans": [
            "static boolean hasSegment(Geometry geom, Coordinate p0, Coordinate【p1)】",
            "　　　hasSegment(几何几何学,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】instancePrint(Iterator it)",
            "　　　instancePrint(迭代器)"
        ]
    },
    {
        "name": "instancePrint(Iterator",
        "trans": [
            "void【instancePrint(Iterator】it)",
            "　　　instancePrint(迭代器)"
        ]
    },
    {
        "name": "it)",
        "trans": [
            "void instancePrint(Iterator【it)】",
            "　　　instancePrint(迭代器)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】instancePrint(Object obj)",
            "　　　instancePrint(对象obj)"
        ]
    },
    {
        "name": "instancePrint(Object",
        "trans": [
            "void【instancePrint(Object】obj)",
            "　　　instancePrint(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "void instancePrint(Object【obj)】",
            "　　　instancePrint(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】instancePrintIfWatch(Object obj)",
            "　　　instancePrintIfWatch(对象obj)"
        ]
    },
    {
        "name": "instancePrintIfWatch(Object",
        "trans": [
            "void【instancePrintIfWatch(Object】obj)",
            "　　　instancePrintIfWatch(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "void instancePrintIfWatch(Object【obj)】",
            "　　　instancePrintIfWatch(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】instancePrintObject(Object obj)",
            "　　　instancePrintObject(对象obj)"
        ]
    },
    {
        "name": "instancePrintObject(Object",
        "trans": [
            "void【instancePrintObject(Object】obj)",
            "　　　instancePrintObject(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "void instancePrintObject(Object【obj)】",
            "　　　instancePrintObject(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】instancePrintWatch()",
            "　　　instancePrintWatch ()"
        ]
    },
    {
        "name": "instancePrintWatch()",
        "trans": [
            "void【instancePrintWatch()】",
            "　　　instancePrintWatch ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】boolean isDebugging()",
            "　　　静态的布尔"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "static【boolean】isDebugging()",
            "　　　静态的布尔"
        ]
    },
    {
        "name": "isDebugging()",
        "trans": [
            "static boolean【isDebugging()】",
            "　　　静态的布尔"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void main(String[] args) Prints the status of debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】main(String[] args) Prints the status of debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "main(String[]",
        "trans": [
            "static void【main(String[]】args) Prints the status of debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "args)",
        "trans": [
            "static void main(String[]【args)】Prints the status of debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "Prints",
        "trans": [
            "static void main(String[] args)【Prints】the status of debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static void main(String[] args) Prints【the】status of debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "status",
        "trans": [
            "static void main(String[] args) Prints the【status】of debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static void main(String[] args) Prints the status【of】debugging to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "debugging",
        "trans": [
            "static void main(String[] args) Prints the status of【debugging】to System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static void main(String[] args) Prints the status of debugging【to】System.out",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "System.out",
        "trans": [
            "static void main(String[] args) Prints the status of debugging to【System.out】",
            "　　　main (String [] args)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void print(boolean isTrue, Object obj)",
            "　　　print(布尔isTrue"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】print(boolean isTrue, Object obj)",
            "　　　print(布尔isTrue"
        ]
    },
    {
        "name": "print(boolean",
        "trans": [
            "static void【print(boolean】isTrue, Object obj)",
            "　　　print(布尔isTrue"
        ]
    },
    {
        "name": "isTrue,",
        "trans": [
            "static void print(boolean【isTrue,】Object obj)",
            "　　　print(布尔isTrue"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "static void print(boolean isTrue,【Object】obj)",
            "　　　print(布尔isTrue"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "static void print(boolean isTrue, Object【obj)】",
            "　　　print(布尔isTrue"
        ]
    },
    {
        "name": "SweepLineOverlapAction",
        "trans": [
            "【SweepLineOverlapAction】An action taken when a SweepLineIndex detects that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "An",
        "trans": [
            "SweepLineOverlapAction【An】action taken when a SweepLineIndex detects that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "action",
        "trans": [
            "SweepLineOverlapAction An【action】taken when a SweepLineIndex detects that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "taken",
        "trans": [
            "SweepLineOverlapAction An action【taken】when a SweepLineIndex detects that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "when",
        "trans": [
            "SweepLineOverlapAction An action taken【when】a SweepLineIndex detects that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SweepLineOverlapAction An action taken when【a】SweepLineIndex detects that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "SweepLineIndex",
        "trans": [
            "SweepLineOverlapAction An action taken when a【SweepLineIndex】detects that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "detects",
        "trans": [
            "SweepLineOverlapAction An action taken when a SweepLineIndex【detects】that two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "that",
        "trans": [
            "SweepLineOverlapAction An action taken when a SweepLineIndex detects【that】two SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SweepLineOverlapAction An action taken when a SweepLineIndex detects that【two】SweepLineIntervals overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "SweepLineIntervals",
        "trans": [
            "SweepLineOverlapAction An action taken when a SweepLineIndex detects that two【SweepLineIntervals】overlap",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "overlap",
        "trans": [
            "SweepLineOverlapAction An action taken when a SweepLineIndex detects that two SweepLineIntervals【overlap】",
            "　　　一个行动当SweepLineIndex检测到两个"
        ]
    },
    {
        "name": "SweepLineEvent",
        "trans": [
            "【SweepLineEvent】",
            "　　　SweepLineEvent"
        ]
    },
    {
        "name": "SweepLineIndex",
        "trans": [
            "【SweepLineIndex】A sweepline implements a sorted index on a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "SweepLineIndex【A】sweepline implements a sorted index on a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "sweepline",
        "trans": [
            "SweepLineIndex A【sweepline】implements a sorted index on a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "implements",
        "trans": [
            "SweepLineIndex A sweepline【implements】a sorted index on a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SweepLineIndex A sweepline implements【a】sorted index on a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "sorted",
        "trans": [
            "SweepLineIndex A sweepline implements a【sorted】index on a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "index",
        "trans": [
            "SweepLineIndex A sweepline implements a sorted【index】on a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "SweepLineIndex A sweepline implements a sorted index【on】a set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SweepLineIndex A sweepline implements a sorted index on【a】set of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "set",
        "trans": [
            "SweepLineIndex A sweepline implements a sorted index on a【set】of intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SweepLineIndex A sweepline implements a sorted index on a set【of】intervals.",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "intervals.",
        "trans": [
            "SweepLineIndex A sweepline implements a sorted index on a set of【intervals.】",
            "　　　sweepline实现了分类索引的间隔。"
        ]
    },
    {
        "name": "SweepLineInterval",
        "trans": [
            "【SweepLineInterval】",
            "　　　SweepLineInterval"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void print(Object obj)",
            "　　　打印(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】print(Object obj)",
            "　　　打印(对象obj)"
        ]
    },
    {
        "name": "print(Object",
        "trans": [
            "static void【print(Object】obj)",
            "　　　打印(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "static void print(Object【obj)】",
            "　　　打印(对象obj)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void print(String str)",
            "　　　打印(String str)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】print(String str)",
            "　　　打印(String str)"
        ]
    },
    {
        "name": "print(String",
        "trans": [
            "static void【print(String】str)",
            "　　　打印(String str)"
        ]
    },
    {
        "name": "str)",
        "trans": [
            "static void print(String【str)】",
            "　　　打印(String str)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void printIfWatch(Object obj)",
            "　　　printIfWatch(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】printIfWatch(Object obj)",
            "　　　printIfWatch(对象obj)"
        ]
    },
    {
        "name": "printIfWatch(Object",
        "trans": [
            "static void【printIfWatch(Object】obj)",
            "　　　printIfWatch(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "static void printIfWatch(Object【obj)】",
            "　　　printIfWatch(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】println()",
            "　　　println ()"
        ]
    },
    {
        "name": "println()",
        "trans": [
            "void【println()】",
            "　　　println ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void println(Object obj)",
            "　　　println(对象obj)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】println(Object obj)",
            "　　　println(对象obj)"
        ]
    },
    {
        "name": "println(Object",
        "trans": [
            "static void【println(Object】obj)",
            "　　　println(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "static void println(Object【obj)】",
            "　　　println(对象obj)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void printTime(String tag)",
            "　　　printTime(字符串标记)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】printTime(String tag)",
            "　　　printTime(字符串标记)"
        ]
    },
    {
        "name": "printTime(String",
        "trans": [
            "static void【printTime(String】tag)",
            "　　　printTime(字符串标记)"
        ]
    },
    {
        "name": "tag)",
        "trans": [
            "static void printTime(String【tag)】",
            "　　　printTime(字符串标记)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void printWatch()",
            "　　　printWatch ()"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】printWatch()",
            "　　　printWatch ()"
        ]
    },
    {
        "name": "printWatch()",
        "trans": [
            "static void【printWatch()】",
            "　　　printWatch ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】void resetTime()",
            "　　　resetTime ()"
        ]
    },
    {
        "name": "void",
        "trans": [
            "static【void】resetTime()",
            "　　　resetTime ()"
        ]
    },
    {
        "name": "resetTime()",
        "trans": [
            "static void【resetTime()】",
            "　　　resetTime ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】LineString toLine(Coordinate p0, Coordinate p1)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "static【LineString】toLine(Coordinate p0, Coordinate p1)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "toLine(Coordinate",
        "trans": [
            "static LineString【toLine(Coordinate】p0, Coordinate p1)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p0,",
        "trans": [
            "static LineString toLine(Coordinate【p0,】Coordinate p1)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static LineString toLine(Coordinate p0,【Coordinate】p1)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p1)",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate【p1)】",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】LineString toLine(Coordinate p0, Coordinate p1, Coordinate p2)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "static【LineString】toLine(Coordinate p0, Coordinate p1, Coordinate p2)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "toLine(Coordinate",
        "trans": [
            "static LineString【toLine(Coordinate】p0, Coordinate p1, Coordinate p2)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p0,",
        "trans": [
            "static LineString toLine(Coordinate【p0,】Coordinate p1, Coordinate p2)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static LineString toLine(Coordinate p0,【Coordinate】p1, Coordinate p2)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p1,",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate【p1,】Coordinate p2)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate p1,【Coordinate】p2)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p2)",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate p1, Coordinate【p2)】",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】LineString toLine(Coordinate p0, Coordinate p1, Coordinate p2, Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "static【LineString】toLine(Coordinate p0, Coordinate p1, Coordinate p2, Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "toLine(Coordinate",
        "trans": [
            "static LineString【toLine(Coordinate】p0, Coordinate p1, Coordinate p2, Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p0,",
        "trans": [
            "static LineString toLine(Coordinate【p0,】Coordinate p1, Coordinate p2, Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static LineString toLine(Coordinate p0,【Coordinate】p1, Coordinate p2, Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p1,",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate【p1,】Coordinate p2, Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate p1,【Coordinate】p2, Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p2,",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate p1, Coordinate【p2,】Coordinate p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate p1, Coordinate p2,【Coordinate】p3)",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "p3)",
        "trans": [
            "static LineString toLine(Coordinate p0, Coordinate p1, Coordinate p2, Coordinate【p3)】",
            "　　　toLine(Coordinate p0,"
        ]
    },
    {
        "name": "Boundable",
        "trans": [
            "【Boundable】A spatial object in an AbstractSTRtree.",
            "　　　在一个AbstractSTRtree空间对象。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Boundable【A】spatial object in an AbstractSTRtree.",
            "　　　在一个AbstractSTRtree空间对象。"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "Boundable A【spatial】object in an AbstractSTRtree.",
            "　　　在一个AbstractSTRtree空间对象。"
        ]
    },
    {
        "name": "object",
        "trans": [
            "Boundable A spatial【object】in an AbstractSTRtree.",
            "　　　在一个AbstractSTRtree空间对象。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Boundable A spatial object【in】an AbstractSTRtree.",
            "　　　在一个AbstractSTRtree空间对象。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "Boundable A spatial object in【an】AbstractSTRtree.",
            "　　　在一个AbstractSTRtree空间对象。"
        ]
    },
    {
        "name": "AbstractSTRtree.",
        "trans": [
            "Boundable A spatial object in an【AbstractSTRtree.】",
            "　　　在一个AbstractSTRtree空间对象。"
        ]
    },
    {
        "name": "ItemDistance",
        "trans": [
            "【ItemDistance】A function method which computes the distance between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ItemDistance【A】function method which computes the distance between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "function",
        "trans": [
            "ItemDistance A【function】method which computes the distance between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "method",
        "trans": [
            "ItemDistance A function【method】which computes the distance between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "which",
        "trans": [
            "ItemDistance A function method【which】computes the distance between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "computes",
        "trans": [
            "ItemDistance A function method which【computes】the distance between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ItemDistance A function method which computes【the】distance between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "ItemDistance A function method which computes the【distance】between two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "between",
        "trans": [
            "ItemDistance A function method which computes the distance【between】two ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "two",
        "trans": [
            "ItemDistance A function method which computes the distance between【two】ItemBoundables in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "ItemBoundables",
        "trans": [
            "ItemDistance A function method which computes the distance between two【ItemBoundables】in an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "in",
        "trans": [
            "ItemDistance A function method which computes the distance between two ItemBoundables【in】an STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "an",
        "trans": [
            "ItemDistance A function method which computes the distance between two ItemBoundables in【an】STRtree.",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "STRtree.",
        "trans": [
            "ItemDistance A function method which computes the distance between two ItemBoundables in an【STRtree.】",
            "　　　一个函数方法计算距离"
        ]
    },
    {
        "name": "AbstractNode",
        "trans": [
            "【AbstractNode】A node of an AbstractSTRtree.",
            "　　　AbstractSTRtree的一个节点。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "AbstractNode【A】node of an AbstractSTRtree.",
            "　　　AbstractSTRtree的一个节点。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "AbstractNode A【node】of an AbstractSTRtree.",
            "　　　AbstractSTRtree的一个节点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "AbstractNode A node【of】an AbstractSTRtree.",
            "　　　AbstractSTRtree的一个节点。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "AbstractNode A node of【an】AbstractSTRtree.",
            "　　　AbstractSTRtree的一个节点。"
        ]
    },
    {
        "name": "AbstractSTRtree.",
        "trans": [
            "AbstractNode A node of an【AbstractSTRtree.】",
            "　　　AbstractSTRtree的一个节点。"
        ]
    },
    {
        "name": "AbstractSTRtree",
        "trans": [
            "【AbstractSTRtree】Base class for STRtree and SIRtree.",
            "　　　基类STRtree SIRtree。"
        ]
    },
    {
        "name": "Base",
        "trans": [
            "AbstractSTRtree【Base】class for STRtree and SIRtree.",
            "　　　基类STRtree SIRtree。"
        ]
    },
    {
        "name": "class",
        "trans": [
            "AbstractSTRtree Base【class】for STRtree and SIRtree.",
            "　　　基类STRtree SIRtree。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "AbstractSTRtree Base class【for】STRtree and SIRtree.",
            "　　　基类STRtree SIRtree。"
        ]
    },
    {
        "name": "STRtree",
        "trans": [
            "AbstractSTRtree Base class for【STRtree】and SIRtree.",
            "　　　基类STRtree SIRtree。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "AbstractSTRtree Base class for STRtree【and】SIRtree.",
            "　　　基类STRtree SIRtree。"
        ]
    },
    {
        "name": "SIRtree.",
        "trans": [
            "AbstractSTRtree Base class for STRtree and【SIRtree.】",
            "　　　基类STRtree SIRtree。"
        ]
    },
    {
        "name": "DoubleBits",
        "trans": [
            "【DoubleBits】DoubleBits manipulates Double numbers by using bit manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "DoubleBits",
        "trans": [
            "DoubleBits【DoubleBits】manipulates Double numbers by using bit manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "manipulates",
        "trans": [
            "DoubleBits DoubleBits【manipulates】Double numbers by using bit manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "Double",
        "trans": [
            "DoubleBits DoubleBits manipulates【Double】numbers by using bit manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "numbers",
        "trans": [
            "DoubleBits DoubleBits manipulates Double【numbers】by using bit manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "by",
        "trans": [
            "DoubleBits DoubleBits manipulates Double numbers【by】using bit manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "using",
        "trans": [
            "DoubleBits DoubleBits manipulates Double numbers by【using】bit manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "bit",
        "trans": [
            "DoubleBits DoubleBits manipulates Double numbers by using【bit】manipulation and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "manipulation",
        "trans": [
            "DoubleBits DoubleBits manipulates Double numbers by using bit【manipulation】and bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "and",
        "trans": [
            "DoubleBits DoubleBits manipulates Double numbers by using bit manipulation【and】bit-field extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "bit-field",
        "trans": [
            "DoubleBits DoubleBits manipulates Double numbers by using bit manipulation and【bit-field】extraction.",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "extraction.",
        "trans": [
            "DoubleBits DoubleBits manipulates Double numbers by using bit manipulation and bit-field【extraction.】",
            "　　　DoubleBits操纵双数字"
        ]
    },
    {
        "name": "IntervalSize",
        "trans": [
            "【IntervalSize】Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "IntervalSize【Provides】a test for whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IntervalSize Provides【a】test for whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "test",
        "trans": [
            "IntervalSize Provides a【test】for whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "for",
        "trans": [
            "IntervalSize Provides a test【for】whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "IntervalSize Provides a test for【whether】an interval is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "an",
        "trans": [
            "IntervalSize Provides a test for whether【an】interval is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "interval",
        "trans": [
            "IntervalSize Provides a test for whether an【interval】is so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "is",
        "trans": [
            "IntervalSize Provides a test for whether an interval【is】so small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "so",
        "trans": [
            "IntervalSize Provides a test for whether an interval is【so】small it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "small",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so【small】it should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "it",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small【it】should be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "should",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it【should】be considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "be",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should【be】considered as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "considered",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be【considered】as zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "as",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered【as】zero for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "zero",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as【zero】for the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "for",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero【for】the purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "the",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for【the】purposes of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "purposes",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the【purposes】of inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes【of】inserting it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "inserting",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of【inserting】it into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "it",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting【it】into a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "into",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting it【into】a binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting it into【a】binary tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "binary",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting it into a【binary】tree.",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "tree.",
        "trans": [
            "IntervalSize Provides a test for whether an interval is so small it should be considered as zero for the purposes of inserting it into a binary【tree.】",
            "　　　为一个区间是否提供了一个测试"
        ]
    },
    {
        "name": "Key",
        "trans": [
            "【Key】A Key is a unique identifier for a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Key【A】Key is a unique identifier for a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "Key",
        "trans": [
            "Key A【Key】is a unique identifier for a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "Key A Key【is】a unique identifier for a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Key A Key is【a】unique identifier for a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "unique",
        "trans": [
            "Key A Key is a【unique】identifier for a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "identifier",
        "trans": [
            "Key A Key is a unique【identifier】for a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Key A Key is a unique identifier【for】a node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Key A Key is a unique identifier for【a】node in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "Key A Key is a unique identifier for a【node】in a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Key A Key is a unique identifier for a node【in】a quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Key A Key is a unique identifier for a node in【a】quadtree.",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "quadtree.",
        "trans": [
            "Key A Key is a unique identifier for a node in a【quadtree.】",
            "　　　关键是一个独特的标识符为四叉树中的一个节点。"
        ]
    },
    {
        "name": "Node",
        "trans": [
            "【Node】Represents a node of a Quadtree.",
            "　　　代表了四叉树的一个节点。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "Node【Represents】a node of a Quadtree.",
            "　　　代表了四叉树的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Node Represents【a】node of a Quadtree.",
            "　　　代表了四叉树的一个节点。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "Node Represents a【node】of a Quadtree.",
            "　　　代表了四叉树的一个节点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Node Represents a node【of】a Quadtree.",
            "　　　代表了四叉树的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Node Represents a node of【a】Quadtree.",
            "　　　代表了四叉树的一个节点。"
        ]
    },
    {
        "name": "Quadtree.",
        "trans": [
            "Node Represents a node of a【Quadtree.】",
            "　　　代表了四叉树的一个节点。"
        ]
    },
    {
        "name": "NodeBase",
        "trans": [
            "【NodeBase】The base class for nodes in a Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "NodeBase【The】base class for nodes in a Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "base",
        "trans": [
            "NodeBase The【base】class for nodes in a Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "class",
        "trans": [
            "NodeBase The base【class】for nodes in a Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "NodeBase The base class【for】nodes in a Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "NodeBase The base class for【nodes】in a Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "NodeBase The base class for nodes【in】a Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "NodeBase The base class for nodes in【a】Quadtree.",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "Quadtree.",
        "trans": [
            "NodeBase The base class for nodes in a【Quadtree.】",
            "　　　四叉树节点的基类。"
        ]
    },
    {
        "name": "Quadtree",
        "trans": [
            "【Quadtree】A Quadtree is a spatial index structure for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Quadtree【A】Quadtree is a spatial index structure for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "Quadtree",
        "trans": [
            "Quadtree A【Quadtree】is a spatial index structure for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "is",
        "trans": [
            "Quadtree A Quadtree【is】a spatial index structure for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Quadtree A Quadtree is【a】spatial index structure for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "Quadtree A Quadtree is a【spatial】index structure for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "index",
        "trans": [
            "Quadtree A Quadtree is a spatial【index】structure for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "structure",
        "trans": [
            "Quadtree A Quadtree is a spatial index【structure】for efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure【for】efficient range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "efficient",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for【efficient】range querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "range",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient【range】querying of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "querying",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient range【querying】of items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient range querying【of】items bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "items",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient range querying of【items】bounded by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "bounded",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient range querying of items【bounded】by 2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "by",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient range querying of items bounded【by】2D rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "2D",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient range querying of items bounded by【2D】rectangles.",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "rectangles.",
        "trans": [
            "Quadtree A Quadtree is a spatial index structure for efficient range querying of items bounded by 2D【rectangles.】",
            "　　　四叉树是一种高效的空间索引结构范围查询"
        ]
    },
    {
        "name": "Root",
        "trans": [
            "【Root】QuadRoot is the root of a single Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "QuadRoot",
        "trans": [
            "Root【QuadRoot】is the root of a single Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "Root QuadRoot【is】the root of a single Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Root QuadRoot is【the】root of a single Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "root",
        "trans": [
            "Root QuadRoot is the【root】of a single Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Root QuadRoot is the root【of】a single Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Root QuadRoot is the root of【a】single Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "single",
        "trans": [
            "Root QuadRoot is the root of a【single】Quadtree.",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "Quadtree.",
        "trans": [
            "Root QuadRoot is the root of a single【Quadtree.】",
            "　　　QuadRoot是一个四叉树的根源。"
        ]
    },
    {
        "name": "KdNodeVisitor",
        "trans": [
            "【KdNodeVisitor】A visitor for KdNodes in a KdTree index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "KdNodeVisitor【A】visitor for KdNodes in a KdTree index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "visitor",
        "trans": [
            "KdNodeVisitor A【visitor】for KdNodes in a KdTree index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "KdNodeVisitor A visitor【for】KdNodes in a KdTree index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "KdNodes",
        "trans": [
            "KdNodeVisitor A visitor for【KdNodes】in a KdTree index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "KdNodeVisitor A visitor for KdNodes【in】a KdTree index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "KdNodeVisitor A visitor for KdNodes in【a】KdTree index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "KdTree",
        "trans": [
            "KdNodeVisitor A visitor for KdNodes in a【KdTree】index.",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "index.",
        "trans": [
            "KdNodeVisitor A visitor for KdNodes in a KdTree【index.】",
            "　　　一个访客在KdTree KdNodes索引。"
        ]
    },
    {
        "name": "KdNode",
        "trans": [
            "【KdNode】A node of a KdTree, which represents one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "KdNode【A】node of a KdTree, which represents one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "KdNode A【node】of a KdTree, which represents one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "KdNode A node【of】a KdTree, which represents one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "KdNode A node of【a】KdTree, which represents one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "KdTree,",
        "trans": [
            "KdNode A node of a【KdTree,】which represents one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "KdNode A node of a KdTree,【which】represents one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "represents",
        "trans": [
            "KdNode A node of a KdTree, which【represents】one or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "one",
        "trans": [
            "KdNode A node of a KdTree, which represents【one】or more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "or",
        "trans": [
            "KdNode A node of a KdTree, which represents one【or】more points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "more",
        "trans": [
            "KdNode A node of a KdTree, which represents one or【more】points in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "KdNode A node of a KdTree, which represents one or more【points】in the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "KdNode A node of a KdTree, which represents one or more points【in】the same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "KdNode A node of a KdTree, which represents one or more points in【the】same location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "same",
        "trans": [
            "KdNode A node of a KdTree, which represents one or more points in the【same】location.",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "location.",
        "trans": [
            "KdNode A node of a KdTree, which represents one or more points in the same【location.】",
            "　　　KdTree的节点代表一个或多个点在相同的位置。"
        ]
    },
    {
        "name": "KdTree",
        "trans": [
            "【KdTree】An implementation of a 2-D KD-Tree.",
            "　　　一个实现二维kd tree。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "KdTree【An】implementation of a 2-D KD-Tree.",
            "　　　一个实现二维kd tree。"
        ]
    },
    {
        "name": "implementation",
        "trans": [
            "KdTree An【implementation】of a 2-D KD-Tree.",
            "　　　一个实现二维kd tree。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "KdTree An implementation【of】a 2-D KD-Tree.",
            "　　　一个实现二维kd tree。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "KdTree An implementation of【a】2-D KD-Tree.",
            "　　　一个实现二维kd tree。"
        ]
    },
    {
        "name": "2-D",
        "trans": [
            "KdTree An implementation of a【2-D】KD-Tree.",
            "　　　一个实现二维kd tree。"
        ]
    },
    {
        "name": "KD-Tree.",
        "trans": [
            "KdTree An implementation of a 2-D【KD-Tree.】",
            "　　　一个实现二维kd tree。"
        ]
    },
    {
        "name": "IntervalRTreeBranchNode",
        "trans": [
            "【IntervalRTreeBranchNode】",
            "　　　IntervalRTreeBranchNode"
        ]
    },
    {
        "name": "IntervalRTreeLeafNode",
        "trans": [
            "【IntervalRTreeLeafNode】",
            "　　　IntervalRTreeLeafNode"
        ]
    },
    {
        "name": "IntervalRTreeNode",
        "trans": [
            "【IntervalRTreeNode】",
            "　　　IntervalRTreeNode"
        ]
    },
    {
        "name": "IntervalRTreeNode.NodeComparator",
        "trans": [
            "【IntervalRTreeNode.NodeComparator】",
            "　　　IntervalRTreeNode.NodeComparator"
        ]
    },
    {
        "name": "SortedPackedIntervalRTree",
        "trans": [
            "【SortedPackedIntervalRTree】A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "A",
        "trans": [
            "SortedPackedIntervalRTree【A】static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "SortedPackedIntervalRTree A【static】index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "index",
        "trans": [
            "SortedPackedIntervalRTree A static【index】on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "on",
        "trans": [
            "SortedPackedIntervalRTree A static index【on】a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SortedPackedIntervalRTree A static index on【a】set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "set",
        "trans": [
            "SortedPackedIntervalRTree A static index on a【set】of 1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set【of】1-dimensional intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "1-dimensional",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of【1-dimensional】intervals, using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "intervals,",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional【intervals,】using an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals,【using】an R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using【an】R-Tree packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "R-Tree",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an【R-Tree】packed based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "packed",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree【packed】based on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "based",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed【based】on the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "on",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed based【on】the order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed based on【the】order of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "order",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the【order】of the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order【of】the interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of【the】interval midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "interval",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the【interval】midpoints.",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "midpoints.",
        "trans": [
            "SortedPackedIntervalRTree A static index on a set of 1-dimensional intervals, using an R-Tree packed based on the order of the interval【midpoints.】",
            "　　　一个静态指数在一组维区间,"
        ]
    },
    {
        "name": "BoundablePairDistanceComparator",
        "trans": [
            "【BoundablePairDistanceComparator】The Class BoundablePairDistanceComparator.",
            "　　　类BoundablePairDistanceComparator。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "BoundablePairDistanceComparator【The】Class BoundablePairDistanceComparator.",
            "　　　类BoundablePairDistanceComparator。"
        ]
    },
    {
        "name": "Class",
        "trans": [
            "BoundablePairDistanceComparator The【Class】BoundablePairDistanceComparator.",
            "　　　类BoundablePairDistanceComparator。"
        ]
    },
    {
        "name": "BoundablePairDistanceComparator.",
        "trans": [
            "BoundablePairDistanceComparator The Class【BoundablePairDistanceComparator.】",
            "　　　类BoundablePairDistanceComparator。"
        ]
    },
    {
        "name": "EnvelopeDistance",
        "trans": [
            "【EnvelopeDistance】Functions for computing distances between Envelopes.",
            "　　　函数计算之间的距离信封。"
        ]
    },
    {
        "name": "Functions",
        "trans": [
            "EnvelopeDistance【Functions】for computing distances between Envelopes.",
            "　　　函数计算之间的距离信封。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "EnvelopeDistance Functions【for】computing distances between Envelopes.",
            "　　　函数计算之间的距离信封。"
        ]
    },
    {
        "name": "computing",
        "trans": [
            "EnvelopeDistance Functions for【computing】distances between Envelopes.",
            "　　　函数计算之间的距离信封。"
        ]
    },
    {
        "name": "distances",
        "trans": [
            "EnvelopeDistance Functions for computing【distances】between Envelopes.",
            "　　　函数计算之间的距离信封。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "EnvelopeDistance Functions for computing distances【between】Envelopes.",
            "　　　函数计算之间的距离信封。"
        ]
    },
    {
        "name": "Envelopes.",
        "trans": [
            "EnvelopeDistance Functions for computing distances between【Envelopes.】",
            "　　　函数计算之间的距离信封。"
        ]
    },
    {
        "name": "GeometryItemDistance",
        "trans": [
            "【GeometryItemDistance】An ItemDistance function for items which are Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "An",
        "trans": [
            "GeometryItemDistance【An】ItemDistance function for items which are Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "ItemDistance",
        "trans": [
            "GeometryItemDistance An【ItemDistance】function for items which are Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "function",
        "trans": [
            "GeometryItemDistance An ItemDistance【function】for items which are Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GeometryItemDistance An ItemDistance function【for】items which are Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "items",
        "trans": [
            "GeometryItemDistance An ItemDistance function for【items】which are Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryItemDistance An ItemDistance function for items【which】are Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "are",
        "trans": [
            "GeometryItemDistance An ItemDistance function for items which【are】Geometrys, using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "Geometrys,",
        "trans": [
            "GeometryItemDistance An ItemDistance function for items which are【Geometrys,】using the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "using",
        "trans": [
            "GeometryItemDistance An ItemDistance function for items which are Geometrys,【using】the Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometryItemDistance An ItemDistance function for items which are Geometrys, using【the】Geometry.distance(Geometry) method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "Geometry.distance(Geometry)",
        "trans": [
            "GeometryItemDistance An ItemDistance function for items which are Geometrys, using the【Geometry.distance(Geometry)】method.",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "method.",
        "trans": [
            "GeometryItemDistance An ItemDistance function for items which are Geometrys, using the Geometry.distance(Geometry)【method.】",
            "　　　一个ItemDistance函数为"
        ]
    },
    {
        "name": "Interval",
        "trans": [
            "【Interval】A contiguous portion of 1D-space.",
            "　　　一个连续的1维空间的一部分。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Interval【A】contiguous portion of 1D-space.",
            "　　　一个连续的1维空间的一部分。"
        ]
    },
    {
        "name": "contiguous",
        "trans": [
            "Interval A【contiguous】portion of 1D-space.",
            "　　　一个连续的1维空间的一部分。"
        ]
    },
    {
        "name": "portion",
        "trans": [
            "Interval A contiguous【portion】of 1D-space.",
            "　　　一个连续的1维空间的一部分。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Interval A contiguous portion【of】1D-space.",
            "　　　一个连续的1维空间的一部分。"
        ]
    },
    {
        "name": "1D-space.",
        "trans": [
            "Interval A contiguous portion of【1D-space.】",
            "　　　一个连续的1维空间的一部分。"
        ]
    },
    {
        "name": "ItemBoundable",
        "trans": [
            "【ItemBoundable】Boundable wrapper for a non-Boundable spatial object.",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "Boundable",
        "trans": [
            "ItemBoundable【Boundable】wrapper for a non-Boundable spatial object.",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "wrapper",
        "trans": [
            "ItemBoundable Boundable【wrapper】for a non-Boundable spatial object.",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ItemBoundable Boundable wrapper【for】a non-Boundable spatial object.",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ItemBoundable Boundable wrapper for【a】non-Boundable spatial object.",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "non-Boundable",
        "trans": [
            "ItemBoundable Boundable wrapper for a【non-Boundable】spatial object.",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "ItemBoundable Boundable wrapper for a non-Boundable【spatial】object.",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "object.",
        "trans": [
            "ItemBoundable Boundable wrapper for a non-Boundable spatial【object.】",
            "　　　Boundable non-Boundable空间对象包装器。"
        ]
    },
    {
        "name": "SIRtree",
        "trans": [
            "【SIRtree】One-dimensional version of an STR-packed R-tree.",
            "　　　一维版本的STR-packed r - tree。"
        ]
    },
    {
        "name": "One-dimensional",
        "trans": [
            "SIRtree【One-dimensional】version of an STR-packed R-tree.",
            "　　　一维版本的STR-packed r - tree。"
        ]
    },
    {
        "name": "version",
        "trans": [
            "SIRtree One-dimensional【version】of an STR-packed R-tree.",
            "　　　一维版本的STR-packed r - tree。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SIRtree One-dimensional version【of】an STR-packed R-tree.",
            "　　　一维版本的STR-packed r - tree。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "SIRtree One-dimensional version of【an】STR-packed R-tree.",
            "　　　一维版本的STR-packed r - tree。"
        ]
    },
    {
        "name": "STR-packed",
        "trans": [
            "SIRtree One-dimensional version of an【STR-packed】R-tree.",
            "　　　一维版本的STR-packed r - tree。"
        ]
    },
    {
        "name": "R-tree.",
        "trans": [
            "SIRtree One-dimensional version of an STR-packed【R-tree.】",
            "　　　一维版本的STR-packed r - tree。"
        ]
    },
    {
        "name": "STRtree",
        "trans": [
            "【STRtree】A query-only R-tree created using the Sort-Tile-Recursive (STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "STRtree【A】query-only R-tree created using the Sort-Tile-Recursive (STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "query-only",
        "trans": [
            "STRtree A【query-only】R-tree created using the Sort-Tile-Recursive (STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "R-tree",
        "trans": [
            "STRtree A query-only【R-tree】created using the Sort-Tile-Recursive (STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "created",
        "trans": [
            "STRtree A query-only R-tree【created】using the Sort-Tile-Recursive (STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "using",
        "trans": [
            "STRtree A query-only R-tree created【using】the Sort-Tile-Recursive (STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "STRtree A query-only R-tree created using【the】Sort-Tile-Recursive (STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "Sort-Tile-Recursive",
        "trans": [
            "STRtree A query-only R-tree created using the【Sort-Tile-Recursive】(STR) algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "(STR)",
        "trans": [
            "STRtree A query-only R-tree created using the Sort-Tile-Recursive【(STR)】algorithm.",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "algorithm.",
        "trans": [
            "STRtree A query-only R-tree created using the Sort-Tile-Recursive (STR)【algorithm.】",
            "　　　只进行查询使用Sort-Tile-Recursive创建的r - tree (STR)算法。"
        ]
    },
    {
        "name": "HilbertEncoder",
        "trans": [
            "【HilbertEncoder】",
            "　　　HilbertEncoder"
        ]
    },
    {
        "name": "HPRtree",
        "trans": [
            "【HPRtree】A Hilbert-Packed R-tree.",
            "　　　一个Hilbert-Packed r - tree。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "HPRtree【A】Hilbert-Packed R-tree.",
            "　　　一个Hilbert-Packed r - tree。"
        ]
    },
    {
        "name": "Hilbert-Packed",
        "trans": [
            "HPRtree A【Hilbert-Packed】R-tree.",
            "　　　一个Hilbert-Packed r - tree。"
        ]
    },
    {
        "name": "R-tree.",
        "trans": [
            "HPRtree A Hilbert-Packed【R-tree.】",
            "　　　一个Hilbert-Packed r - tree。"
        ]
    },
    {
        "name": "Item",
        "trans": [
            "【Item】",
            "　　　项"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "【Object】execute(Object obj)",
            "　　　执行(对象obj)"
        ]
    },
    {
        "name": "execute(Object",
        "trans": [
            "Object【execute(Object】obj)",
            "　　　执行(对象obj)"
        ]
    },
    {
        "name": "obj)",
        "trans": [
            "Object execute(Object【obj)】",
            "　　　执行(对象obj)"
        ]
    },
    {
        "name": "MonotoneChain",
        "trans": [
            "【MonotoneChain】Monotone Chains are a way of partitioning the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "Monotone",
        "trans": [
            "MonotoneChain【Monotone】Chains are a way of partitioning the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "Chains",
        "trans": [
            "MonotoneChain Monotone【Chains】are a way of partitioning the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "are",
        "trans": [
            "MonotoneChain Monotone Chains【are】a way of partitioning the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MonotoneChain Monotone Chains are【a】way of partitioning the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "way",
        "trans": [
            "MonotoneChain Monotone Chains are a【way】of partitioning the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChain Monotone Chains are a way【of】partitioning the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "partitioning",
        "trans": [
            "MonotoneChain Monotone Chains are a way of【partitioning】the segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning【the】segments of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the【segments】of a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments【of】a linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of【a】linestring to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "linestring",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a【linestring】to allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "to",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a linestring【to】allow for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "allow",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a linestring to【allow】for fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a linestring to allow【for】fast searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "fast",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a linestring to allow for【fast】searching of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "searching",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a linestring to allow for fast【searching】of intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a linestring to allow for fast searching【of】intersections.",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "intersections.",
        "trans": [
            "MonotoneChain Monotone Chains are a way of partitioning the segments of a linestring to allow for fast searching of【intersections.】",
            "　　　单调链是一个linestring分区段的方法"
        ]
    },
    {
        "name": "MonotoneChainBuilder",
        "trans": [
            "【MonotoneChainBuilder】Constructs MonotoneChains for sequences of Coordinates.",
            "　　　构造MonotoneChains"
        ]
    },
    {
        "name": "Constructs",
        "trans": [
            "MonotoneChainBuilder【Constructs】MonotoneChains for sequences of Coordinates.",
            "　　　构造MonotoneChains"
        ]
    },
    {
        "name": "MonotoneChains",
        "trans": [
            "MonotoneChainBuilder Constructs【MonotoneChains】for sequences of Coordinates.",
            "　　　构造MonotoneChains"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChainBuilder Constructs MonotoneChains【for】sequences of Coordinates.",
            "　　　构造MonotoneChains"
        ]
    },
    {
        "name": "sequences",
        "trans": [
            "MonotoneChainBuilder Constructs MonotoneChains for【sequences】of Coordinates.",
            "　　　构造MonotoneChains"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChainBuilder Constructs MonotoneChains for sequences【of】Coordinates.",
            "　　　构造MonotoneChains"
        ]
    },
    {
        "name": "Coordinates.",
        "trans": [
            "MonotoneChainBuilder Constructs MonotoneChains for sequences of【Coordinates.】",
            "　　　构造MonotoneChains"
        ]
    },
    {
        "name": "MonotoneChainOverlapAction",
        "trans": [
            "【MonotoneChainOverlapAction】The action for the internal iterator for performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "The",
        "trans": [
            "MonotoneChainOverlapAction【The】action for the internal iterator for performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "action",
        "trans": [
            "MonotoneChainOverlapAction The【action】for the internal iterator for performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChainOverlapAction The action【for】the internal iterator for performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MonotoneChainOverlapAction The action for【the】internal iterator for performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "internal",
        "trans": [
            "MonotoneChainOverlapAction The action for the【internal】iterator for performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "iterator",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal【iterator】for performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal iterator【for】performing overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "performing",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal iterator for【performing】overlap queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "overlap",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal iterator for performing【overlap】queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "queries",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal iterator for performing overlap【queries】on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "on",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal iterator for performing overlap queries【on】a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal iterator for performing overlap queries on【a】MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "MonotoneChain",
        "trans": [
            "MonotoneChainOverlapAction The action for the internal iterator for performing overlap queries on a【MonotoneChain】",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "MonotoneChainSelectAction",
        "trans": [
            "【MonotoneChainSelectAction】The action for the internal iterator for performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "The",
        "trans": [
            "MonotoneChainSelectAction【The】action for the internal iterator for performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "action",
        "trans": [
            "MonotoneChainSelectAction The【action】for the internal iterator for performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChainSelectAction The action【for】the internal iterator for performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MonotoneChainSelectAction The action for【the】internal iterator for performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "internal",
        "trans": [
            "MonotoneChainSelectAction The action for the【internal】iterator for performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "iterator",
        "trans": [
            "MonotoneChainSelectAction The action for the internal【iterator】for performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator【for】performing envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "performing",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator for【performing】envelope select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "envelope",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator for performing【envelope】select queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "select",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator for performing envelope【select】queries on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "queries",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator for performing envelope select【queries】on a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "on",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator for performing envelope select queries【on】a MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator for performing envelope select queries on【a】MonotoneChain",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "MonotoneChain",
        "trans": [
            "MonotoneChainSelectAction The action for the internal iterator for performing envelope select queries on a【MonotoneChain】",
            "　　　内部迭代器来执行的行动"
        ]
    },
    {
        "name": "ItemVisitor",
        "trans": [
            "【ItemVisitor】A visitor for items in a SpatialIndex.",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ItemVisitor【A】visitor for items in a SpatialIndex.",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "visitor",
        "trans": [
            "ItemVisitor A【visitor】for items in a SpatialIndex.",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ItemVisitor A visitor【for】items in a SpatialIndex.",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "items",
        "trans": [
            "ItemVisitor A visitor for【items】in a SpatialIndex.",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "ItemVisitor A visitor for items【in】a SpatialIndex.",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ItemVisitor A visitor for items in【a】SpatialIndex.",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "SpatialIndex.",
        "trans": [
            "ItemVisitor A visitor for items in a【SpatialIndex.】",
            "　　　SpatialIndex客人的物品。"
        ]
    },
    {
        "name": "SpatialIndex",
        "trans": [
            "【SpatialIndex】The basic operations supported by classes implementing spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "The",
        "trans": [
            "SpatialIndex【The】basic operations supported by classes implementing spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "basic",
        "trans": [
            "SpatialIndex The【basic】operations supported by classes implementing spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "operations",
        "trans": [
            "SpatialIndex The basic【operations】supported by classes implementing spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "supported",
        "trans": [
            "SpatialIndex The basic operations【supported】by classes implementing spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "by",
        "trans": [
            "SpatialIndex The basic operations supported【by】classes implementing spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "SpatialIndex The basic operations supported by【classes】implementing spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "implementing",
        "trans": [
            "SpatialIndex The basic operations supported by classes【implementing】spatial index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "SpatialIndex The basic operations supported by classes implementing【spatial】index algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "index",
        "trans": [
            "SpatialIndex The basic operations supported by classes implementing spatial【index】algorithms.",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "algorithms.",
        "trans": [
            "SpatialIndex The basic operations supported by classes implementing spatial index【algorithms.】",
            "　　　支持的基本操作类"
        ]
    },
    {
        "name": "ArrayListVisitor",
        "trans": [
            "【ArrayListVisitor】Builds an array of all visited items.",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "Builds",
        "trans": [
            "ArrayListVisitor【Builds】an array of all visited items.",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "ArrayListVisitor Builds【an】array of all visited items.",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "array",
        "trans": [
            "ArrayListVisitor Builds an【array】of all visited items.",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ArrayListVisitor Builds an array【of】all visited items.",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "ArrayListVisitor Builds an array of【all】visited items.",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "visited",
        "trans": [
            "ArrayListVisitor Builds an array of all【visited】items.",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "items.",
        "trans": [
            "ArrayListVisitor Builds an array of all visited【items.】",
            "　　　建立一个数组的访问项目。"
        ]
    },
    {
        "name": "EdgeSetIntersector",
        "trans": [
            "【EdgeSetIntersector】An EdgeSetIntersector computes all the intersections between the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "An",
        "trans": [
            "EdgeSetIntersector【An】EdgeSetIntersector computes all the intersections between the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "EdgeSetIntersector",
        "trans": [
            "EdgeSetIntersector An【EdgeSetIntersector】computes all the intersections between the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "computes",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector【computes】all the intersections between the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "all",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes【all】the intersections between the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all【the】intersections between the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all the【intersections】between the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "between",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all the intersections【between】the edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all the intersections between【the】edges in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all the intersections between the【edges】in the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "in",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all the intersections between the edges【in】the set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all the intersections between the edges in【the】set.",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "set.",
        "trans": [
            "EdgeSetIntersector An EdgeSetIntersector computes all the intersections between the edges in the【set.】",
            "　　　一个EdgeSetIntersector计算之间的十字路口"
        ]
    },
    {
        "name": "MonotoneChain",
        "trans": [
            "【MonotoneChain】",
            "　　　MonotoneChain"
        ]
    },
    {
        "name": "MonotoneChainEdge",
        "trans": [
            "【MonotoneChainEdge】MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "MonotoneChains",
        "trans": [
            "MonotoneChainEdge【MonotoneChains】are a way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "are",
        "trans": [
            "MonotoneChainEdge MonotoneChains【are】a way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MonotoneChainEdge MonotoneChains are【a】way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "way",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a【way】of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way【of】partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "partitioning",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of【partitioning】the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning【the】segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the【segments】of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments【of】an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "an",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of【an】edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an【edge】to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "to",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge【to】allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "allow",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to【allow】for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to allow【for】fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "fast",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to allow for【fast】searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "searching",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to allow for fast【searching】of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching【of】intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "intersections.",
        "trans": [
            "MonotoneChainEdge MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of【intersections.】",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "MonotoneChainIndexer",
        "trans": [
            "【MonotoneChainIndexer】MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "MonotoneChains",
        "trans": [
            "MonotoneChainIndexer【MonotoneChains】are a way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "are",
        "trans": [
            "MonotoneChainIndexer MonotoneChains【are】a way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are【a】way of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "way",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a【way】of partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way【of】partitioning the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "partitioning",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of【partitioning】the segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning【the】segments of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the【segments】of an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments【of】an edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "an",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of【an】edge to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an【edge】to allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "to",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge【to】allow for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "allow",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to【allow】for fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "for",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to allow【for】fast searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "fast",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to allow for【fast】searching of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "searching",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to allow for fast【searching】of intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching【of】intersections.",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "intersections.",
        "trans": [
            "MonotoneChainIndexer MonotoneChains are a way of partitioning the segments of an edge to allow for fast searching of【intersections.】",
            "　　　MonotoneChains分区段的方法的优势"
        ]
    },
    {
        "name": "SegmentIntersector",
        "trans": [
            "【SegmentIntersector】Computes the intersection of line segments, and adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "SegmentIntersector【Computes】the intersection of line segments, and adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentIntersector Computes【the】intersection of line segments, and adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "SegmentIntersector Computes the【intersection】of line segments, and adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SegmentIntersector Computes the intersection【of】line segments, and adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "line",
        "trans": [
            "SegmentIntersector Computes the intersection of【line】segments, and adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "segments,",
        "trans": [
            "SegmentIntersector Computes the intersection of line【segments,】and adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments,【and】adds the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "adds",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and【adds】the intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds【the】intersection to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds the【intersection】to the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds the intersection【to】the edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds the intersection to【the】edges containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds the intersection to the【edges】containing the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "containing",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds the intersection to the edges【containing】the segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds the intersection to the edges containing【the】segments.",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "SegmentIntersector Computes the intersection of line segments, and adds the intersection to the edges containing the【segments.】",
            "　　　计算线段的交点,"
        ]
    },
    {
        "name": "SimpleEdgeSetIntersector",
        "trans": [
            "【SimpleEdgeSetIntersector】Finds all intersections in one or two sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "SimpleEdgeSetIntersector【Finds】all intersections in one or two sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "all",
        "trans": [
            "SimpleEdgeSetIntersector Finds【all】intersections in one or two sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "SimpleEdgeSetIntersector Finds all【intersections】in one or two sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections【in】one or two sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "one",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in【one】or two sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "or",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one【or】two sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or【two】sets of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two【sets】of edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets【of】edges, using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "edges,",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of【edges,】using the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges,【using】the straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using【the】straightforward method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "straightforward",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the【straightforward】method of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "method",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the straightforward【method】of comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the straightforward method【of】comparing all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "comparing",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the straightforward method of【comparing】all segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "all",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the straightforward method of comparing【all】segments.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "segments.",
        "trans": [
            "SimpleEdgeSetIntersector Finds all intersections in one or two sets of edges, using the straightforward method of comparing all【segments.】",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "SimpleMCSweepLineIntersector",
        "trans": [
            "【SimpleMCSweepLineIntersector】Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "SimpleMCSweepLineIntersector【Finds】all intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "all",
        "trans": [
            "SimpleMCSweepLineIntersector Finds【all】intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all【intersections】in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections【in】one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "one",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in【one】or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "or",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one【or】two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or【two】sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two【sets】of edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets【of】edges, using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "edges,",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of【edges,】using an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges,【using】an x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using【an】x-axis sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "x-axis",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an【x-axis】sweepline algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "sweepline",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis【sweepline】algorithm in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "algorithm",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline【algorithm】in conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm【in】conjunction with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "conjunction",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm in【conjunction】with Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction【with】Monotone Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "Monotone",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with【Monotone】Chains.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "Chains.",
        "trans": [
            "SimpleMCSweepLineIntersector Finds all intersections in one or two sets of edges, using an x-axis sweepline algorithm in conjunction with Monotone【Chains.】",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "SimpleSweepLineIntersector",
        "trans": [
            "【SimpleSweepLineIntersector】Finds all intersections in one or two sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "SimpleSweepLineIntersector【Finds】all intersections in one or two sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "all",
        "trans": [
            "SimpleSweepLineIntersector Finds【all】intersections in one or two sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "SimpleSweepLineIntersector Finds all【intersections】in one or two sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections【in】one or two sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "one",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in【one】or two sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "or",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one【or】two sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or【two】sets of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "sets",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two【sets】of edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets【of】edges, using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "edges,",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets of【edges,】using a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets of edges,【using】a simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets of edges, using【a】simple x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "simple",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets of edges, using a【simple】x-axis sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "x-axis",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets of edges, using a simple【x-axis】sweepline algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "sweepline",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets of edges, using a simple x-axis【sweepline】algorithm.",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "algorithm.",
        "trans": [
            "SimpleSweepLineIntersector Finds all intersections in one or two sets of edges, using a simple x-axis sweepline【algorithm.】",
            "　　　找到所有路口在一个或两组边缘,"
        ]
    },
    {
        "name": "SweepLineEvent",
        "trans": [
            "【SweepLineEvent】",
            "　　　SweepLineEvent"
        ]
    },
    {
        "name": "SweepLineSegment",
        "trans": [
            "【SweepLineSegment】",
            "　　　SweepLineSegment"
        ]
    },
    {
        "name": "EdgeGraph",
        "trans": [
            "【EdgeGraph】A graph comprised of HalfEdges.",
            "　　　HalfEdges组成的图形。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "EdgeGraph【A】graph comprised of HalfEdges.",
            "　　　HalfEdges组成的图形。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "EdgeGraph A【graph】comprised of HalfEdges.",
            "　　　HalfEdges组成的图形。"
        ]
    },
    {
        "name": "comprised",
        "trans": [
            "EdgeGraph A graph【comprised】of HalfEdges.",
            "　　　HalfEdges组成的图形。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeGraph A graph comprised【of】HalfEdges.",
            "　　　HalfEdges组成的图形。"
        ]
    },
    {
        "name": "HalfEdges.",
        "trans": [
            "EdgeGraph A graph comprised of【HalfEdges.】",
            "　　　HalfEdges组成的图形。"
        ]
    },
    {
        "name": "EdgeGraphBuilder",
        "trans": [
            "【EdgeGraphBuilder】Builds an edge graph from geometries containing edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "Builds",
        "trans": [
            "EdgeGraphBuilder【Builds】an edge graph from geometries containing edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "EdgeGraphBuilder Builds【an】edge graph from geometries containing edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "EdgeGraphBuilder Builds an【edge】graph from geometries containing edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "EdgeGraphBuilder Builds an edge【graph】from geometries containing edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "EdgeGraphBuilder Builds an edge graph【from】geometries containing edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "EdgeGraphBuilder Builds an edge graph from【geometries】containing edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "containing",
        "trans": [
            "EdgeGraphBuilder Builds an edge graph from geometries【containing】edges.",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "edges.",
        "trans": [
            "EdgeGraphBuilder Builds an edge graph from geometries containing【edges.】",
            "　　　构建一个包含边缘边缘图从几何图形。"
        ]
    },
    {
        "name": "HalfEdge",
        "trans": [
            "【HalfEdge】Represents a directed component of an edge in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "HalfEdge【Represents】a directed component of an edge in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "HalfEdge Represents【a】directed component of an edge in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "directed",
        "trans": [
            "HalfEdge Represents a【directed】component of an edge in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "component",
        "trans": [
            "HalfEdge Represents a directed【component】of an edge in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "HalfEdge Represents a directed component【of】an edge in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "HalfEdge Represents a directed component of【an】edge in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "HalfEdge Represents a directed component of an【edge】in an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "HalfEdge Represents a directed component of an edge【in】an EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "HalfEdge Represents a directed component of an edge in【an】EdgeGraph.",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "EdgeGraph.",
        "trans": [
            "HalfEdge Represents a directed component of an edge in an【EdgeGraph.】",
            "　　　代表一个指示组件EdgeGraph中的优势。"
        ]
    },
    {
        "name": "MarkHalfEdge",
        "trans": [
            "【MarkHalfEdge】A HalfEdge which supports marking edges with a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "A",
        "trans": [
            "MarkHalfEdge【A】HalfEdge which supports marking edges with a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "HalfEdge",
        "trans": [
            "MarkHalfEdge A【HalfEdge】which supports marking edges with a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "which",
        "trans": [
            "MarkHalfEdge A HalfEdge【which】supports marking edges with a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "supports",
        "trans": [
            "MarkHalfEdge A HalfEdge which【supports】marking edges with a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "marking",
        "trans": [
            "MarkHalfEdge A HalfEdge which supports【marking】edges with a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "MarkHalfEdge A HalfEdge which supports marking【edges】with a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "with",
        "trans": [
            "MarkHalfEdge A HalfEdge which supports marking edges【with】a boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "a",
        "trans": [
            "MarkHalfEdge A HalfEdge which supports marking edges with【a】boolean flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "MarkHalfEdge A HalfEdge which supports marking edges with a【boolean】flag.",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "flag.",
        "trans": [
            "MarkHalfEdge A HalfEdge which supports marking edges with a boolean【flag.】",
            "　　　一个支持HalfEdge"
        ]
    },
    {
        "name": "PointShapeFactory",
        "trans": [
            "【PointShapeFactory】An interface for classes which create Shapes to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "An",
        "trans": [
            "PointShapeFactory【An】interface for classes which create Shapes to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "interface",
        "trans": [
            "PointShapeFactory An【interface】for classes which create Shapes to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "for",
        "trans": [
            "PointShapeFactory An interface【for】classes which create Shapes to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "classes",
        "trans": [
            "PointShapeFactory An interface for【classes】which create Shapes to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "which",
        "trans": [
            "PointShapeFactory An interface for classes【which】create Shapes to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "create",
        "trans": [
            "PointShapeFactory An interface for classes which【create】Shapes to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "Shapes",
        "trans": [
            "PointShapeFactory An interface for classes which create【Shapes】to represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "to",
        "trans": [
            "PointShapeFactory An interface for classes which create Shapes【to】represent PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "represent",
        "trans": [
            "PointShapeFactory An interface for classes which create Shapes to【represent】PointShapeFactory.Point geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "PointShapeFactory.Point",
        "trans": [
            "PointShapeFactory An interface for classes which create Shapes to represent【PointShapeFactory.Point】geometries.",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "PointShapeFactory An interface for classes which create Shapes to represent PointShapeFactory.Point【geometries.】",
            "　　　一个接口的类创建形状来表示"
        ]
    },
    {
        "name": "PointTransformation",
        "trans": [
            "【PointTransformation】Transforms a geometry Coordinate into a Java2D Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "Transforms",
        "trans": [
            "PointTransformation【Transforms】a geometry Coordinate into a Java2D Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointTransformation Transforms【a】geometry Coordinate into a Java2D Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "PointTransformation Transforms a【geometry】Coordinate into a Java2D Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "PointTransformation Transforms a geometry【Coordinate】into a Java2D Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "into",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate【into】a Java2D Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into【a】Java2D Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "Java2D",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a【Java2D】Point, possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "Point,",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D【Point,】possibly with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "possibly",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point,【possibly】with a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly【with】a mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly with【a】mathematical transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "mathematical",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly with a【mathematical】transformation of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "transformation",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly with a mathematical【transformation】of the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly with a mathematical transformation【of】the ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly with a mathematical transformation of【the】ordinate values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly with a mathematical transformation of the【ordinate】values.",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "values.",
        "trans": [
            "PointTransformation Transforms a geometry Coordinate into a Java2D Point, possibly with a mathematical transformation of the ordinate【values.】",
            "　　　将几何坐标转换成一个Java2D点,"
        ]
    },
    {
        "name": "FontGlyphReader",
        "trans": [
            "【FontGlyphReader】Provides methods to read Font glyphs for strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "FontGlyphReader【Provides】methods to read Font glyphs for strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "methods",
        "trans": [
            "FontGlyphReader Provides【methods】to read Font glyphs for strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "to",
        "trans": [
            "FontGlyphReader Provides methods【to】read Font glyphs for strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "read",
        "trans": [
            "FontGlyphReader Provides methods to【read】Font glyphs for strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "Font",
        "trans": [
            "FontGlyphReader Provides methods to read【Font】glyphs for strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "glyphs",
        "trans": [
            "FontGlyphReader Provides methods to read Font【glyphs】for strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "for",
        "trans": [
            "FontGlyphReader Provides methods to read Font glyphs【for】strings into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "strings",
        "trans": [
            "FontGlyphReader Provides methods to read Font glyphs for【strings】into Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "into",
        "trans": [
            "FontGlyphReader Provides methods to read Font glyphs for strings【into】Polygonal geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "Polygonal",
        "trans": [
            "FontGlyphReader Provides methods to read Font glyphs for strings into【Polygonal】geometry.",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "FontGlyphReader Provides methods to read Font glyphs for strings into Polygonal【geometry.】",
            "　　　提供的方法阅读字体符号字符串"
        ]
    },
    {
        "name": "GeometryCollectionShape",
        "trans": [
            "【GeometryCollectionShape】A Shape which contains a heterogeneous collection of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryCollectionShape【A】Shape which contains a heterogeneous collection of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "Shape",
        "trans": [
            "GeometryCollectionShape A【Shape】which contains a heterogeneous collection of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "which",
        "trans": [
            "GeometryCollectionShape A Shape【which】contains a heterogeneous collection of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "contains",
        "trans": [
            "GeometryCollectionShape A Shape which【contains】a heterogeneous collection of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryCollectionShape A Shape which contains【a】heterogeneous collection of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "heterogeneous",
        "trans": [
            "GeometryCollectionShape A Shape which contains a【heterogeneous】collection of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "GeometryCollectionShape A Shape which contains a heterogeneous【collection】of other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometryCollectionShape A Shape which contains a heterogeneous collection【of】other shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "other",
        "trans": [
            "GeometryCollectionShape A Shape which contains a heterogeneous collection of【other】shapes representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "shapes",
        "trans": [
            "GeometryCollectionShape A Shape which contains a heterogeneous collection of other【shapes】representing JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "GeometryCollectionShape A Shape which contains a heterogeneous collection of other shapes【representing】JTS Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "GeometryCollectionShape A Shape which contains a heterogeneous collection of other shapes representing【JTS】Geometrys.",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "Geometrys.",
        "trans": [
            "GeometryCollectionShape A Shape which contains a heterogeneous collection of other shapes representing JTS【Geometrys.】",
            "　　　一个形状包含了异构其他形状的集合"
        ]
    },
    {
        "name": "IdentityPointTransformation",
        "trans": [
            "【IdentityPointTransformation】Copies point ordinates with no transformation.",
            "　　　副本点纵坐标没有转换。"
        ]
    },
    {
        "name": "Copies",
        "trans": [
            "IdentityPointTransformation【Copies】point ordinates with no transformation.",
            "　　　副本点纵坐标没有转换。"
        ]
    },
    {
        "name": "point",
        "trans": [
            "IdentityPointTransformation Copies【point】ordinates with no transformation.",
            "　　　副本点纵坐标没有转换。"
        ]
    },
    {
        "name": "ordinates",
        "trans": [
            "IdentityPointTransformation Copies point【ordinates】with no transformation.",
            "　　　副本点纵坐标没有转换。"
        ]
    },
    {
        "name": "with",
        "trans": [
            "IdentityPointTransformation Copies point ordinates【with】no transformation.",
            "　　　副本点纵坐标没有转换。"
        ]
    },
    {
        "name": "no",
        "trans": [
            "IdentityPointTransformation Copies point ordinates with【no】transformation.",
            "　　　副本点纵坐标没有转换。"
        ]
    },
    {
        "name": "transformation.",
        "trans": [
            "IdentityPointTransformation Copies point ordinates with no【transformation.】",
            "　　　副本点纵坐标没有转换。"
        ]
    },
    {
        "name": "PointShapeFactory.BasePointShapeFactory",
        "trans": [
            "【PointShapeFactory.BasePointShapeFactory】",
            "　　　PointShapeFactory.BasePointShapeFactory"
        ]
    },
    {
        "name": "PointShapeFactory.Circle",
        "trans": [
            "【PointShapeFactory.Circle】",
            "　　　PointShapeFactory.Circle"
        ]
    },
    {
        "name": "PointShapeFactory.Cross",
        "trans": [
            "【PointShapeFactory.Cross】",
            "　　　PointShapeFactory.Cross"
        ]
    },
    {
        "name": "PointShapeFactory.Point",
        "trans": [
            "【PointShapeFactory.Point】",
            "　　　PointShapeFactory.Point"
        ]
    },
    {
        "name": "PointShapeFactory.Square",
        "trans": [
            "【PointShapeFactory.Square】",
            "　　　PointShapeFactory.Square"
        ]
    },
    {
        "name": "PointShapeFactory.Star",
        "trans": [
            "【PointShapeFactory.Star】",
            "　　　PointShapeFactory.Star"
        ]
    },
    {
        "name": "PointShapeFactory.Triangle",
        "trans": [
            "【PointShapeFactory.Triangle】",
            "　　　PointShapeFactory.Triangle"
        ]
    },
    {
        "name": "PointShapeFactory.X",
        "trans": [
            "【PointShapeFactory.X】",
            "　　　PointShapeFactory.X"
        ]
    },
    {
        "name": "PolygonShape",
        "trans": [
            "【PolygonShape】A Shape which represents a polygon which may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "PolygonShape【A】Shape which represents a polygon which may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "Shape",
        "trans": [
            "PolygonShape A【Shape】which represents a polygon which may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "PolygonShape A Shape【which】represents a polygon which may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "represents",
        "trans": [
            "PolygonShape A Shape which【represents】a polygon which may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PolygonShape A Shape which represents【a】polygon which may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "polygon",
        "trans": [
            "PolygonShape A Shape which represents a【polygon】which may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "PolygonShape A Shape which represents a polygon【which】may contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "may",
        "trans": [
            "PolygonShape A Shape which represents a polygon which【may】contain holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "contain",
        "trans": [
            "PolygonShape A Shape which represents a polygon which may【contain】holes.",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "holes.",
        "trans": [
            "PolygonShape A Shape which represents a polygon which may contain【holes.】",
            "　　　一个形状代表一个可能包含漏洞的多边形。"
        ]
    },
    {
        "name": "ShapeCollectionPathIterator",
        "trans": [
            "【ShapeCollectionPathIterator】A PathIterator which provides paths for a collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ShapeCollectionPathIterator【A】PathIterator which provides paths for a collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "PathIterator",
        "trans": [
            "ShapeCollectionPathIterator A【PathIterator】which provides paths for a collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator【which】provides paths for a collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "provides",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator which【provides】paths for a collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "paths",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator which provides【paths】for a collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator which provides paths【for】a collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator which provides paths for【a】collection of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator which provides paths for a【collection】of Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator which provides paths for a collection【of】Shapes.",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "Shapes.",
        "trans": [
            "ShapeCollectionPathIterator A PathIterator which provides paths for a collection of【Shapes.】",
            "　　　PathIterator它提供了路径的集合形状。"
        ]
    },
    {
        "name": "ShapeReader",
        "trans": [
            "【ShapeReader】Converts a Java2D Shape or the more general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "Converts",
        "trans": [
            "ShapeReader【Converts】a Java2D Shape or the more general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ShapeReader Converts【a】Java2D Shape or the more general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "Java2D",
        "trans": [
            "ShapeReader Converts a【Java2D】Shape or the more general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "Shape",
        "trans": [
            "ShapeReader Converts a Java2D【Shape】or the more general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "or",
        "trans": [
            "ShapeReader Converts a Java2D Shape【or】the more general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ShapeReader Converts a Java2D Shape or【the】more general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "more",
        "trans": [
            "ShapeReader Converts a Java2D Shape or the【more】general PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "general",
        "trans": [
            "ShapeReader Converts a Java2D Shape or the more【general】PathIterator into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "PathIterator",
        "trans": [
            "ShapeReader Converts a Java2D Shape or the more general【PathIterator】into a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "into",
        "trans": [
            "ShapeReader Converts a Java2D Shape or the more general PathIterator【into】a Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ShapeReader Converts a Java2D Shape or the more general PathIterator into【a】Geometry.",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "ShapeReader Converts a Java2D Shape or the more general PathIterator into a【Geometry.】",
            "　　　转换一个Java2D的形状"
        ]
    },
    {
        "name": "ShapeWriter",
        "trans": [
            "【ShapeWriter】Writes Geometrys into Java2D Shape objects of the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "Writes",
        "trans": [
            "ShapeWriter【Writes】Geometrys into Java2D Shape objects of the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "ShapeWriter Writes【Geometrys】into Java2D Shape objects of the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "into",
        "trans": [
            "ShapeWriter Writes Geometrys【into】Java2D Shape objects of the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "Java2D",
        "trans": [
            "ShapeWriter Writes Geometrys into【Java2D】Shape objects of the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "Shape",
        "trans": [
            "ShapeWriter Writes Geometrys into Java2D【Shape】objects of the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "objects",
        "trans": [
            "ShapeWriter Writes Geometrys into Java2D Shape【objects】of the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ShapeWriter Writes Geometrys into Java2D Shape objects【of】the appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ShapeWriter Writes Geometrys into Java2D Shape objects of【the】appropriate type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "appropriate",
        "trans": [
            "ShapeWriter Writes Geometrys into Java2D Shape objects of the【appropriate】type.",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "type.",
        "trans": [
            "ShapeWriter Writes Geometrys into Java2D Shape objects of the appropriate【type.】",
            "　　　写几何成Java2D形状对象"
        ]
    },
    {
        "name": "Bintree",
        "trans": [
            "【Bintree】An BinTree (or \"Binary Interval Tree\") is a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "An",
        "trans": [
            "Bintree【An】BinTree (or \"Binary Interval Tree\") is a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "BinTree",
        "trans": [
            "Bintree An【BinTree】(or \"Binary Interval Tree\") is a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "(or",
        "trans": [
            "Bintree An BinTree【(or】\"Binary Interval Tree\") is a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "\"Binary",
        "trans": [
            "Bintree An BinTree (or【\"Binary】Interval Tree\") is a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "Interval",
        "trans": [
            "Bintree An BinTree (or \"Binary【Interval】Tree\") is a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "Tree\")",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval【Tree\")】is a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval Tree\")【is】a 1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval Tree\") is【a】1-dimensional version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "1-dimensional",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval Tree\") is a【1-dimensional】version of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "version",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval Tree\") is a 1-dimensional【version】of a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval Tree\") is a 1-dimensional version【of】a quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval Tree\") is a 1-dimensional version of【a】quadtree.",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "quadtree.",
        "trans": [
            "Bintree An BinTree (or \"Binary Interval Tree\") is a 1-dimensional version of a【quadtree.】",
            "　　　一个二叉查找树(或“二进制区间树”)"
        ]
    },
    {
        "name": "Interval",
        "trans": [
            "【Interval】Represents an (1-dimensional) closed interval on the Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "Interval【Represents】an (1-dimensional) closed interval on the Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "Interval Represents【an】(1-dimensional) closed interval on the Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "(1-dimensional)",
        "trans": [
            "Interval Represents an【(1-dimensional)】closed interval on the Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "closed",
        "trans": [
            "Interval Represents an (1-dimensional)【closed】interval on the Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "interval",
        "trans": [
            "Interval Represents an (1-dimensional) closed【interval】on the Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "Interval Represents an (1-dimensional) closed interval【on】the Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Interval Represents an (1-dimensional) closed interval on【the】Real number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "Real",
        "trans": [
            "Interval Represents an (1-dimensional) closed interval on the【Real】number line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "number",
        "trans": [
            "Interval Represents an (1-dimensional) closed interval on the Real【number】line.",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "line.",
        "trans": [
            "Interval Represents an (1-dimensional) closed interval on the Real number【line.】",
            "　　　代表一个(维)闭区间上真正的数轴。"
        ]
    },
    {
        "name": "Key",
        "trans": [
            "【Key】A Key is a unique identifier for a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Key【A】Key is a unique identifier for a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "Key",
        "trans": [
            "Key A【Key】is a unique identifier for a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "Key A Key【is】a unique identifier for a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Key A Key is【a】unique identifier for a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "unique",
        "trans": [
            "Key A Key is a【unique】identifier for a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "identifier",
        "trans": [
            "Key A Key is a unique【identifier】for a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Key A Key is a unique identifier【for】a node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Key A Key is a unique identifier for【a】node in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "Key A Key is a unique identifier for a【node】in a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "Key A Key is a unique identifier for a node【in】a tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Key A Key is a unique identifier for a node in【a】tree.",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "tree.",
        "trans": [
            "Key A Key is a unique identifier for a node in a【tree.】",
            "　　　关键是一个独特的标识符为树中的一个节点。"
        ]
    },
    {
        "name": "Node",
        "trans": [
            "【Node】A node of a Bintree.",
            "　　　二叉查找树的一个节点。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Node【A】node of a Bintree.",
            "　　　二叉查找树的一个节点。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "Node A【node】of a Bintree.",
            "　　　二叉查找树的一个节点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Node A node【of】a Bintree.",
            "　　　二叉查找树的一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Node A node of【a】Bintree.",
            "　　　二叉查找树的一个节点。"
        ]
    },
    {
        "name": "Bintree.",
        "trans": [
            "Node A node of a【Bintree.】",
            "　　　二叉查找树的一个节点。"
        ]
    },
    {
        "name": "NodeBase",
        "trans": [
            "【NodeBase】The base class for nodes in a Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "NodeBase【The】base class for nodes in a Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "base",
        "trans": [
            "NodeBase The【base】class for nodes in a Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "class",
        "trans": [
            "NodeBase The base【class】for nodes in a Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "NodeBase The base class【for】nodes in a Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "NodeBase The base class for【nodes】in a Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "NodeBase The base class for nodes【in】a Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "NodeBase The base class for nodes in【a】Bintree.",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "Bintree.",
        "trans": [
            "NodeBase The base class for nodes in a【Bintree.】",
            "　　　在二叉查找树节点的基类。"
        ]
    },
    {
        "name": "Root",
        "trans": [
            "【Root】The root node of a single Bintree.",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "The",
        "trans": [
            "Root【The】root node of a single Bintree.",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "root",
        "trans": [
            "Root The【root】node of a single Bintree.",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "node",
        "trans": [
            "Root The root【node】of a single Bintree.",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Root The root node【of】a single Bintree.",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Root The root node of【a】single Bintree.",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "single",
        "trans": [
            "Root The root node of a【single】Bintree.",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "Bintree.",
        "trans": [
            "Root The root node of a single【Bintree.】",
            "　　　一个二叉查找树的根节点。"
        ]
    },
    {
        "name": "Depth",
        "trans": [
            "【Depth】A Depth object records the topological depth of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Depth【A】Depth object records the topological depth of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "Depth",
        "trans": [
            "Depth A【Depth】object records the topological depth of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "object",
        "trans": [
            "Depth A Depth【object】records the topological depth of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "records",
        "trans": [
            "Depth A Depth object【records】the topological depth of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Depth A Depth object records【the】topological depth of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "Depth A Depth object records the【topological】depth of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "depth",
        "trans": [
            "Depth A Depth object records the topological【depth】of the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Depth A Depth object records the topological depth【of】the sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Depth A Depth object records the topological depth of【the】sides of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "sides",
        "trans": [
            "Depth A Depth object records the topological depth of the【sides】of an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Depth A Depth object records the topological depth of the sides【of】an Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "an",
        "trans": [
            "Depth A Depth object records the topological depth of the sides of【an】Edge for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "Edge",
        "trans": [
            "Depth A Depth object records the topological depth of the sides of an【Edge】for up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Depth A Depth object records the topological depth of the sides of an Edge【for】up to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "up",
        "trans": [
            "Depth A Depth object records the topological depth of the sides of an Edge for【up】to two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Depth A Depth object records the topological depth of the sides of an Edge for up【to】two Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "two",
        "trans": [
            "Depth A Depth object records the topological depth of the sides of an Edge for up to【two】Geometries.",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "Geometries.",
        "trans": [
            "Depth A Depth object records the topological depth of the sides of an Edge for up to two【Geometries.】",
            "　　　深度记录对象的拓扑深度"
        ]
    },
    {
        "name": "DirectedEdge",
        "trans": [
            "【DirectedEdge】",
            "　　　DirectedEdge"
        ]
    },
    {
        "name": "DirectedEdgeStar",
        "trans": [
            "【DirectedEdgeStar】A DirectedEdgeStar is an ordered list of outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "DirectedEdgeStar【A】DirectedEdgeStar is an ordered list of outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "DirectedEdgeStar",
        "trans": [
            "DirectedEdgeStar A【DirectedEdgeStar】is an ordered list of outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar【is】an ordered list of outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is【an】ordered list of outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "ordered",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an【ordered】list of outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an ordered【list】of outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an ordered list【of】outgoing DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "outgoing",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an ordered list of【outgoing】DirectedEdges around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "DirectedEdges",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an ordered list of outgoing【DirectedEdges】around a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "around",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an ordered list of outgoing DirectedEdges【around】a node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an ordered list of outgoing DirectedEdges around【a】node.",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "node.",
        "trans": [
            "DirectedEdgeStar A DirectedEdgeStar is an ordered list of outgoing DirectedEdges around a【node.】",
            "　　　DirectedEdgeStar是有序列表的外向DirectedEdges节点。"
        ]
    },
    {
        "name": "Edge",
        "trans": [
            "【Edge】",
            "　　　边缘"
        ]
    },
    {
        "name": "EdgeEnd",
        "trans": [
            "【EdgeEnd】Models the end of an edge incident on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "EdgeEnd【Models】the end of an edge incident on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeEnd Models【the】end of an edge incident on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "end",
        "trans": [
            "EdgeEnd Models the【end】of an edge incident on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeEnd Models the end【of】an edge incident on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "EdgeEnd Models the end of【an】edge incident on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "EdgeEnd Models the end of an【edge】incident on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "incident",
        "trans": [
            "EdgeEnd Models the end of an edge【incident】on a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "on",
        "trans": [
            "EdgeEnd Models the end of an edge incident【on】a node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeEnd Models the end of an edge incident on【a】node.",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "node.",
        "trans": [
            "EdgeEnd Models the end of an edge incident on a【node.】",
            "　　　模型的最后一个事件在一个节点上。"
        ]
    },
    {
        "name": "EdgeEndStar",
        "trans": [
            "【EdgeEndStar】A EdgeEndStar is an ordered list of EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "EdgeEndStar【A】EdgeEndStar is an ordered list of EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "EdgeEndStar",
        "trans": [
            "EdgeEndStar A【EdgeEndStar】is an ordered list of EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "EdgeEndStar A EdgeEndStar【is】an ordered list of EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "EdgeEndStar A EdgeEndStar is【an】ordered list of EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "ordered",
        "trans": [
            "EdgeEndStar A EdgeEndStar is an【ordered】list of EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "EdgeEndStar A EdgeEndStar is an ordered【list】of EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeEndStar A EdgeEndStar is an ordered list【of】EdgeEnds around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "EdgeEnds",
        "trans": [
            "EdgeEndStar A EdgeEndStar is an ordered list of【EdgeEnds】around a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "around",
        "trans": [
            "EdgeEndStar A EdgeEndStar is an ordered list of EdgeEnds【around】a node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeEndStar A EdgeEndStar is an ordered list of EdgeEnds around【a】node.",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "node.",
        "trans": [
            "EdgeEndStar A EdgeEndStar is an ordered list of EdgeEnds around a【node.】",
            "　　　EdgeEndStar EdgeEnds的有序列表是一个节点。"
        ]
    },
    {
        "name": "EdgeIntersection",
        "trans": [
            "【EdgeIntersection】Represents a point on an edge which intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "EdgeIntersection【Represents】a point on an edge which intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeIntersection Represents【a】point on an edge which intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "point",
        "trans": [
            "EdgeIntersection Represents a【point】on an edge which intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "on",
        "trans": [
            "EdgeIntersection Represents a point【on】an edge which intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "an",
        "trans": [
            "EdgeIntersection Represents a point on【an】edge which intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "EdgeIntersection Represents a point on an【edge】which intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "which",
        "trans": [
            "EdgeIntersection Represents a point on an edge【which】intersects with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "intersects",
        "trans": [
            "EdgeIntersection Represents a point on an edge which【intersects】with another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "with",
        "trans": [
            "EdgeIntersection Represents a point on an edge which intersects【with】another edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "another",
        "trans": [
            "EdgeIntersection Represents a point on an edge which intersects with【another】edge.",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "edge.",
        "trans": [
            "EdgeIntersection Represents a point on an edge which intersects with another【edge.】",
            "　　　表示在一个一个点"
        ]
    },
    {
        "name": "EdgeIntersectionList",
        "trans": [
            "【EdgeIntersectionList】A list of edge intersections along an Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "EdgeIntersectionList【A】list of edge intersections along an Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "EdgeIntersectionList A【list】of edge intersections along an Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeIntersectionList A list【of】edge intersections along an Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "EdgeIntersectionList A list of【edge】intersections along an Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "EdgeIntersectionList A list of edge【intersections】along an Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "along",
        "trans": [
            "EdgeIntersectionList A list of edge intersections【along】an Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "EdgeIntersectionList A list of edge intersections along【an】Edge.",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "Edge.",
        "trans": [
            "EdgeIntersectionList A list of edge intersections along an【Edge.】",
            "　　　边路口沿着边的列表。"
        ]
    },
    {
        "name": "EdgeList",
        "trans": [
            "【EdgeList】A EdgeList is a list of Edges.",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "EdgeList【A】EdgeList is a list of Edges.",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "EdgeList",
        "trans": [
            "EdgeList A【EdgeList】is a list of Edges.",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "EdgeList A EdgeList【is】a list of Edges.",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeList A EdgeList is【a】list of Edges.",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "list",
        "trans": [
            "EdgeList A EdgeList is a【list】of Edges.",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeList A EdgeList is a list【of】Edges.",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "Edges.",
        "trans": [
            "EdgeList A EdgeList is a list of【Edges.】",
            "　　　EdgeList是边缘的列表。"
        ]
    },
    {
        "name": "EdgeNodingValidator",
        "trans": [
            "【EdgeNodingValidator】Validates that a collection of Edges is correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "Validates",
        "trans": [
            "EdgeNodingValidator【Validates】that a collection of Edges is correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "EdgeNodingValidator Validates【that】a collection of Edges is correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeNodingValidator Validates that【a】collection of Edges is correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "EdgeNodingValidator Validates that a【collection】of Edges is correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeNodingValidator Validates that a collection【of】Edges is correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "Edges",
        "trans": [
            "EdgeNodingValidator Validates that a collection of【Edges】is correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "EdgeNodingValidator Validates that a collection of Edges【is】correctly noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "correctly",
        "trans": [
            "EdgeNodingValidator Validates that a collection of Edges is【correctly】noded.",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "noded.",
        "trans": [
            "EdgeNodingValidator Validates that a collection of Edges is correctly【noded.】",
            "　　　验证正确边缘是分散开的集合。"
        ]
    },
    {
        "name": "EdgeRing",
        "trans": [
            "【EdgeRing】",
            "　　　刨边机"
        ]
    },
    {
        "name": "GeometryGraph",
        "trans": [
            "【GeometryGraph】A GeometryGraph is a graph that models a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GeometryGraph【A】GeometryGraph is a graph that models a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "GeometryGraph",
        "trans": [
            "GeometryGraph A【GeometryGraph】is a graph that models a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "is",
        "trans": [
            "GeometryGraph A GeometryGraph【is】a graph that models a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryGraph A GeometryGraph is【a】graph that models a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "GeometryGraph A GeometryGraph is a【graph】that models a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "that",
        "trans": [
            "GeometryGraph A GeometryGraph is a graph【that】models a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "models",
        "trans": [
            "GeometryGraph A GeometryGraph is a graph that【models】a given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometryGraph A GeometryGraph is a graph that models【a】given Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "given",
        "trans": [
            "GeometryGraph A GeometryGraph is a graph that models a【given】Geometry",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "GeometryGraph A GeometryGraph is a graph that models a given【Geometry】",
            "　　　GeometryGraph是一个图,一个给定的几何模型"
        ]
    },
    {
        "name": "GraphComponent",
        "trans": [
            "【GraphComponent】A GraphComponent is the parent class for the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "A",
        "trans": [
            "GraphComponent【A】GraphComponent is the parent class for the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "GraphComponent",
        "trans": [
            "GraphComponent A【GraphComponent】is the parent class for the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "is",
        "trans": [
            "GraphComponent A GraphComponent【is】the parent class for the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GraphComponent A GraphComponent is【the】parent class for the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "parent",
        "trans": [
            "GraphComponent A GraphComponent is the【parent】class for the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "class",
        "trans": [
            "GraphComponent A GraphComponent is the parent【class】for the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "for",
        "trans": [
            "GraphComponent A GraphComponent is the parent class【for】the objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GraphComponent A GraphComponent is the parent class for【the】objects' that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "objects'",
        "trans": [
            "GraphComponent A GraphComponent is the parent class for the【objects'】that form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "that",
        "trans": [
            "GraphComponent A GraphComponent is the parent class for the objects'【that】form a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "form",
        "trans": [
            "GraphComponent A GraphComponent is the parent class for the objects' that【form】a graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GraphComponent A GraphComponent is the parent class for the objects' that form【a】graph.",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "graph.",
        "trans": [
            "GraphComponent A GraphComponent is the parent class for the objects' that form a【graph.】",
            "　　　GraphComponent是父类的对象的"
        ]
    },
    {
        "name": "Label",
        "trans": [
            "【Label】A Label indicates the topological relationship of a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "A",
        "trans": [
            "Label【A】Label indicates the topological relationship of a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "Label",
        "trans": [
            "Label A【Label】indicates the topological relationship of a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "indicates",
        "trans": [
            "Label A Label【indicates】the topological relationship of a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Label A Label indicates【the】topological relationship of a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "Label A Label indicates the【topological】relationship of a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "relationship",
        "trans": [
            "Label A Label indicates the topological【relationship】of a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Label A Label indicates the topological relationship【of】a component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Label A Label indicates the topological relationship of【a】component of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "component",
        "trans": [
            "Label A Label indicates the topological relationship of a【component】of a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Label A Label indicates the topological relationship of a component【of】a topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Label A Label indicates the topological relationship of a component of【a】topology graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "topology",
        "trans": [
            "Label A Label indicates the topological relationship of a component of a【topology】graph to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "Label A Label indicates the topological relationship of a component of a topology【graph】to a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Label A Label indicates the topological relationship of a component of a topology graph【to】a given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Label A Label indicates the topological relationship of a component of a topology graph to【a】given Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "given",
        "trans": [
            "Label A Label indicates the topological relationship of a component of a topology graph to a【given】Geometry.",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "Label A Label indicates the topological relationship of a component of a topology graph to a given【Geometry.】",
            "　　　一个标签显示组件的拓扑关系"
        ]
    },
    {
        "name": "Node",
        "trans": [
            "【Node】",
            "　　　节点"
        ]
    },
    {
        "name": "NodeFactory",
        "trans": [
            "【NodeFactory】",
            "　　　NodeFactory"
        ]
    },
    {
        "name": "NodeMap",
        "trans": [
            "【NodeMap】A map of nodes, indexed by the coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "A",
        "trans": [
            "NodeMap【A】map of nodes, indexed by the coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "map",
        "trans": [
            "NodeMap A【map】of nodes, indexed by the coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NodeMap A map【of】nodes, indexed by the coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "nodes,",
        "trans": [
            "NodeMap A map of【nodes,】indexed by the coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "indexed",
        "trans": [
            "NodeMap A map of nodes,【indexed】by the coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "by",
        "trans": [
            "NodeMap A map of nodes, indexed【by】the coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NodeMap A map of nodes, indexed by【the】coordinate of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "NodeMap A map of nodes, indexed by the【coordinate】of the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "of",
        "trans": [
            "NodeMap A map of nodes, indexed by the coordinate【of】the node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "the",
        "trans": [
            "NodeMap A map of nodes, indexed by the coordinate of【the】node",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "node",
        "trans": [
            "NodeMap A map of nodes, indexed by the coordinate of the【node】",
            "　　　的地图节点,索引节点的坐标"
        ]
    },
    {
        "name": "PlanarGraph",
        "trans": [
            "【PlanarGraph】The computation of the IntersectionMatrix relies on the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "The",
        "trans": [
            "PlanarGraph【The】computation of the IntersectionMatrix relies on the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "computation",
        "trans": [
            "PlanarGraph The【computation】of the IntersectionMatrix relies on the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PlanarGraph The computation【of】the IntersectionMatrix relies on the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PlanarGraph The computation of【the】IntersectionMatrix relies on the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "IntersectionMatrix",
        "trans": [
            "PlanarGraph The computation of the【IntersectionMatrix】relies on the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "relies",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix【relies】on the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "on",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies【on】the use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on【the】use of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "use",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the【use】of a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the use【of】a structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the use of【a】structure called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "structure",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the use of a【structure】called a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "called",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the use of a structure【called】a \"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the use of a structure called【a】\"topology graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "\"topology",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the use of a structure called a【\"topology】graph\".",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "graph\".",
        "trans": [
            "PlanarGraph The computation of the IntersectionMatrix relies on the use of a structure called a \"topology【graph\".】",
            "　　　IntersectionMatrix的计算依赖于一个结构的使用"
        ]
    },
    {
        "name": "TopologyLocation",
        "trans": [
            "【TopologyLocation】A TopologyLocation is the labelling of a GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "A",
        "trans": [
            "TopologyLocation【A】TopologyLocation is the labelling of a GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "TopologyLocation",
        "trans": [
            "TopologyLocation A【TopologyLocation】is the labelling of a GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "is",
        "trans": [
            "TopologyLocation A TopologyLocation【is】the labelling of a GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TopologyLocation A TopologyLocation is【the】labelling of a GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "labelling",
        "trans": [
            "TopologyLocation A TopologyLocation is the【labelling】of a GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "of",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling【of】a GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of【a】GraphComponent's topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "GraphComponent's",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of a【GraphComponent's】topological relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of a GraphComponent's【topological】relationship to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "relationship",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of a GraphComponent's topological【relationship】to a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "to",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of a GraphComponent's topological relationship【to】a single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of a GraphComponent's topological relationship to【a】single Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "single",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of a GraphComponent's topological relationship to a【single】Geometry.",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "TopologyLocation A TopologyLocation is the labelling of a GraphComponent's topological relationship to a single【Geometry.】",
            "　　　TopologyLocation的标签"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】filter(Geometry geom) Performs an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "filter(Geometry",
        "trans": [
            "void【filter(Geometry】geom) Performs an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "void filter(Geometry【geom)】Performs an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "Performs",
        "trans": [
            "void filter(Geometry geom)【Performs】an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void filter(Geometry geom) Performs【an】operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "void filter(Geometry geom) Performs an【operation】with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "with",
        "trans": [
            "void filter(Geometry geom) Performs an operation【with】or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "or",
        "trans": [
            "void filter(Geometry geom) Performs an operation with【or】on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "on",
        "trans": [
            "void filter(Geometry geom) Performs an operation with or【on】geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "geom.",
        "trans": [
            "void filter(Geometry geom) Performs an operation with or on【geom.】",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】filter(Geometry geom) Performs an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "filter(Geometry",
        "trans": [
            "void【filter(Geometry】geom) Performs an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "geom)",
        "trans": [
            "void filter(Geometry【geom)】Performs an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "Performs",
        "trans": [
            "void filter(Geometry geom)【Performs】an operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void filter(Geometry geom) Performs【an】operation with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "void filter(Geometry geom) Performs an【operation】with or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "with",
        "trans": [
            "void filter(Geometry geom) Performs an operation【with】or on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "or",
        "trans": [
            "void filter(Geometry geom) Performs an operation with【or】on geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "on",
        "trans": [
            "void filter(Geometry geom) Performs an operation with or【on】geom.",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "geom.",
        "trans": [
            "void filter(Geometry geom) Performs an operation with or on【geom.】",
            "　　　过滤器(几何几何学)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int DELETE",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】DELETE",
            "　　　静态int"
        ]
    },
    {
        "name": "DELETE",
        "trans": [
            "static int【DELETE】",
            "　　　静态int"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int INSERT",
            "　　　静态int"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】INSERT",
            "　　　静态int"
        ]
    },
    {
        "name": "INSERT",
        "trans": [
            "static int【INSERT】",
            "　　　静态int"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】overlap(SweepLineInterval s0, SweepLineInterval s1)",
            "　　　重叠(SweepLineInterval s0,"
        ]
    },
    {
        "name": "overlap(SweepLineInterval",
        "trans": [
            "void【overlap(SweepLineInterval】s0, SweepLineInterval s1)",
            "　　　重叠(SweepLineInterval s0,"
        ]
    },
    {
        "name": "s0,",
        "trans": [
            "void overlap(SweepLineInterval【s0,】SweepLineInterval s1)",
            "　　　重叠(SweepLineInterval s0,"
        ]
    },
    {
        "name": "SweepLineInterval",
        "trans": [
            "void overlap(SweepLineInterval s0,【SweepLineInterval】s1)",
            "　　　重叠(SweepLineInterval s0,"
        ]
    },
    {
        "name": "s1)",
        "trans": [
            "void overlap(SweepLineInterval s0, SweepLineInterval【s1)】",
            "　　　重叠(SweepLineInterval s0,"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】create(Coordinate[] coordinates) Returns a CoordinateSequence based on the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "create(Coordinate[]",
        "trans": [
            "CoordinateSequence【create(Coordinate[]】coordinates) Returns a CoordinateSequence based on the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "coordinates)",
        "trans": [
            "CoordinateSequence create(Coordinate[]【coordinates)】Returns a CoordinateSequence based on the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates)【Returns】a CoordinateSequence based on the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns【a】CoordinateSequence based on the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a【CoordinateSequence】based on the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "based",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateSequence【based】on the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "on",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateSequence based【on】the given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateSequence based on【the】given array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateSequence based on the【given】array.",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "array.",
        "trans": [
            "CoordinateSequence create(Coordinate[] coordinates) Returns a CoordinateSequence based on the given【array.】",
            "　　　创建(坐标[]坐标)"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "create(CoordinateSequence",
        "trans": [
            "CoordinateSequence【create(CoordinateSequence】coordSeq) Creates a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "coordSeq)",
        "trans": [
            "CoordinateSequence create(CoordinateSequence【coordSeq)】Creates a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq)【Creates】a CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates【a】CoordinateSequence which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a【CoordinateSequence】which is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "which",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence【which】is a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "is",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which【is】a copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is【a】copy of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "copy",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a【copy】of the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy【of】the given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of【the】given CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of the【given】CoordinateSequence.",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "CoordinateSequence.",
        "trans": [
            "CoordinateSequence create(CoordinateSequence coordSeq) Creates a CoordinateSequence which is a copy of the given【CoordinateSequence.】",
            "　　　创建(CoordinateSequence coordSeq)"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "【CoordinateSequence】create(int size, int dimension) Creates a CoordinateSequence of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "create(int",
        "trans": [
            "CoordinateSequence【create(int】size, int dimension) Creates a CoordinateSequence of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "size,",
        "trans": [
            "CoordinateSequence create(int【size,】int dimension) Creates a CoordinateSequence of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "CoordinateSequence create(int size,【int】dimension) Creates a CoordinateSequence of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension)",
        "trans": [
            "CoordinateSequence create(int size, int【dimension)】Creates a CoordinateSequence of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "CoordinateSequence create(int size, int dimension)【Creates】a CoordinateSequence of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates【a】CoordinateSequence of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates a【CoordinateSequence】of the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates a CoordinateSequence【of】the specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates a CoordinateSequence of【the】specified size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates a CoordinateSequence of the【specified】size and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "size",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates a CoordinateSequence of the specified【size】and dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates a CoordinateSequence of the specified size【and】dimension.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension.",
        "trans": [
            "CoordinateSequence create(int size, int dimension) Creates a CoordinateSequence of the specified size and【dimension.】",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "default",
        "trans": [
            "【default】CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "default【CoordinateSequence】create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "create(int",
        "trans": [
            "default CoordinateSequence【create(int】size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "size,",
        "trans": [
            "default CoordinateSequence create(int【size,】int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "default CoordinateSequence create(int size,【int】dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension,",
        "trans": [
            "default CoordinateSequence create(int size, int【dimension,】int measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "default CoordinateSequence create(int size, int dimension,【int】measures) Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "measures)",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int【measures)】Creates a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures)【Creates】a CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates【a】CoordinateSequence of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a【CoordinateSequence】of the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "of",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence【of】the specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of【the】specified size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the【specified】size and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "size",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified【size】and dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size【and】dimension with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "dimension",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and【dimension】with measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "with",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension【with】measure support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "measure",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with【measure】support.",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "support.",
        "trans": [
            "default CoordinateSequence create(int size, int dimension, int measures) Creates a CoordinateSequence of the specified size and dimension with measure【support.】",
            "　　　创建(int大小,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】filter(CoordinateSequence seq, int i) Performs an operation on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "filter(CoordinateSequence",
        "trans": [
            "void【filter(CoordinateSequence】seq, int i) Performs an operation on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "seq,",
        "trans": [
            "void filter(CoordinateSequence【seq,】int i) Performs an operation on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "void filter(CoordinateSequence seq,【int】i) Performs an operation on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "i)",
        "trans": [
            "void filter(CoordinateSequence seq, int【i)】Performs an operation on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "Performs",
        "trans": [
            "void filter(CoordinateSequence seq, int i)【Performs】an operation on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs【an】operation on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs an【operation】on a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "on",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs an operation【on】a coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs an operation on【a】coordinate in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "coordinate",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs an operation on a【coordinate】in a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs an operation on a coordinate【in】a CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs an operation on a coordinate in【a】CoordinateSequence.",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "CoordinateSequence.",
        "trans": [
            "void filter(CoordinateSequence seq, int i) Performs an operation on a coordinate in a【CoordinateSequence.】",
            "　　　过滤器(CoordinateSequence seq,"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】isDone() Reports whether the application of this filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "isDone()",
        "trans": [
            "boolean【isDone()】Reports whether the application of this filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "Reports",
        "trans": [
            "boolean isDone()【Reports】whether the application of this filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean isDone() Reports【whether】the application of this filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean isDone() Reports whether【the】application of this filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "application",
        "trans": [
            "boolean isDone() Reports whether the【application】of this filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "boolean isDone() Reports whether the application【of】this filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "boolean isDone() Reports whether the application of【this】filter can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "filter",
        "trans": [
            "boolean isDone() Reports whether the application of this【filter】can be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "can",
        "trans": [
            "boolean isDone() Reports whether the application of this filter【can】be terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "be",
        "trans": [
            "boolean isDone() Reports whether the application of this filter can【be】terminated.",
            "　　　结束()"
        ]
    },
    {
        "name": "terminated.",
        "trans": [
            "boolean isDone() Reports whether the application of this filter can be【terminated.】",
            "　　　结束()"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】isGeometryChanged() Reports whether the execution of this filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "isGeometryChanged()",
        "trans": [
            "boolean【isGeometryChanged()】Reports whether the execution of this filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "Reports",
        "trans": [
            "boolean isGeometryChanged()【Reports】whether the execution of this filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "boolean isGeometryChanged() Reports【whether】the execution of this filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean isGeometryChanged() Reports whether【the】execution of this filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "execution",
        "trans": [
            "boolean isGeometryChanged() Reports whether the【execution】of this filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution【of】this filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of【this】filter has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "filter",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this【filter】has modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "has",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this filter【has】modified the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "modified",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this filter has【modified】the coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this filter has modified【the】coordinates of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this filter has modified the【coordinates】of the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this filter has modified the coordinates【of】the geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this filter has modified the coordinates of【the】geometry.",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "boolean isGeometryChanged() Reports whether the execution of this filter has modified the coordinates of the【geometry.】",
            "　　　isGeometryChanged ()"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class IntervalRTreeNode.NodeComparator",
            "　　　IntervalRTreeNode.NodeComparator"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】IntervalRTreeNode.NodeComparator",
            "　　　IntervalRTreeNode.NodeComparator"
        ]
    },
    {
        "name": "IntervalRTreeNode.NodeComparator",
        "trans": [
            "static class【IntervalRTreeNode.NodeComparator】",
            "　　　IntervalRTreeNode.NodeComparator"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】PointShapeFactory DEFAULT_POINT_FACTORY The point shape factory used by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "PointShapeFactory",
        "trans": [
            "static【PointShapeFactory】DEFAULT_POINT_FACTORY The point shape factory used by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "DEFAULT_POINT_FACTORY",
        "trans": [
            "static PointShapeFactory【DEFAULT_POINT_FACTORY】The point shape factory used by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static PointShapeFactory DEFAULT_POINT_FACTORY【The】point shape factory used by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static PointShapeFactory DEFAULT_POINT_FACTORY The【point】shape factory used by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "shape",
        "trans": [
            "static PointShapeFactory DEFAULT_POINT_FACTORY The point【shape】factory used by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "factory",
        "trans": [
            "static PointShapeFactory DEFAULT_POINT_FACTORY The point shape【factory】used by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "used",
        "trans": [
            "static PointShapeFactory DEFAULT_POINT_FACTORY The point shape factory【used】by default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static PointShapeFactory DEFAULT_POINT_FACTORY The point shape factory used【by】default.",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "default.",
        "trans": [
            "static PointShapeFactory DEFAULT_POINT_FACTORY The point shape factory used by【default.】",
            "　　　DEFAULT_POINT_FACTORY"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】PointTransformation DEFAULT_POINT_TRANSFORMATION The point transformation used by default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "PointTransformation",
        "trans": [
            "static【PointTransformation】DEFAULT_POINT_TRANSFORMATION The point transformation used by default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "DEFAULT_POINT_TRANSFORMATION",
        "trans": [
            "static PointTransformation【DEFAULT_POINT_TRANSFORMATION】The point transformation used by default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static PointTransformation DEFAULT_POINT_TRANSFORMATION【The】point transformation used by default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "point",
        "trans": [
            "static PointTransformation DEFAULT_POINT_TRANSFORMATION The【point】transformation used by default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "transformation",
        "trans": [
            "static PointTransformation DEFAULT_POINT_TRANSFORMATION The point【transformation】used by default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "used",
        "trans": [
            "static PointTransformation DEFAULT_POINT_TRANSFORMATION The point transformation【used】by default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "by",
        "trans": [
            "static PointTransformation DEFAULT_POINT_TRANSFORMATION The point transformation used【by】default.",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "default.",
        "trans": [
            "static PointTransformation DEFAULT_POINT_TRANSFORMATION The point transformation used by【default.】",
            "　　　DEFAULT_POINT_TRANSFORMATION"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "【Coordinate】coord",
            "　　　协调"
        ]
    },
    {
        "name": "coord",
        "trans": [
            "Coordinate【coord】",
            "　　　协调"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】dist",
            "　　　双"
        ]
    },
    {
        "name": "dist",
        "trans": [
            "double【dist】",
            "　　　双"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】segmentIndex",
            "　　　segmentIndex"
        ]
    },
    {
        "name": "segmentIndex",
        "trans": [
            "int【segmentIndex】",
            "　　　segmentIndex"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】double DEFAULT_SIZE The default size of the shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static【double】DEFAULT_SIZE The default size of the shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "DEFAULT_SIZE",
        "trans": [
            "static double【DEFAULT_SIZE】The default size of the shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static double DEFAULT_SIZE【The】default size of the shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "default",
        "trans": [
            "static double DEFAULT_SIZE The【default】size of the shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "size",
        "trans": [
            "static double DEFAULT_SIZE The default【size】of the shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static double DEFAULT_SIZE The default size【of】the shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static double DEFAULT_SIZE The default size of【the】shape",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "shape",
        "trans": [
            "static double DEFAULT_SIZE The default size of the【shape】",
            "　　　DEFAULT_SIZE"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】max",
            "　　　双"
        ]
    },
    {
        "name": "max",
        "trans": [
            "double【max】",
            "　　　双"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】min",
            "　　　双"
        ]
    },
    {
        "name": "min",
        "trans": [
            "double【min】",
            "　　　双"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String FONT_MONOSPACED The font name of the Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】FONT_MONOSPACED The font name of the Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "FONT_MONOSPACED",
        "trans": [
            "static String【FONT_MONOSPACED】The font name of the Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String FONT_MONOSPACED【The】font name of the Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_MONOSPACED The【font】name of the Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "name",
        "trans": [
            "static String FONT_MONOSPACED The font【name】of the Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static String FONT_MONOSPACED The font name【of】the Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static String FONT_MONOSPACED The font name of【the】Java logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "Java",
        "trans": [
            "static String FONT_MONOSPACED The font name of the【Java】logical font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "logical",
        "trans": [
            "static String FONT_MONOSPACED The font name of the Java【logical】font Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_MONOSPACED The font name of the Java logical【font】Monospaced.",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "Monospaced.",
        "trans": [
            "static String FONT_MONOSPACED The font name of the Java logical font【Monospaced.】",
            "　　　FONT_MONOSPACED"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String FONT_SANSERIF The font name of the Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】FONT_SANSERIF The font name of the Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "FONT_SANSERIF",
        "trans": [
            "static String【FONT_SANSERIF】The font name of the Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String FONT_SANSERIF【The】font name of the Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_SANSERIF The【font】name of the Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "name",
        "trans": [
            "static String FONT_SANSERIF The font【name】of the Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static String FONT_SANSERIF The font name【of】the Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static String FONT_SANSERIF The font name of【the】Java logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "Java",
        "trans": [
            "static String FONT_SANSERIF The font name of the【Java】logical font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "logical",
        "trans": [
            "static String FONT_SANSERIF The font name of the Java【logical】font SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_SANSERIF The font name of the Java logical【font】SansSerif.",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "SansSerif.",
        "trans": [
            "static String FONT_SANSERIF The font name of the Java logical font【SansSerif.】",
            "　　　FONT_SANSERIF"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String FONT_SANSSERIF The font name of the Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】FONT_SANSSERIF The font name of the Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "FONT_SANSSERIF",
        "trans": [
            "static String【FONT_SANSSERIF】The font name of the Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String FONT_SANSSERIF【The】font name of the Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_SANSSERIF The【font】name of the Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "name",
        "trans": [
            "static String FONT_SANSSERIF The font【name】of the Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static String FONT_SANSSERIF The font name【of】the Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static String FONT_SANSSERIF The font name of【the】Java logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "Java",
        "trans": [
            "static String FONT_SANSSERIF The font name of the【Java】logical font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "logical",
        "trans": [
            "static String FONT_SANSSERIF The font name of the Java【logical】font SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_SANSSERIF The font name of the Java logical【font】SansSerif.",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "SansSerif.",
        "trans": [
            "static String FONT_SANSSERIF The font name of the Java logical font【SansSerif.】",
            "　　　FONT_SANSSERIF"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】String FONT_SERIF The font name of the Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static【String】FONT_SERIF The font name of the Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "FONT_SERIF",
        "trans": [
            "static String【FONT_SERIF】The font name of the Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "The",
        "trans": [
            "static String FONT_SERIF【The】font name of the Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_SERIF The【font】name of the Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "name",
        "trans": [
            "static String FONT_SERIF The font【name】of the Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static String FONT_SERIF The font name【of】the Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static String FONT_SERIF The font name of【the】Java logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "Java",
        "trans": [
            "static String FONT_SERIF The font name of the【Java】logical font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "logical",
        "trans": [
            "static String FONT_SERIF The font name of the Java【logical】font Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static String FONT_SERIF The font name of the Java logical【font】Serif.",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "Serif.",
        "trans": [
            "static String FONT_SERIF The font name of the Java logical font【Serif.】",
            "　　　FONT_SERIF"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static【Geometry】read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "read(String",
        "trans": [
            "static Geometry【read(String】text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "text,",
        "trans": [
            "static Geometry read(String【text,】Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Font",
        "trans": [
            "static Geometry read(String text,【Font】font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "font,",
        "trans": [
            "static Geometry read(String text, Font【font,】double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static Geometry read(String text, Font font,【double】flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "flatness,",
        "trans": [
            "static Geometry read(String text, Font font, double【flatness,】GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "GeometryFactory",
        "trans": [
            "static Geometry read(String text, Font font, double flatness,【GeometryFactory】geomFact) Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "geomFact)",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory【geomFact)】Converts text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Converts",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact)【Converts】text rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "text",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts【text】rendered in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "rendered",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text【rendered】in the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered【in】the given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in【the】given Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the【given】Font to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Font",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given【Font】to a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font【to】a Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to【a】Geometry",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static Geometry read(String text, Font font, double flatness, GeometryFactory geomFact) Converts text rendered in the given Font to a【Geometry】",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static【Geometry】read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "read(String",
        "trans": [
            "static Geometry【read(String】text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "text,",
        "trans": [
            "static Geometry read(String【text,】Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Font",
        "trans": [
            "static Geometry read(String text,【Font】font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "font,",
        "trans": [
            "static Geometry read(String text, Font【font,】GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "GeometryFactory",
        "trans": [
            "static Geometry read(String text, Font font,【GeometryFactory】geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "geomFact)",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory【geomFact)】Converts text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Converts",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact)【Converts】text rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "text",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts【text】rendered in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "rendered",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text【rendered】in the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered【in】the given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in【the】given Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the【given】Font to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Font",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given【Font】to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font【to】a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to【a】Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a【Geometry】using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry【using】a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using【a】standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "standard",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a【standard】flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "flatness",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard【flatness】factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "factor.",
        "trans": [
            "static Geometry read(String text, Font font, GeometryFactory geomFact) Converts text rendered in the given Font to a Geometry using a standard flatness【factor.】",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static【Geometry】read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "read(String",
        "trans": [
            "static Geometry【read(String】text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "text,",
        "trans": [
            "static Geometry read(String【text,】String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "String",
        "trans": [
            "static Geometry read(String text,【String】fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "fontName,",
        "trans": [
            "static Geometry read(String text, String【fontName,】int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static Geometry read(String text, String fontName,【int】pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "pointSize,",
        "trans": [
            "static Geometry read(String text, String fontName, int【pointSize,】GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "GeometryFactory",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize,【GeometryFactory】geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "geomFact)",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory【geomFact)】Converts text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Converts",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact)【Converts】text rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "text",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts【text】rendered in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "rendered",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text【rendered】in the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered【in】the given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in【the】given font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the【given】font and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "font",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given【font】and pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font【and】pointsize to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "pointsize",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and【pointsize】to a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize【to】a Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to【a】Geometry using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a【Geometry】using a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "using",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry【using】a standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using【a】standard flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "standard",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a【standard】flatness factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "flatness",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard【flatness】factor.",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "factor.",
        "trans": [
            "static Geometry read(String text, String fontName, int pointSize, GeometryFactory geomFact) Converts text rendered in the given font and pointsize to a Geometry using a standard flatness【factor.】",
            "　　　读(字符串文本,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】transform(Coordinate src, Point2D dest) Transforms a Coordinate into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "transform(Coordinate",
        "trans": [
            "void【transform(Coordinate】src, Point2D dest) Transforms a Coordinate into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "src,",
        "trans": [
            "void transform(Coordinate【src,】Point2D dest) Transforms a Coordinate into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "Point2D",
        "trans": [
            "void transform(Coordinate src,【Point2D】dest) Transforms a Coordinate into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "dest)",
        "trans": [
            "void transform(Coordinate src, Point2D【dest)】Transforms a Coordinate into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "Transforms",
        "trans": [
            "void transform(Coordinate src, Point2D dest)【Transforms】a Coordinate into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void transform(Coordinate src, Point2D dest) Transforms【a】Coordinate into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "Coordinate",
        "trans": [
            "void transform(Coordinate src, Point2D dest) Transforms a【Coordinate】into a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "into",
        "trans": [
            "void transform(Coordinate src, Point2D dest) Transforms a Coordinate【into】a Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void transform(Coordinate src, Point2D dest) Transforms a Coordinate into【a】Java2D Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "Java2D",
        "trans": [
            "void transform(Coordinate src, Point2D dest) Transforms a Coordinate into a【Java2D】Point.",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "Point.",
        "trans": [
            "void transform(Coordinate src, Point2D dest) Transforms a Coordinate into a Java2D【Point.】",
            "　　　变换(协调src,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.BasePointShapeFactory",
            "　　　PointShapeFactory.BasePointShapeFactory"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.BasePointShapeFactory",
            "　　　PointShapeFactory.BasePointShapeFactory"
        ]
    },
    {
        "name": "PointShapeFactory.BasePointShapeFactory",
        "trans": [
            "static class【PointShapeFactory.BasePointShapeFactory】",
            "　　　PointShapeFactory.BasePointShapeFactory"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.Circle",
            "　　　PointShapeFactory.Circle"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.Circle",
            "　　　PointShapeFactory.Circle"
        ]
    },
    {
        "name": "PointShapeFactory.Circle",
        "trans": [
            "static class【PointShapeFactory.Circle】",
            "　　　PointShapeFactory.Circle"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.Cross",
            "　　　PointShapeFactory.Cross"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.Cross",
            "　　　PointShapeFactory.Cross"
        ]
    },
    {
        "name": "PointShapeFactory.Cross",
        "trans": [
            "static class【PointShapeFactory.Cross】",
            "　　　PointShapeFactory.Cross"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.Point",
            "　　　PointShapeFactory.Point"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.Point",
            "　　　PointShapeFactory.Point"
        ]
    },
    {
        "name": "PointShapeFactory.Point",
        "trans": [
            "static class【PointShapeFactory.Point】",
            "　　　PointShapeFactory.Point"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.Square",
            "　　　PointShapeFactory.Square"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.Square",
            "　　　PointShapeFactory.Square"
        ]
    },
    {
        "name": "PointShapeFactory.Square",
        "trans": [
            "static class【PointShapeFactory.Square】",
            "　　　PointShapeFactory.Square"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.Star",
            "　　　PointShapeFactory.Star"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.Star",
            "　　　PointShapeFactory.Star"
        ]
    },
    {
        "name": "PointShapeFactory.Star",
        "trans": [
            "static class【PointShapeFactory.Star】",
            "　　　PointShapeFactory.Star"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.Triangle",
            "　　　PointShapeFactory.Triangle"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.Triangle",
            "　　　PointShapeFactory.Triangle"
        ]
    },
    {
        "name": "PointShapeFactory.Triangle",
        "trans": [
            "static class【PointShapeFactory.Triangle】",
            "　　　PointShapeFactory.Triangle"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】class PointShapeFactory.X",
            "　　　PointShapeFactory.X"
        ]
    },
    {
        "name": "class",
        "trans": [
            "static【class】PointShapeFactory.X",
            "　　　PointShapeFactory.X"
        ]
    },
    {
        "name": "PointShapeFactory.X",
        "trans": [
            "static class【PointShapeFactory.X】",
            "　　　PointShapeFactory.X"
        ]
    },
    {
        "name": "int",
        "trans": [
            "【int】numTests",
            "　　　numTests"
        ]
    },
    {
        "name": "numTests",
        "trans": [
            "int【numTests】",
            "　　　numTests"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "insert(Envelope",
        "trans": [
            "void【insert(Envelope】itemEnv, Object item) Adds a spatial item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "itemEnv,",
        "trans": [
            "void insert(Envelope【itemEnv,】Object item) Adds a spatial item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "void insert(Envelope itemEnv,【Object】item) Adds a spatial item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "item)",
        "trans": [
            "void insert(Envelope itemEnv, Object【item)】Adds a spatial item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "Adds",
        "trans": [
            "void insert(Envelope itemEnv, Object item)【Adds】a spatial item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds【a】spatial item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a【spatial】item with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "item",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial【item】with an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "with",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item【with】an extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with【an】extent specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "extent",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an【extent】specified by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent【specified】by the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "by",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified【by】the given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified by【the】given Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "given",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified by the【given】Envelope to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "Envelope",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified by the given【Envelope】to the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "to",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified by the given Envelope【to】the index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified by the given Envelope to【the】index",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "index",
        "trans": [
            "void insert(Envelope itemEnv, Object item) Adds a spatial item with an extent specified by the given Envelope to the【index】",
            "　　　插入(信封itemEnv"
        ]
    },
    {
        "name": "List",
        "trans": [
            "【List】query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "query(Envelope",
        "trans": [
            "List【query(Envelope】searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "searchEnv)",
        "trans": [
            "List query(Envelope【searchEnv)】Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "Queries",
        "trans": [
            "List query(Envelope searchEnv)【Queries】the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "List query(Envelope searchEnv) Queries【the】index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "index",
        "trans": [
            "List query(Envelope searchEnv) Queries the【index】for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "for",
        "trans": [
            "List query(Envelope searchEnv) Queries the index【for】all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "all",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for【all】items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "items",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all【items】whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "whose",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items【whose】extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "extents",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose【extents】intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents【intersect】the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect【the】given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "given",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the【given】search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "search",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given【search】Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "Envelope",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search【Envelope】Note that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "Note",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope【Note】that some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "that",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note【that】some kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "some",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that【some】kinds of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "kinds",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some【kinds】of indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "of",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds【of】indexes may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "indexes",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of【indexes】may also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "may",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes【may】also return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "also",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may【also】return objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "return",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also【return】objects which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "objects",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return【objects】which do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "which",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects【which】do not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "do",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which【do】not in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "not",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do【not】in fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "in",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not【in】fact intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "fact",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in【fact】intersect the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact【intersect】the query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect【the】query envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "query",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the【query】envelope.",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "envelope.",
        "trans": [
            "List query(Envelope searchEnv) Queries the index for all items whose extents intersect the given search Envelope Note that some kinds of indexes may also return objects which do not in fact intersect the query【envelope.】",
            "　　　查询(信封searchEnv)"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "query(Envelope",
        "trans": [
            "void【query(Envelope】searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "searchEnv,",
        "trans": [
            "void query(Envelope【searchEnv,】ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "ItemVisitor",
        "trans": [
            "void query(Envelope searchEnv,【ItemVisitor】visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "visitor)",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor【visitor)】Queries the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "Queries",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor)【Queries】the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries【the】index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "index",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the【index】for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "for",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index【for】all items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "all",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for【all】items whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "items",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all【items】whose extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "whose",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items【whose】extents intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "extents",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose【extents】intersect the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "intersect",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents【intersect】the given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect【the】given search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the【given】search Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "search",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given【search】Envelope, and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "Envelope,",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search【Envelope,】and applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "and",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope,【and】applies an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "applies",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and【applies】an ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies【an】ItemVisitor to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "ItemVisitor",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies an【ItemVisitor】to them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "to",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor【to】them.",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "them.",
        "trans": [
            "void query(Envelope searchEnv, ItemVisitor visitor) Queries the index for all items whose extents intersect the given search Envelope, and applies an ItemVisitor to【them.】",
            "　　　查询(信封searchEnv,"
        ]
    },
    {
        "name": "boolean",
        "trans": [
            "【boolean】remove(Envelope itemEnv, Object item) Removes a single item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "remove(Envelope",
        "trans": [
            "boolean【remove(Envelope】itemEnv, Object item) Removes a single item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "itemEnv,",
        "trans": [
            "boolean remove(Envelope【itemEnv,】Object item) Removes a single item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "boolean remove(Envelope itemEnv,【Object】item) Removes a single item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "item)",
        "trans": [
            "boolean remove(Envelope itemEnv, Object【item)】Removes a single item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "Removes",
        "trans": [
            "boolean remove(Envelope itemEnv, Object item)【Removes】a single item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "boolean remove(Envelope itemEnv, Object item) Removes【a】single item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "single",
        "trans": [
            "boolean remove(Envelope itemEnv, Object item) Removes a【single】item from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "item",
        "trans": [
            "boolean remove(Envelope itemEnv, Object item) Removes a single【item】from the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "from",
        "trans": [
            "boolean remove(Envelope itemEnv, Object item) Removes a single item【from】the tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "boolean remove(Envelope itemEnv, Object item) Removes a single item from【the】tree.",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "tree.",
        "trans": [
            "boolean remove(Envelope itemEnv, Object item) Removes a single item from the【tree.】",
            "　　　remove(信封itemEnv,"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】visitItem(Object item) Visits an item in the index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "visitItem(Object",
        "trans": [
            "void【visitItem(Object】item) Visits an item in the index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "item)",
        "trans": [
            "void visitItem(Object【item)】Visits an item in the index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "Visits",
        "trans": [
            "void visitItem(Object item)【Visits】an item in the index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void visitItem(Object item) Visits【an】item in the index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "item",
        "trans": [
            "void visitItem(Object item) Visits an【item】in the index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "in",
        "trans": [
            "void visitItem(Object item) Visits an item【in】the index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void visitItem(Object item) Visits an item in【the】index.",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "index.",
        "trans": [
            "void visitItem(Object item) Visits an item in the【index.】",
            "　　　visitItem项(对象)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "MIN_BINARY_EXPONENT",
        "trans": [
            "static int【MIN_BINARY_EXPONENT】This value is chosen to be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "This",
        "trans": [
            "static int MIN_BINARY_EXPONENT【This】value is chosen to be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int MIN_BINARY_EXPONENT This【value】is chosen to be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value【is】chosen to be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "chosen",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is【chosen】to be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "to",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen【to】be a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "be",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to【be】a few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "a",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be【a】few powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "few",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a【few】powers of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "powers",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few【powers】of 2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers【of】2 less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "2",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of【2】less than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "less",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2【less】than the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "than",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less【than】the number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than【the】number of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "number",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the【number】of bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "of",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number【of】bits available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "bits",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of【bits】available in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "available",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits【available】in the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "in",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits available【in】the double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "the",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits available in【the】double representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "double",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits available in the【double】representation (i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits available in the double【representation】(i.e.",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "(i.e.",
        "trans": [
            "static int MIN_BINARY_EXPONENT This value is chosen to be a few powers of 2 less than the number of bits available in the double representation【(i.e.】",
            "　　　MIN_BINARY_EXPONENT"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】visit(KdNode node) Visits a node.",
            "　　　访问(KdNode节点)"
        ]
    },
    {
        "name": "visit(KdNode",
        "trans": [
            "void【visit(KdNode】node) Visits a node.",
            "　　　访问(KdNode节点)"
        ]
    },
    {
        "name": "node)",
        "trans": [
            "void visit(KdNode【node)】Visits a node.",
            "　　　访问(KdNode节点)"
        ]
    },
    {
        "name": "Visits",
        "trans": [
            "void visit(KdNode node)【Visits】a node.",
            "　　　访问(KdNode节点)"
        ]
    },
    {
        "name": "a",
        "trans": [
            "void visit(KdNode node) Visits【a】node.",
            "　　　访问(KdNode节点)"
        ]
    },
    {
        "name": "node.",
        "trans": [
            "void visit(KdNode node) Visits a【node.】",
            "　　　访问(KdNode节点)"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int EXPONENT_BIAS",
            "　　　EXPONENT_BIAS"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】EXPONENT_BIAS",
            "　　　EXPONENT_BIAS"
        ]
    },
    {
        "name": "EXPONENT_BIAS",
        "trans": [
            "static int【EXPONENT_BIAS】",
            "　　　EXPONENT_BIAS"
        ]
    },
    {
        "name": "DouglasPeuckerSimplifier",
        "trans": [
            "【DouglasPeuckerSimplifier】Simplifies a Geometry using the Douglas-Peucker algorithm.",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "Simplifies",
        "trans": [
            "DouglasPeuckerSimplifier【Simplifies】a Geometry using the Douglas-Peucker algorithm.",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DouglasPeuckerSimplifier Simplifies【a】Geometry using the Douglas-Peucker algorithm.",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "DouglasPeuckerSimplifier Simplifies a【Geometry】using the Douglas-Peucker algorithm.",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "using",
        "trans": [
            "DouglasPeuckerSimplifier Simplifies a Geometry【using】the Douglas-Peucker algorithm.",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DouglasPeuckerSimplifier Simplifies a Geometry using【the】Douglas-Peucker algorithm.",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "Douglas-Peucker",
        "trans": [
            "DouglasPeuckerSimplifier Simplifies a Geometry using the【Douglas-Peucker】algorithm.",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "algorithm.",
        "trans": [
            "DouglasPeuckerSimplifier Simplifies a Geometry using the Douglas-Peucker【algorithm.】",
            "　　　简化了使用Douglas-Peucker的几何算法。"
        ]
    },
    {
        "name": "TaggedLineStringSimplifier",
        "trans": [
            "【TaggedLineStringSimplifier】Simplifies a TaggedLineString, preserving topology (in the sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "Simplifies",
        "trans": [
            "TaggedLineStringSimplifier【Simplifies】a TaggedLineString, preserving topology (in the sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TaggedLineStringSimplifier Simplifies【a】TaggedLineString, preserving topology (in the sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "TaggedLineString,",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a【TaggedLineString,】preserving topology (in the sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "preserving",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString,【preserving】topology (in the sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "topology",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving【topology】(in the sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "(in",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology【(in】the sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in【the】sense that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "sense",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the【sense】that no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "that",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense【that】no new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "no",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense that【no】new intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "new",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense that no【new】intersections are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "intersections",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense that no new【intersections】are introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "are",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense that no new intersections【are】introduced).",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "introduced).",
        "trans": [
            "TaggedLineStringSimplifier Simplifies a TaggedLineString, preserving topology (in the sense that no new intersections are【introduced).】",
            "　　　简化TaggedLineString,保存拓扑"
        ]
    },
    {
        "name": "TopologyPreservingSimplifier",
        "trans": [
            "【TopologyPreservingSimplifier】Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "Simplifies",
        "trans": [
            "TopologyPreservingSimplifier【Simplifies】a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TopologyPreservingSimplifier Simplifies【a】geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a【geometry】and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "and",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry【and】ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "ensures",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and【ensures】that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "that",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures【that】the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that【the】result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "result",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the【result】is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "is",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result【is】a valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is【a】valid geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "valid",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a【valid】geometry having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid【geometry】having the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "having",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry【having】the same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having【the】same dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "same",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the【same】dimension and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "dimension",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same【dimension】and number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "and",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension【and】number of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "number",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and【number】of components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "of",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number【of】components as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "components",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of【components】as the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "as",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components【as】the input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as【the】input, and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "input,",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the【input,】and with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "and",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input,【and】with the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "with",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and【with】the components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with【the】components having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "components",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the【components】having the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "having",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components【having】the same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having【the】same topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "same",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the【same】topological relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "topological",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same【topological】relationship.",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "relationship.",
        "trans": [
            "TopologyPreservingSimplifier Simplifies a geometry and ensures that the result is a valid geometry having the same dimension and number of components as the input, and with the components having the same topological【relationship.】",
            "　　　简化了几何和确保"
        ]
    },
    {
        "name": "VWSimplifier",
        "trans": [
            "【VWSimplifier】Simplifies a Geometry using the Visvalingam-Whyatt area-based algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "Simplifies",
        "trans": [
            "VWSimplifier【Simplifies】a Geometry using the Visvalingam-Whyatt area-based algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "VWSimplifier Simplifies【a】Geometry using the Visvalingam-Whyatt area-based algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "VWSimplifier Simplifies a【Geometry】using the Visvalingam-Whyatt area-based algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "using",
        "trans": [
            "VWSimplifier Simplifies a Geometry【using】the Visvalingam-Whyatt area-based algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "VWSimplifier Simplifies a Geometry using【the】Visvalingam-Whyatt area-based algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "Visvalingam-Whyatt",
        "trans": [
            "VWSimplifier Simplifies a Geometry using the【Visvalingam-Whyatt】area-based algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "area-based",
        "trans": [
            "VWSimplifier Simplifies a Geometry using the Visvalingam-Whyatt【area-based】algorithm.",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "algorithm.",
        "trans": [
            "VWSimplifier Simplifies a Geometry using the Visvalingam-Whyatt area-based【algorithm.】",
            "　　　简化几何使用Visvalingam-Whyatt成立算法。"
        ]
    },
    {
        "name": "double",
        "trans": [
            "【double】distance(ItemBoundable item1, ItemBoundable item2) Computes the distance between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "distance(ItemBoundable",
        "trans": [
            "double【distance(ItemBoundable】item1, ItemBoundable item2) Computes the distance between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "item1,",
        "trans": [
            "double distance(ItemBoundable【item1,】ItemBoundable item2) Computes the distance between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "ItemBoundable",
        "trans": [
            "double distance(ItemBoundable item1,【ItemBoundable】item2) Computes the distance between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "item2)",
        "trans": [
            "double distance(ItemBoundable item1, ItemBoundable【item2)】Computes the distance between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "double distance(ItemBoundable item1, ItemBoundable item2)【Computes】the distance between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "double distance(ItemBoundable item1, ItemBoundable item2) Computes【the】distance between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "double distance(ItemBoundable item1, ItemBoundable item2) Computes the【distance】between two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "double distance(ItemBoundable item1, ItemBoundable item2) Computes the distance【between】two items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "double distance(ItemBoundable item1, ItemBoundable item2) Computes the distance between【two】items.",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "items.",
        "trans": [
            "double distance(ItemBoundable item1, ItemBoundable item2) Computes the distance between two【items.】",
            "　　　距离(ItemBoundable item1,"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int M Standard ordinate index value for, where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】M Standard ordinate index value for, where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "M",
        "trans": [
            "static int【M】Standard ordinate index value for, where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int M【Standard】ordinate index value for, where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int M Standard【ordinate】index value for, where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int M Standard ordinate【index】value for, where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int M Standard ordinate index【value】for, where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "for,",
        "trans": [
            "static int M Standard ordinate index value【for,】where M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "where",
        "trans": [
            "static int M Standard ordinate index value for,【where】M is 3.",
            "　　　米"
        ]
    },
    {
        "name": "M",
        "trans": [
            "static int M Standard ordinate index value for, where【M】is 3.",
            "　　　米"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static int M Standard ordinate index value for, where M【is】3.",
            "　　　米"
        ]
    },
    {
        "name": "3.",
        "trans": [
            "static int M Standard ordinate index value for, where M is【3.】",
            "　　　米"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int X Standard ordinate index value for, where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】X Standard ordinate index value for, where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "X",
        "trans": [
            "static int【X】Standard ordinate index value for, where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int X【Standard】ordinate index value for, where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int X Standard【ordinate】index value for, where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int X Standard ordinate【index】value for, where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int X Standard ordinate index【value】for, where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "for,",
        "trans": [
            "static int X Standard ordinate index value【for,】where X is 0",
            "　　　X"
        ]
    },
    {
        "name": "where",
        "trans": [
            "static int X Standard ordinate index value for,【where】X is 0",
            "　　　X"
        ]
    },
    {
        "name": "X",
        "trans": [
            "static int X Standard ordinate index value for, where【X】is 0",
            "　　　X"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static int X Standard ordinate index value for, where X【is】0",
            "　　　X"
        ]
    },
    {
        "name": "0",
        "trans": [
            "static int X Standard ordinate index value for, where X is【0】",
            "　　　X"
        ]
    },
    {
        "name": "Object",
        "trans": [
            "【Object】getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "getBounds()",
        "trans": [
            "Object【getBounds()】Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "Returns",
        "trans": [
            "Object getBounds()【Returns】a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Object getBounds() Returns【a】representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "representation",
        "trans": [
            "Object getBounds() Returns a【representation】of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Object getBounds() Returns a representation【of】space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "space",
        "trans": [
            "Object getBounds() Returns a representation of【space】that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "that",
        "trans": [
            "Object getBounds() Returns a representation of space【that】encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "encloses",
        "trans": [
            "Object getBounds() Returns a representation of space that【encloses】this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses【this】Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "Boundable,",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this【Boundable,】preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "preferably",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable,【preferably】not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "not",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably【not】much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "much",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not【much】bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "bigger",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much【bigger】than this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "than",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger【than】this Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "this",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than【this】Boundable's boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "Boundable's",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this【Boundable's】boundary yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "boundary",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's【boundary】yet fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "yet",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary【yet】fast to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "fast",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet【fast】to test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "to",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast【to】test for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "test",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to【test】for intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "for",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test【for】intersection with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "intersection",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for【intersection】with the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "with",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection【with】the bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with【the】bounds of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "bounds",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the【bounds】of other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "of",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds【of】other Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "other",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of【other】Boundables.",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "Boundables.",
        "trans": [
            "Object getBounds() Returns a representation of space that encloses this Boundable, preferably not much bigger than this Boundable's boundary yet fast to test for intersection with the bounds of other【Boundables.】",
            "　　　getBounds ()"
        ]
    },
    {
        "name": "ConnectedInteriorTester",
        "trans": [
            "【ConnectedInteriorTester】This class tests that the interior of an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "This",
        "trans": [
            "ConnectedInteriorTester【This】class tests that the interior of an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "class",
        "trans": [
            "ConnectedInteriorTester This【class】tests that the interior of an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "tests",
        "trans": [
            "ConnectedInteriorTester This class【tests】that the interior of an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "that",
        "trans": [
            "ConnectedInteriorTester This class tests【that】the interior of an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ConnectedInteriorTester This class tests that【the】interior of an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "interior",
        "trans": [
            "ConnectedInteriorTester This class tests that the【interior】of an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior【of】an area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "an",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of【an】area Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "area",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an【area】Geometry ( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area【Geometry】( Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "(",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area Geometry【(】Polygon or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "Polygon",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area Geometry (【Polygon】or MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "or",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area Geometry ( Polygon【or】MultiPolygon ) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "MultiPolygon",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area Geometry ( Polygon or【MultiPolygon】) is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": ")",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area Geometry ( Polygon or MultiPolygon【)】is connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "is",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area Geometry ( Polygon or MultiPolygon )【is】connected.",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "connected.",
        "trans": [
            "ConnectedInteriorTester This class tests that the interior of an area Geometry ( Polygon or MultiPolygon ) is【connected.】",
            "　　　这类测试,一个地区的内部几何"
        ]
    },
    {
        "name": "ConsistentAreaTester",
        "trans": [
            "【ConsistentAreaTester】Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "Checks",
        "trans": [
            "ConsistentAreaTester【Checks】that a GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "that",
        "trans": [
            "ConsistentAreaTester Checks【that】a GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConsistentAreaTester Checks that【a】GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "GeometryGraph",
        "trans": [
            "ConsistentAreaTester Checks that a【GeometryGraph】representing an area (a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "representing",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph【representing】an area (a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "an",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing【an】area (a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "area",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an【area】(a Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "(a",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area【(a】Polygon or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "Polygon",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a【Polygon】or MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "or",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon【or】MultiPolygon ) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "MultiPolygon",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or【MultiPolygon】) has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": ")",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon【)】has consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "has",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon )【has】consistent semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "consistent",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) has【consistent】semantics for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "semantics",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent【semantics】for area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "for",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent semantics【for】area geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "area",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent semantics for【area】geometries.",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "ConsistentAreaTester Checks that a GeometryGraph representing an area (a Polygon or MultiPolygon ) has consistent semantics for area【geometries.】",
            "　　　检查GeometryGraph代表一个区域"
        ]
    },
    {
        "name": "IndexedNestedRingTester",
        "trans": [
            "【IndexedNestedRingTester】Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "IndexedNestedRingTester【Tests】whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "IndexedNestedRingTester Tests【whether】any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "any",
        "trans": [
            "IndexedNestedRingTester Tests whether【any】of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IndexedNestedRingTester Tests whether any【of】a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IndexedNestedRingTester Tests whether any of【a】set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "set",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a【set】of LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "of",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set【of】LinearRings are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "LinearRings",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of【LinearRings】are nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "are",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings【are】nested inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "nested",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are【nested】inside another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "inside",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested【inside】another ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "another",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside【another】ring in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "ring",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another【ring】in the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "in",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring【in】the set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "the",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in【the】set, using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "set,",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the【set,】using a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "using",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set,【using】a spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "a",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using【a】spatial index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "spatial",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a【spatial】index to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "index",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial【index】to speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "to",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index【to】speed up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "speed",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to【speed】up the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "up",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed【up】the comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "the",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up【the】comparisons.",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "comparisons.",
        "trans": [
            "IndexedNestedRingTester Tests whether any of a set of LinearRings are nested inside another ring in the set, using a spatial index to speed up the【comparisons.】",
            "　　　测试是否有一组LinearRings"
        ]
    },
    {
        "name": "IsValidOp",
        "trans": [
            "【IsValidOp】Implements the algorithms required to compute the isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "IsValidOp【Implements】the algorithms required to compute the isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "the",
        "trans": [
            "IsValidOp Implements【the】algorithms required to compute the isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "algorithms",
        "trans": [
            "IsValidOp Implements the【algorithms】required to compute the isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "required",
        "trans": [
            "IsValidOp Implements the algorithms【required】to compute the isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "to",
        "trans": [
            "IsValidOp Implements the algorithms required【to】compute the isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "compute",
        "trans": [
            "IsValidOp Implements the algorithms required to【compute】the isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "the",
        "trans": [
            "IsValidOp Implements the algorithms required to compute【the】isValid() method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "isValid()",
        "trans": [
            "IsValidOp Implements the algorithms required to compute the【isValid()】method for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "method",
        "trans": [
            "IsValidOp Implements the algorithms required to compute the isValid()【method】for Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "for",
        "trans": [
            "IsValidOp Implements the algorithms required to compute the isValid() method【for】Geometrys.",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "Geometrys.",
        "trans": [
            "IsValidOp Implements the algorithms required to compute the isValid() method for【Geometrys.】",
            "　　　实现了算法所需计算isValid()方法"
        ]
    },
    {
        "name": "RepeatedPointTester",
        "trans": [
            "【RepeatedPointTester】Implements the appropriate checks for repeated points (consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "Implements",
        "trans": [
            "RepeatedPointTester【Implements】the appropriate checks for repeated points (consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RepeatedPointTester Implements【the】appropriate checks for repeated points (consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "appropriate",
        "trans": [
            "RepeatedPointTester Implements the【appropriate】checks for repeated points (consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "checks",
        "trans": [
            "RepeatedPointTester Implements the appropriate【checks】for repeated points (consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "for",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks【for】repeated points (consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "repeated",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for【repeated】points (consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "points",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated【points】(consecutive identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "(consecutive",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points【(consecutive】identical coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "identical",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive【identical】coordinates) as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "coordinates)",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical【coordinates)】as defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "as",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates)【as】defined in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "defined",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates) as【defined】in the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "in",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates) as defined【in】the JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "the",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates) as defined in【the】JTS spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates) as defined in the【JTS】spec.",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "spec.",
        "trans": [
            "RepeatedPointTester Implements the appropriate checks for repeated points (consecutive identical coordinates) as defined in the JTS【spec.】",
            "　　　实现适当的检查重复的点"
        ]
    },
    {
        "name": "TopologyValidationError",
        "trans": [
            "【TopologyValidationError】Contains information about the nature and location of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "TopologyValidationError【Contains】information about the nature and location of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "information",
        "trans": [
            "TopologyValidationError Contains【information】about the nature and location of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "about",
        "trans": [
            "TopologyValidationError Contains information【about】the nature and location of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "the",
        "trans": [
            "TopologyValidationError Contains information about【the】nature and location of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "nature",
        "trans": [
            "TopologyValidationError Contains information about the【nature】and location of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "and",
        "trans": [
            "TopologyValidationError Contains information about the nature【and】location of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "location",
        "trans": [
            "TopologyValidationError Contains information about the nature and【location】of a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "of",
        "trans": [
            "TopologyValidationError Contains information about the nature and location【of】a Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "a",
        "trans": [
            "TopologyValidationError Contains information about the nature and location of【a】Geometry validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "TopologyValidationError Contains information about the nature and location of a【Geometry】validation error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "validation",
        "trans": [
            "TopologyValidationError Contains information about the nature and location of a Geometry【validation】error",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "error",
        "trans": [
            "TopologyValidationError Contains information about the nature and location of a Geometry validation【error】",
            "　　　包含一个几何图形的性质和位置的信息"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int Y Standard ordinate index value for, where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】Y Standard ordinate index value for, where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "Y",
        "trans": [
            "static int【Y】Standard ordinate index value for, where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int Y【Standard】ordinate index value for, where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "ordinate",
        "trans": [
            "static int Y Standard【ordinate】index value for, where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int Y Standard ordinate【index】value for, where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "value",
        "trans": [
            "static int Y Standard ordinate index【value】for, where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "for,",
        "trans": [
            "static int Y Standard ordinate index value【for,】where Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "where",
        "trans": [
            "static int Y Standard ordinate index value for,【where】Y is 1",
            "　　　Y"
        ]
    },
    {
        "name": "Y",
        "trans": [
            "static int Y Standard ordinate index value for, where【Y】is 1",
            "　　　Y"
        ]
    },
    {
        "name": "is",
        "trans": [
            "static int Y Standard ordinate index value for, where Y【is】1",
            "　　　Y"
        ]
    },
    {
        "name": "1",
        "trans": [
            "static int Y Standard ordinate index value for, where Y is【1】",
            "　　　Y"
        ]
    },
    {
        "name": "static",
        "trans": [
            "【static】int Z Standard z-ordinate index",
            "　　　Z"
        ]
    },
    {
        "name": "int",
        "trans": [
            "static【int】Z Standard z-ordinate index",
            "　　　Z"
        ]
    },
    {
        "name": "Z",
        "trans": [
            "static int【Z】Standard z-ordinate index",
            "　　　Z"
        ]
    },
    {
        "name": "Standard",
        "trans": [
            "static int Z【Standard】z-ordinate index",
            "　　　Z"
        ]
    },
    {
        "name": "z-ordinate",
        "trans": [
            "static int Z Standard【z-ordinate】index",
            "　　　Z"
        ]
    },
    {
        "name": "index",
        "trans": [
            "static int Z Standard z-ordinate【index】",
            "　　　Z"
        ]
    },
    {
        "name": "UnionStrategy",
        "trans": [
            "【UnionStrategy】A strategy class that adapts UnaryUnion to different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "A",
        "trans": [
            "UnionStrategy【A】strategy class that adapts UnaryUnion to different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "strategy",
        "trans": [
            "UnionStrategy A【strategy】class that adapts UnaryUnion to different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "class",
        "trans": [
            "UnionStrategy A strategy【class】that adapts UnaryUnion to different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "that",
        "trans": [
            "UnionStrategy A strategy class【that】adapts UnaryUnion to different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "adapts",
        "trans": [
            "UnionStrategy A strategy class that【adapts】UnaryUnion to different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "UnaryUnion",
        "trans": [
            "UnionStrategy A strategy class that adapts【UnaryUnion】to different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "to",
        "trans": [
            "UnionStrategy A strategy class that adapts UnaryUnion【to】different kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "different",
        "trans": [
            "UnionStrategy A strategy class that adapts UnaryUnion to【different】kinds of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "kinds",
        "trans": [
            "UnionStrategy A strategy class that adapts UnaryUnion to different【kinds】of overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "of",
        "trans": [
            "UnionStrategy A strategy class that adapts UnaryUnion to different kinds【of】overlay algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "UnionStrategy A strategy class that adapts UnaryUnion to different kinds of【overlay】algorithms.",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "algorithms.",
        "trans": [
            "UnionStrategy A strategy class that adapts UnaryUnion to different kinds of overlay【algorithms.】",
            "　　　策略类适应UnaryUnion不同"
        ]
    },
    {
        "name": "CascadedPolygonUnion",
        "trans": [
            "【CascadedPolygonUnion】Provides an efficient method of unioning a collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "Provides",
        "trans": [
            "CascadedPolygonUnion【Provides】an efficient method of unioning a collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "an",
        "trans": [
            "CascadedPolygonUnion Provides【an】efficient method of unioning a collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "efficient",
        "trans": [
            "CascadedPolygonUnion Provides an【efficient】method of unioning a collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "method",
        "trans": [
            "CascadedPolygonUnion Provides an efficient【method】of unioning a collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CascadedPolygonUnion Provides an efficient method【of】unioning a collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "unioning",
        "trans": [
            "CascadedPolygonUnion Provides an efficient method of【unioning】a collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "a",
        "trans": [
            "CascadedPolygonUnion Provides an efficient method of unioning【a】collection of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "CascadedPolygonUnion Provides an efficient method of unioning a【collection】of Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "of",
        "trans": [
            "CascadedPolygonUnion Provides an efficient method of unioning a collection【of】Polygonal geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "Polygonal",
        "trans": [
            "CascadedPolygonUnion Provides an efficient method of unioning a collection of【Polygonal】geometries.",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "geometries.",
        "trans": [
            "CascadedPolygonUnion Provides an efficient method of unioning a collection of Polygonal【geometries.】",
            "　　　提供了一个有效的联合方法的集合"
        ]
    },
    {
        "name": "FuzzyPointLocator",
        "trans": [
            "【FuzzyPointLocator】Finds the most likely Location of a point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "FuzzyPointLocator【Finds】the most likely Location of a point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "FuzzyPointLocator Finds【the】most likely Location of a point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "most",
        "trans": [
            "FuzzyPointLocator Finds the【most】likely Location of a point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "likely",
        "trans": [
            "FuzzyPointLocator Finds the most【likely】Location of a point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "Location",
        "trans": [
            "FuzzyPointLocator Finds the most likely【Location】of a point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "of",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location【of】a point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of【a】point relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "point",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a【point】relative to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "relative",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point【relative】to the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "to",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative【to】the polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "the",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to【the】polygonal components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "polygonal",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the【polygonal】components of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "components",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal【components】of a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "of",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components【of】a geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of【a】geometry, using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "geometry,",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of a【geometry,】using a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "using",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of a geometry,【using】a tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of a geometry, using【a】tolerance value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "tolerance",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of a geometry, using a【tolerance】value.",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "value.",
        "trans": [
            "FuzzyPointLocator Finds the most likely Location of a point relative to the polygonal components of a geometry, using a tolerance【value.】",
            "　　　发现最有可能相对于一个点的位置"
        ]
    },
    {
        "name": "OffsetPointGenerator",
        "trans": [
            "【OffsetPointGenerator】Generates points offset by a given distance from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "Generates",
        "trans": [
            "OffsetPointGenerator【Generates】points offset by a given distance from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "points",
        "trans": [
            "OffsetPointGenerator Generates【points】offset by a given distance from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "offset",
        "trans": [
            "OffsetPointGenerator Generates points【offset】by a given distance from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "by",
        "trans": [
            "OffsetPointGenerator Generates points offset【by】a given distance from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OffsetPointGenerator Generates points offset by【a】given distance from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "given",
        "trans": [
            "OffsetPointGenerator Generates points offset by a【given】distance from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given【distance】from both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "from",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance【from】both sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "both",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from【both】sides of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "sides",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both【sides】of the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides【of】the midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of【the】midpoint of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "midpoint",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of the【midpoint】of all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint【of】all segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "all",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint of【all】segments in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint of all【segments】in a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "in",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint of all segments【in】a Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint of all segments in【a】Geometry.",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "OffsetPointGenerator Generates points offset by a given distance from both sides of the midpoint of all segments in a【Geometry.】",
            "　　　给定距离产生点所抵消"
        ]
    },
    {
        "name": "OverlayResultValidator",
        "trans": [
            "【OverlayResultValidator】Validates that the result of an overlay operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "Validates",
        "trans": [
            "OverlayResultValidator【Validates】that the result of an overlay operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "that",
        "trans": [
            "OverlayResultValidator Validates【that】the result of an overlay operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OverlayResultValidator Validates that【the】result of an overlay operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "result",
        "trans": [
            "OverlayResultValidator Validates that the【result】of an overlay operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OverlayResultValidator Validates that the result【of】an overlay operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "an",
        "trans": [
            "OverlayResultValidator Validates that the result of【an】overlay operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "OverlayResultValidator Validates that the result of an【overlay】operation is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay【operation】is geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "is",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay operation【is】geometrically correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "geometrically",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay operation is【geometrically】correct, within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "correct,",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay operation is geometrically【correct,】within a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "within",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay operation is geometrically correct,【within】a determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay operation is geometrically correct, within【a】determined tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "determined",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay operation is geometrically correct, within a【determined】tolerance.",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "tolerance.",
        "trans": [
            "OverlayResultValidator Validates that the result of an overlay operation is geometrically correct, within a determined【tolerance.】",
            "　　　验证的结果覆盖操作"
        ]
    },
    {
        "name": "void",
        "trans": [
            "【void】filter(Coordinate coord) Performs an operation with the provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "filter(Coordinate",
        "trans": [
            "void【filter(Coordinate】coord) Performs an operation with the provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "coord)",
        "trans": [
            "void filter(Coordinate【coord)】Performs an operation with the provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "Performs",
        "trans": [
            "void filter(Coordinate coord)【Performs】an operation with the provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "an",
        "trans": [
            "void filter(Coordinate coord) Performs【an】operation with the provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "void filter(Coordinate coord) Performs an【operation】with the provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "with",
        "trans": [
            "void filter(Coordinate coord) Performs an operation【with】the provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "the",
        "trans": [
            "void filter(Coordinate coord) Performs an operation with【the】provided coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "provided",
        "trans": [
            "void filter(Coordinate coord) Performs an operation with the【provided】coord.",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "coord.",
        "trans": [
            "void filter(Coordinate coord) Performs an operation with the provided【coord.】",
            "　　　过滤器(协调coord)"
        ]
    },
    {
        "name": "OverlapUnion",
        "trans": [
            "【OverlapUnion】Deprecated due to impairing performance",
            "　　　弃用"
        ]
    },
    {
        "name": "Deprecated",
        "trans": [
            "OverlapUnion【Deprecated】due to impairing performance",
            "　　　弃用"
        ]
    },
    {
        "name": "due",
        "trans": [
            "OverlapUnion Deprecated【due】to impairing performance",
            "　　　弃用"
        ]
    },
    {
        "name": "to",
        "trans": [
            "OverlapUnion Deprecated due【to】impairing performance",
            "　　　弃用"
        ]
    },
    {
        "name": "impairing",
        "trans": [
            "OverlapUnion Deprecated due to【impairing】performance",
            "　　　弃用"
        ]
    },
    {
        "name": "performance",
        "trans": [
            "OverlapUnion Deprecated due to impairing【performance】",
            "　　　弃用"
        ]
    },
    {
        "name": "PointGeometryUnion",
        "trans": [
            "【PointGeometryUnion】Computes the union of a Puntal geometry with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "PointGeometryUnion【Computes】the union of a Puntal geometry with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointGeometryUnion Computes【the】union of a Puntal geometry with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "union",
        "trans": [
            "PointGeometryUnion Computes the【union】of a Puntal geometry with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PointGeometryUnion Computes the union【of】a Puntal geometry with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointGeometryUnion Computes the union of【a】Puntal geometry with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "Puntal",
        "trans": [
            "PointGeometryUnion Computes the union of a【Puntal】geometry with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "geometry",
        "trans": [
            "PointGeometryUnion Computes the union of a Puntal【geometry】with another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "with",
        "trans": [
            "PointGeometryUnion Computes the union of a Puntal geometry【with】another arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "another",
        "trans": [
            "PointGeometryUnion Computes the union of a Puntal geometry with【another】arbitrary Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "arbitrary",
        "trans": [
            "PointGeometryUnion Computes the union of a Puntal geometry with another【arbitrary】Geometry.",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "PointGeometryUnion Computes the union of a Puntal geometry with another arbitrary【Geometry.】",
            "　　　计算的结合Puntal几何"
        ]
    },
    {
        "name": "UnaryUnionOp",
        "trans": [
            "【UnaryUnionOp】Unions a Collection of Geometrys or a single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "Unions",
        "trans": [
            "UnaryUnionOp【Unions】a Collection of Geometrys or a single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "UnaryUnionOp Unions【a】Collection of Geometrys or a single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "Collection",
        "trans": [
            "UnaryUnionOp Unions a【Collection】of Geometrys or a single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "of",
        "trans": [
            "UnaryUnionOp Unions a Collection【of】Geometrys or a single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "UnaryUnionOp Unions a Collection of【Geometrys】or a single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "or",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys【or】a single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or【a】single Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "single",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a【single】Geometry (which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a single【Geometry】(which may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "(which",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a single Geometry【(which】may be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "may",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a single Geometry (which【may】be a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "be",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a single Geometry (which may【be】a GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "a",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a single Geometry (which may be【a】GeoometryCollection) together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "GeoometryCollection)",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a single Geometry (which may be a【GeoometryCollection)】together.",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "together.",
        "trans": [
            "UnaryUnionOp Unions a Collection of Geometrys or a single Geometry (which may be a GeoometryCollection)【together.】",
            "　　　工会的一组几何或一个几何"
        ]
    },
    {
        "name": "UnionInteracting",
        "trans": [
            "【UnionInteracting】Experimental code to union MultiPolygons with processing limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "Experimental",
        "trans": [
            "UnionInteracting【Experimental】code to union MultiPolygons with processing limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "code",
        "trans": [
            "UnionInteracting Experimental【code】to union MultiPolygons with processing limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "to",
        "trans": [
            "UnionInteracting Experimental code【to】union MultiPolygons with processing limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "union",
        "trans": [
            "UnionInteracting Experimental code to【union】MultiPolygons with processing limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "MultiPolygons",
        "trans": [
            "UnionInteracting Experimental code to union【MultiPolygons】with processing limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "with",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons【with】processing limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "processing",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with【processing】limited to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "limited",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with processing【limited】to the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "to",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with processing limited【to】the elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "the",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with processing limited to【the】elements which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "elements",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with processing limited to the【elements】which actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "which",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with processing limited to the elements【which】actually interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "actually",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with processing limited to the elements which【actually】interact.",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "interact.",
        "trans": [
            "UnionInteracting Experimental code to union MultiPolygons with processing limited to the elements which actually【interact.】",
            "　　　实验代码联盟多多边形"
        ]
    },
    {
        "name": "GeometrySnapper",
        "trans": [
            "【GeometrySnapper】Snaps the vertices and segments of a Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "Snaps",
        "trans": [
            "GeometrySnapper【Snaps】the vertices and segments of a Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "the",
        "trans": [
            "GeometrySnapper Snaps【the】vertices and segments of a Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "GeometrySnapper Snaps the【vertices】and segments of a Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "and",
        "trans": [
            "GeometrySnapper Snaps the vertices【and】segments of a Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "GeometrySnapper Snaps the vertices and【segments】of a Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "of",
        "trans": [
            "GeometrySnapper Snaps the vertices and segments【of】a Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "a",
        "trans": [
            "GeometrySnapper Snaps the vertices and segments of【a】Geometry to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "GeometrySnapper Snaps the vertices and segments of a【Geometry】to another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "to",
        "trans": [
            "GeometrySnapper Snaps the vertices and segments of a Geometry【to】another Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "another",
        "trans": [
            "GeometrySnapper Snaps the vertices and segments of a Geometry to【another】Geometry's vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "Geometry's",
        "trans": [
            "GeometrySnapper Snaps the vertices and segments of a Geometry to another【Geometry's】vertices.",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "vertices.",
        "trans": [
            "GeometrySnapper Snaps the vertices and segments of a Geometry to another Geometry's【vertices.】",
            "　　　拍摄一个几何图形的顶点和部分"
        ]
    },
    {
        "name": "LineStringSnapper",
        "trans": [
            "【LineStringSnapper】Snaps the vertices and segments of a LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "Snaps",
        "trans": [
            "LineStringSnapper【Snaps】the vertices and segments of a LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineStringSnapper Snaps【the】vertices and segments of a LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "vertices",
        "trans": [
            "LineStringSnapper Snaps the【vertices】and segments of a LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "and",
        "trans": [
            "LineStringSnapper Snaps the vertices【and】segments of a LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "segments",
        "trans": [
            "LineStringSnapper Snaps the vertices and【segments】of a LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments【of】a LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of【a】LineString to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "LineString",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a【LineString】to a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "to",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a LineString【to】a set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a LineString to【a】set of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "set",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a LineString to a【set】of target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a LineString to a set【of】target snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "target",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a LineString to a set of【target】snap vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "snap",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a LineString to a set of target【snap】vertices.",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "vertices.",
        "trans": [
            "LineStringSnapper Snaps the vertices and segments of a LineString to a set of target snap【vertices.】",
            "　　　一个LineString快照的顶点和片段"
        ]
    },
    {
        "name": "SnapIfNeededOverlayOp",
        "trans": [
            "【SnapIfNeededOverlayOp】Performs an overlay operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "Performs",
        "trans": [
            "SnapIfNeededOverlayOp【Performs】an overlay operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "an",
        "trans": [
            "SnapIfNeededOverlayOp Performs【an】overlay operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "SnapIfNeededOverlayOp Performs an【overlay】operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay【operation】using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation【using】snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "snapping",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using【snapping】and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping【and】enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "enhanced",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and【enhanced】precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced【precision】to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision【to】improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "improve",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to【improve】the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to improve【the】robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "robustness",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the【robustness】of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness【of】the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of【the】result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "result.",
        "trans": [
            "SnapIfNeededOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of the【result.】",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "SnapOverlayOp",
        "trans": [
            "【SnapOverlayOp】Performs an overlay operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "Performs",
        "trans": [
            "SnapOverlayOp【Performs】an overlay operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "an",
        "trans": [
            "SnapOverlayOp Performs【an】overlay operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "SnapOverlayOp Performs an【overlay】operation using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "SnapOverlayOp Performs an overlay【operation】using snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "using",
        "trans": [
            "SnapOverlayOp Performs an overlay operation【using】snapping and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "snapping",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using【snapping】and enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "and",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping【and】enhanced precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "enhanced",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and【enhanced】precision to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "precision",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced【precision】to improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "to",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced precision【to】improve the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "improve",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to【improve】the robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to improve【the】robustness of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "robustness",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the【robustness】of the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "of",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness【of】the result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "the",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of【the】result.",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "result.",
        "trans": [
            "SnapOverlayOp Performs an overlay operation using snapping and enhanced precision to improve the robustness of the【result.】",
            "　　　执行一个叠加操作使用拍摄和提高精度"
        ]
    },
    {
        "name": "ConsistentPolygonRingChecker",
        "trans": [
            "【ConsistentPolygonRingChecker】Tests whether the polygon rings in a GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "Tests",
        "trans": [
            "ConsistentPolygonRingChecker【Tests】whether the polygon rings in a GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "whether",
        "trans": [
            "ConsistentPolygonRingChecker Tests【whether】the polygon rings in a GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "the",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether【the】polygon rings in a GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "polygon",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether the【polygon】rings in a GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "rings",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether the polygon【rings】in a GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "in",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether the polygon rings【in】a GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether the polygon rings in【a】GeometryGraph are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "GeometryGraph",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether the polygon rings in a【GeometryGraph】are consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "are",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether the polygon rings in a GeometryGraph【are】consistent.",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "consistent.",
        "trans": [
            "ConsistentPolygonRingChecker Tests whether the polygon rings in a GeometryGraph are【consistent.】",
            "　　　测试是否在GeometryGraph多边形戒指"
        ]
    },
    {
        "name": "EdgeString",
        "trans": [
            "【EdgeString】A sequence of LineMergeDirectedEdges forming one of the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "A",
        "trans": [
            "EdgeString【A】sequence of LineMergeDirectedEdges forming one of the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "EdgeString A【sequence】of LineMergeDirectedEdges forming one of the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeString A sequence【of】LineMergeDirectedEdges forming one of the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "LineMergeDirectedEdges",
        "trans": [
            "EdgeString A sequence of【LineMergeDirectedEdges】forming one of the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "forming",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges【forming】one of the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "one",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming【one】of the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one【of】the lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of【the】lines that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "lines",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the【lines】that will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "that",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines【that】will be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "will",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that【will】be output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "be",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will【be】output by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "output",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will be【output】by the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "by",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will be output【by】the line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "the",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will be output by【the】line-merging process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "line-merging",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will be output by the【line-merging】process.",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "process.",
        "trans": [
            "EdgeString A sequence of LineMergeDirectedEdges forming one of the lines that will be output by the line-merging【process.】",
            "　　　LineMergeDirectedEdges序列形成的线路之一"
        ]
    },
    {
        "name": "LineMergeDirectedEdge",
        "trans": [
            "【LineMergeDirectedEdge】A DirectedEdge of a LineMergeGraph.",
            "　　　的DirectedEdge"
        ]
    },
    {
        "name": "A",
        "trans": [
            "LineMergeDirectedEdge【A】DirectedEdge of a LineMergeGraph.",
            "　　　的DirectedEdge"
        ]
    },
    {
        "name": "DirectedEdge",
        "trans": [
            "LineMergeDirectedEdge A【DirectedEdge】of a LineMergeGraph.",
            "　　　的DirectedEdge"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineMergeDirectedEdge A DirectedEdge【of】a LineMergeGraph.",
            "　　　的DirectedEdge"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineMergeDirectedEdge A DirectedEdge of【a】LineMergeGraph.",
            "　　　的DirectedEdge"
        ]
    },
    {
        "name": "LineMergeGraph.",
        "trans": [
            "LineMergeDirectedEdge A DirectedEdge of a【LineMergeGraph.】",
            "　　　的DirectedEdge"
        ]
    },
    {
        "name": "AxisPlaneCoordinateSequence",
        "trans": [
            "【AxisPlaneCoordinateSequence】A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "A",
        "trans": [
            "AxisPlaneCoordinateSequence【A】CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "CoordinateSequence",
        "trans": [
            "AxisPlaneCoordinateSequence A【CoordinateSequence】wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "wrapper",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence【wrapper】which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "which",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper【which】projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "projects",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which【projects】3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "3D",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects【3D】coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "coordinates",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D【coordinates】into one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "into",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates【into】one of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "one",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into【one】of the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "of",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one【of】the three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "the",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of【the】three Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "three",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the【three】Cartesian axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three【Cartesian】axis planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "axis",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian【axis】planes, using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "planes,",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis【planes,】using the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "using",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes,【using】the standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "the",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using【the】standard orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "standard",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the【standard】orthonormal projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "orthonormal",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard【orthonormal】projection (i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "projection",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal【projection】(i.e.",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "(i.e.",
        "trans": [
            "AxisPlaneCoordinateSequence A CoordinateSequence wrapper which projects 3D coordinates into one of the three Cartesian axis planes, using the standard orthonormal projection【(i.e.】",
            "　　　一个CoordinateSequence包装"
        ]
    },
    {
        "name": "Distance3DOp",
        "trans": [
            "【Distance3DOp】Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "Find",
        "trans": [
            "Distance3DOp【Find】two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "Distance3DOp Find【two】points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "points",
        "trans": [
            "Distance3DOp Find two【points】on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "on",
        "trans": [
            "Distance3DOp Find two points【on】two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "two",
        "trans": [
            "Distance3DOp Find two points on【two】3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "3D",
        "trans": [
            "Distance3DOp Find two points on two【3D】Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "Distance3DOp Find two points on two 3D【Geometrys】which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys【which】lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "lie",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which【lie】within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "within",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie【within】a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "a",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within【a】given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "given",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a【given】distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "distance,",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given【distance,】or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "or",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance,【or】else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "else",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or【else】are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "are",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else【are】the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are【the】nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "nearest",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the【nearest】points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "points",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest【points】on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "on",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points【on】the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on【the】geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the【geometries】(in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "(in",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries【(in】which case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "which",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in【which】case this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "case",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which【case】this also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "this",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case【this】also provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "also",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this【also】provides the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "provides",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also【provides】the distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides【the】distance between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the【distance】between the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "between",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance【between】the geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "the",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between【the】geometries).",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "geometries).",
        "trans": [
            "Distance3DOp Find two points on two 3D Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the【geometries).】",
            "　　　找到两个点两个3 d几何躺在一个给定的距离,"
        ]
    },
    {
        "name": "PlanarPolygon3D",
        "trans": [
            "【PlanarPolygon3D】Models a polygon lying in a plane in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "Models",
        "trans": [
            "PlanarPolygon3D【Models】a polygon lying in a plane in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PlanarPolygon3D Models【a】polygon lying in a plane in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "polygon",
        "trans": [
            "PlanarPolygon3D Models a【polygon】lying in a plane in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "lying",
        "trans": [
            "PlanarPolygon3D Models a polygon【lying】in a plane in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "PlanarPolygon3D Models a polygon lying【in】a plane in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PlanarPolygon3D Models a polygon lying in【a】plane in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "plane",
        "trans": [
            "PlanarPolygon3D Models a polygon lying in a【plane】in 3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "in",
        "trans": [
            "PlanarPolygon3D Models a polygon lying in a plane【in】3-dimensional Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "3-dimensional",
        "trans": [
            "PlanarPolygon3D Models a polygon lying in a plane in【3-dimensional】Cartesian space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "Cartesian",
        "trans": [
            "PlanarPolygon3D Models a polygon lying in a plane in 3-dimensional【Cartesian】space.",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "space.",
        "trans": [
            "PlanarPolygon3D Models a polygon lying in a plane in 3-dimensional Cartesian【space.】",
            "　　　模型一个多边形躺在一架飞机在三维笛卡尔空间。"
        ]
    },
    {
        "name": "EdgeSetNoder",
        "trans": [
            "【EdgeSetNoder】Nodes a set of edges.",
            "　　　节点的边缘。"
        ]
    },
    {
        "name": "Nodes",
        "trans": [
            "EdgeSetNoder【Nodes】a set of edges.",
            "　　　节点的边缘。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "EdgeSetNoder Nodes【a】set of edges.",
            "　　　节点的边缘。"
        ]
    },
    {
        "name": "set",
        "trans": [
            "EdgeSetNoder Nodes a【set】of edges.",
            "　　　节点的边缘。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "EdgeSetNoder Nodes a set【of】edges.",
            "　　　节点的边缘。"
        ]
    },
    {
        "name": "edges.",
        "trans": [
            "EdgeSetNoder Nodes a set of【edges.】",
            "　　　节点的边缘。"
        ]
    },
    {
        "name": "LineBuilder",
        "trans": [
            "【LineBuilder】Forms JTS LineStrings out of a the graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "Forms",
        "trans": [
            "LineBuilder【Forms】JTS LineStrings out of a the graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "JTS",
        "trans": [
            "LineBuilder Forms【JTS】LineStrings out of a the graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "LineStrings",
        "trans": [
            "LineBuilder Forms JTS【LineStrings】out of a the graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "out",
        "trans": [
            "LineBuilder Forms JTS LineStrings【out】of a the graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineBuilder Forms JTS LineStrings out【of】a the graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of【a】the graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a【the】graph of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a the【graph】of DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a the graph【of】DirectedEdges created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "DirectedEdges",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a the graph of【DirectedEdges】created by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "created",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a the graph of DirectedEdges【created】by an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "by",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a the graph of DirectedEdges created【by】an OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "an",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a the graph of DirectedEdges created by【an】OverlayOp.",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "OverlayOp.",
        "trans": [
            "LineBuilder Forms JTS LineStrings out of a the graph of DirectedEdges created by an【OverlayOp.】",
            "　　　形式JTS DirectedEdges线的图形"
        ]
    },
    {
        "name": "MaximalEdgeRing",
        "trans": [
            "【MaximalEdgeRing】A ring of DirectedEdges which may contain nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "MaximalEdgeRing【A】ring of DirectedEdges which may contain nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "ring",
        "trans": [
            "MaximalEdgeRing A【ring】of DirectedEdges which may contain nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MaximalEdgeRing A ring【of】DirectedEdges which may contain nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "DirectedEdges",
        "trans": [
            "MaximalEdgeRing A ring of【DirectedEdges】which may contain nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "which",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges【which】may contain nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "may",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges which【may】contain nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "contain",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges which may【contain】nodes of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges which may contain【nodes】of degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges which may contain nodes【of】degree > 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "degree",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges which may contain nodes of【degree】> 2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": ">",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges which may contain nodes of degree【>】2.",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "2.",
        "trans": [
            "MaximalEdgeRing A ring of DirectedEdges which may contain nodes of degree >【2.】",
            "　　　一枚戒指的DirectedEdges可能包含的节点度> 2。"
        ]
    },
    {
        "name": "MinimalEdgeRing",
        "trans": [
            "【MinimalEdgeRing】A ring of Edges with the property that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "A",
        "trans": [
            "MinimalEdgeRing【A】ring of Edges with the property that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "ring",
        "trans": [
            "MinimalEdgeRing A【ring】of Edges with the property that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "of",
        "trans": [
            "MinimalEdgeRing A ring【of】Edges with the property that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "Edges",
        "trans": [
            "MinimalEdgeRing A ring of【Edges】with the property that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "with",
        "trans": [
            "MinimalEdgeRing A ring of Edges【with】the property that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "the",
        "trans": [
            "MinimalEdgeRing A ring of Edges with【the】property that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "property",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the【property】that no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "that",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property【that】no node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "no",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property that【no】node has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "node",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property that no【node】has degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "has",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property that no node【has】degree greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "degree",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property that no node has【degree】greater than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "greater",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property that no node has degree【greater】than 2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "than",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property that no node has degree greater【than】2.",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "2.",
        "trans": [
            "MinimalEdgeRing A ring of Edges with the property that no node has degree greater than【2.】",
            "　　　一圈边缘的财产没有节点"
        ]
    },
    {
        "name": "OverlayNodeFactory",
        "trans": [
            "【OverlayNodeFactory】Creates nodes for use in the PlanarGraphs constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "OverlayNodeFactory【Creates】nodes for use in the PlanarGraphs constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "OverlayNodeFactory Creates【nodes】for use in the PlanarGraphs constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "for",
        "trans": [
            "OverlayNodeFactory Creates nodes【for】use in the PlanarGraphs constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "use",
        "trans": [
            "OverlayNodeFactory Creates nodes for【use】in the PlanarGraphs constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "in",
        "trans": [
            "OverlayNodeFactory Creates nodes for use【in】the PlanarGraphs constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OverlayNodeFactory Creates nodes for use in【the】PlanarGraphs constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "PlanarGraphs",
        "trans": [
            "OverlayNodeFactory Creates nodes for use in the【PlanarGraphs】constructed during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "constructed",
        "trans": [
            "OverlayNodeFactory Creates nodes for use in the PlanarGraphs【constructed】during overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "during",
        "trans": [
            "OverlayNodeFactory Creates nodes for use in the PlanarGraphs constructed【during】overlay operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "OverlayNodeFactory Creates nodes for use in the PlanarGraphs constructed during【overlay】operations.",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "operations.",
        "trans": [
            "OverlayNodeFactory Creates nodes for use in the PlanarGraphs constructed during overlay【operations.】",
            "　　　创建节点PlanarGraphs构造中使用"
        ]
    },
    {
        "name": "OverlayOp",
        "trans": [
            "【OverlayOp】Computes the geometric overlay of two Geometrys.",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "OverlayOp【Computes】the geometric overlay of two Geometrys.",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OverlayOp Computes【the】geometric overlay of two Geometrys.",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "geometric",
        "trans": [
            "OverlayOp Computes the【geometric】overlay of two Geometrys.",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "OverlayOp Computes the geometric【overlay】of two Geometrys.",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OverlayOp Computes the geometric overlay【of】two Geometrys.",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "two",
        "trans": [
            "OverlayOp Computes the geometric overlay of【two】Geometrys.",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "Geometrys.",
        "trans": [
            "OverlayOp Computes the geometric overlay of two【Geometrys.】",
            "　　　两个几何计算的几何叠加。"
        ]
    },
    {
        "name": "PointBuilder",
        "trans": [
            "【PointBuilder】Constructs Points from the nodes of an overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "Constructs",
        "trans": [
            "PointBuilder【Constructs】Points from the nodes of an overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "Points",
        "trans": [
            "PointBuilder Constructs【Points】from the nodes of an overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "PointBuilder Constructs Points【from】the nodes of an overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointBuilder Constructs Points from【the】nodes of an overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "nodes",
        "trans": [
            "PointBuilder Constructs Points from the【nodes】of an overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PointBuilder Constructs Points from the nodes【of】an overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "an",
        "trans": [
            "PointBuilder Constructs Points from the nodes of【an】overlay graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "overlay",
        "trans": [
            "PointBuilder Constructs Points from the nodes of an【overlay】graph.",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "graph.",
        "trans": [
            "PointBuilder Constructs Points from the nodes of an overlay【graph.】",
            "　　　结构分节点的覆盖图。"
        ]
    },
    {
        "name": "PolygonBuilder",
        "trans": [
            "【PolygonBuilder】Forms Polygons out of a graph of DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "Forms",
        "trans": [
            "PolygonBuilder【Forms】Polygons out of a graph of DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "Polygons",
        "trans": [
            "PolygonBuilder Forms【Polygons】out of a graph of DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "out",
        "trans": [
            "PolygonBuilder Forms Polygons【out】of a graph of DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PolygonBuilder Forms Polygons out【of】a graph of DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PolygonBuilder Forms Polygons out of【a】graph of DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "PolygonBuilder Forms Polygons out of a【graph】of DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PolygonBuilder Forms Polygons out of a graph【of】DirectedEdges.",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "DirectedEdges.",
        "trans": [
            "PolygonBuilder Forms Polygons out of a graph of【DirectedEdges.】",
            "　　　形成多边形DirectedEdges图。"
        ]
    },
    {
        "name": "LineMergeEdge",
        "trans": [
            "【LineMergeEdge】An edge of a LineMergeGraph.",
            "　　　一个LineMergeGraph边缘。"
        ]
    },
    {
        "name": "An",
        "trans": [
            "LineMergeEdge【An】edge of a LineMergeGraph.",
            "　　　一个LineMergeGraph边缘。"
        ]
    },
    {
        "name": "edge",
        "trans": [
            "LineMergeEdge An【edge】of a LineMergeGraph.",
            "　　　一个LineMergeGraph边缘。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineMergeEdge An edge【of】a LineMergeGraph.",
            "　　　一个LineMergeGraph边缘。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineMergeEdge An edge of【a】LineMergeGraph.",
            "　　　一个LineMergeGraph边缘。"
        ]
    },
    {
        "name": "LineMergeGraph.",
        "trans": [
            "LineMergeEdge An edge of a【LineMergeGraph.】",
            "　　　一个LineMergeGraph边缘。"
        ]
    },
    {
        "name": "LineMergeGraph",
        "trans": [
            "【LineMergeGraph】A planar graph of edges that is analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "A",
        "trans": [
            "LineMergeGraph【A】planar graph of edges that is analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "planar",
        "trans": [
            "LineMergeGraph A【planar】graph of edges that is analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "graph",
        "trans": [
            "LineMergeGraph A planar【graph】of edges that is analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineMergeGraph A planar graph【of】edges that is analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "LineMergeGraph A planar graph of【edges】that is analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "that",
        "trans": [
            "LineMergeGraph A planar graph of edges【that】is analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "is",
        "trans": [
            "LineMergeGraph A planar graph of edges that【is】analyzed to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "analyzed",
        "trans": [
            "LineMergeGraph A planar graph of edges that is【analyzed】to sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "LineMergeGraph A planar graph of edges that is analyzed【to】sew the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "sew",
        "trans": [
            "LineMergeGraph A planar graph of edges that is analyzed to【sew】the edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "LineMergeGraph A planar graph of edges that is analyzed to sew【the】edges together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "edges",
        "trans": [
            "LineMergeGraph A planar graph of edges that is analyzed to sew the【edges】together.",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "together.",
        "trans": [
            "LineMergeGraph A planar graph of edges that is analyzed to sew the edges【together.】",
            "　　　分析了边缘的平面图的边缝在一起。"
        ]
    },
    {
        "name": "LineMerger",
        "trans": [
            "【LineMerger】Merges a collection of linear components to form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "Merges",
        "trans": [
            "LineMerger【Merges】a collection of linear components to form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineMerger Merges【a】collection of linear components to form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "collection",
        "trans": [
            "LineMerger Merges a【collection】of linear components to form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineMerger Merges a collection【of】linear components to form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "linear",
        "trans": [
            "LineMerger Merges a collection of【linear】components to form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "components",
        "trans": [
            "LineMerger Merges a collection of linear【components】to form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "LineMerger Merges a collection of linear components【to】form maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "form",
        "trans": [
            "LineMerger Merges a collection of linear components to【form】maximal-length linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "maximal-length",
        "trans": [
            "LineMerger Merges a collection of linear components to form【maximal-length】linestrings.",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "linestrings.",
        "trans": [
            "LineMerger Merges a collection of linear components to form maximal-length【linestrings.】",
            "　　　合并形成最大长度线线性组件的集合。"
        ]
    },
    {
        "name": "LineSequencer",
        "trans": [
            "【LineSequencer】Builds a sequence from a set of LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "Builds",
        "trans": [
            "LineSequencer【Builds】a sequence from a set of LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineSequencer Builds【a】sequence from a set of LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "LineSequencer Builds a【sequence】from a set of LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "from",
        "trans": [
            "LineSequencer Builds a sequence【from】a set of LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "a",
        "trans": [
            "LineSequencer Builds a sequence from【a】set of LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "set",
        "trans": [
            "LineSequencer Builds a sequence from a【set】of LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "of",
        "trans": [
            "LineSequencer Builds a sequence from a set【of】LineStrings so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "LineStrings",
        "trans": [
            "LineSequencer Builds a sequence from a set of【LineStrings】so that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "so",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings【so】that they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "that",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings so【that】they are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "they",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings so that【they】are ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "are",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings so that they【are】ordered end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "ordered",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings so that they are【ordered】end to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "end",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings so that they are ordered【end】to end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "to",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings so that they are ordered end【to】end.",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "end.",
        "trans": [
            "LineSequencer Builds a sequence from a set of LineStrings so that they are ordered end to【end.】",
            "　　　构建一个序列从一组线,这样"
        ]
    },
    {
        "name": "BufferCurveMaximumDistanceFinder",
        "trans": [
            "【BufferCurveMaximumDistanceFinder】Finds the approximate maximum distance from a buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "Finds",
        "trans": [
            "BufferCurveMaximumDistanceFinder【Finds】the approximate maximum distance from a buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds【the】approximate maximum distance from a buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "approximate",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the【approximate】maximum distance from a buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "maximum",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate【maximum】distance from a buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum【distance】from a buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "from",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance【from】a buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from【a】buffer curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a【buffer】curve to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "curve",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a buffer【curve】to the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "to",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a buffer curve【to】the originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a buffer curve to【the】originating geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "originating",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a buffer curve to the【originating】geometry.",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "geometry.",
        "trans": [
            "BufferCurveMaximumDistanceFinder Finds the approximate maximum distance from a buffer curve to the originating【geometry.】",
            "　　　发现近似最大距离缓冲曲线"
        ]
    },
    {
        "name": "BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter",
        "trans": [
            "【BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter】",
            "　　　BufferCurveMaximumDistanceFinder.MaxMidpointDistanceFilter"
        ]
    },
    {
        "name": "BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter",
        "trans": [
            "【BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter】",
            "　　　BufferCurveMaximumDistanceFinder.MaxPointDistanceFilter"
        ]
    },
    {
        "name": "BufferDistanceValidator",
        "trans": [
            "【BufferDistanceValidator】Validates that a given buffer curve lies an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "Validates",
        "trans": [
            "BufferDistanceValidator【Validates】that a given buffer curve lies an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "that",
        "trans": [
            "BufferDistanceValidator Validates【that】a given buffer curve lies an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BufferDistanceValidator Validates that【a】given buffer curve lies an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "given",
        "trans": [
            "BufferDistanceValidator Validates that a【given】buffer curve lies an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "BufferDistanceValidator Validates that a given【buffer】curve lies an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "curve",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer【curve】lies an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "lies",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve【lies】an appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "an",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies【an】appropriate distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "appropriate",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies an【appropriate】distance from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies an appropriate【distance】from the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "from",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies an appropriate distance【from】the input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies an appropriate distance from【the】input generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "input",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies an appropriate distance from the【input】generating it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "generating",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies an appropriate distance from the input【generating】it.",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "it.",
        "trans": [
            "BufferDistanceValidator Validates that a given buffer curve lies an appropriate distance from the input generating【it.】",
            "　　　验证给定的缓冲曲线是一个适当的距离"
        ]
    },
    {
        "name": "BufferResultValidator",
        "trans": [
            "【BufferResultValidator】Validates that the result of a buffer operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "Validates",
        "trans": [
            "BufferResultValidator【Validates】that the result of a buffer operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "that",
        "trans": [
            "BufferResultValidator Validates【that】the result of a buffer operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BufferResultValidator Validates that【the】result of a buffer operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "result",
        "trans": [
            "BufferResultValidator Validates that the【result】of a buffer operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BufferResultValidator Validates that the result【of】a buffer operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BufferResultValidator Validates that the result of【a】buffer operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "BufferResultValidator Validates that the result of a【buffer】operation is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "operation",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer【operation】is geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "is",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer operation【is】geometrically correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "geometrically",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer operation is【geometrically】correct, within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "correct,",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer operation is geometrically【correct,】within a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "within",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer operation is geometrically correct,【within】a computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer operation is geometrically correct, within【a】computed tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "computed",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer operation is geometrically correct, within a【computed】tolerance.",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "tolerance.",
        "trans": [
            "BufferResultValidator Validates that the result of a buffer operation is geometrically correct, within a computed【tolerance.】",
            "　　　验证一个缓冲区操作的结果"
        ]
    },
    {
        "name": "DistanceToPointFinder",
        "trans": [
            "【DistanceToPointFinder】Computes the Euclidean distance (L2 metric) from a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "DistanceToPointFinder【Computes】the Euclidean distance (L2 metric) from a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DistanceToPointFinder Computes【the】Euclidean distance (L2 metric) from a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "Euclidean",
        "trans": [
            "DistanceToPointFinder Computes the【Euclidean】distance (L2 metric) from a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean【distance】(L2 metric) from a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "(L2",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance【(L2】metric) from a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "metric)",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance (L2【metric)】from a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "from",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance (L2 metric)【from】a Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance (L2 metric) from【a】Point to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "Point",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance (L2 metric) from a【Point】to a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "to",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance (L2 metric) from a Point【to】a Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance (L2 metric) from a Point to【a】Geometry.",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "DistanceToPointFinder Computes the Euclidean distance (L2 metric) from a Point to a【Geometry.】",
            "　　　计算欧氏距离(L2度量)从一个点到一个几何图形。"
        ]
    },
    {
        "name": "BufferInputLineSimplifier",
        "trans": [
            "【BufferInputLineSimplifier】Simplifies a buffer input line to remove concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "Simplifies",
        "trans": [
            "BufferInputLineSimplifier【Simplifies】a buffer input line to remove concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BufferInputLineSimplifier Simplifies【a】buffer input line to remove concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "BufferInputLineSimplifier Simplifies a【buffer】input line to remove concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "input",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer【input】line to remove concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "line",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer input【line】to remove concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "to",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer input line【to】remove concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "remove",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer input line to【remove】concavities with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "concavities",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer input line to remove【concavities】with shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "with",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer input line to remove concavities【with】shallow depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "shallow",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer input line to remove concavities with【shallow】depth.",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "depth.",
        "trans": [
            "BufferInputLineSimplifier Simplifies a buffer input line to remove concavities with shallow【depth.】",
            "　　　简化了缓冲区输入行"
        ]
    },
    {
        "name": "BufferOp",
        "trans": [
            "【BufferOp】Computes the buffer of a geometry, for both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "BufferOp【Computes】the buffer of a geometry, for both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BufferOp Computes【the】buffer of a geometry, for both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "BufferOp Computes the【buffer】of a geometry, for both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "BufferOp Computes the buffer【of】a geometry, for both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BufferOp Computes the buffer of【a】geometry, for both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "geometry,",
        "trans": [
            "BufferOp Computes the buffer of a【geometry,】for both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "BufferOp Computes the buffer of a geometry,【for】both positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "both",
        "trans": [
            "BufferOp Computes the buffer of a geometry, for【both】positive and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "positive",
        "trans": [
            "BufferOp Computes the buffer of a geometry, for both【positive】and negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "BufferOp Computes the buffer of a geometry, for both positive【and】negative buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "negative",
        "trans": [
            "BufferOp Computes the buffer of a geometry, for both positive and【negative】buffer distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "BufferOp Computes the buffer of a geometry, for both positive and negative【buffer】distances.",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "distances.",
        "trans": [
            "BufferOp Computes the buffer of a geometry, for both positive and negative buffer【distances.】",
            "　　　计算几何的缓冲区,对积极和消极的缓冲距离。"
        ]
    },
    {
        "name": "BufferParameters",
        "trans": [
            "【BufferParameters】A value class containing the parameters which specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "A",
        "trans": [
            "BufferParameters【A】value class containing the parameters which specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "value",
        "trans": [
            "BufferParameters A【value】class containing the parameters which specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "class",
        "trans": [
            "BufferParameters A value【class】containing the parameters which specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "containing",
        "trans": [
            "BufferParameters A value class【containing】the parameters which specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "the",
        "trans": [
            "BufferParameters A value class containing【the】parameters which specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "parameters",
        "trans": [
            "BufferParameters A value class containing the【parameters】which specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "which",
        "trans": [
            "BufferParameters A value class containing the parameters【which】specify how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "specify",
        "trans": [
            "BufferParameters A value class containing the parameters which【specify】how a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "how",
        "trans": [
            "BufferParameters A value class containing the parameters which specify【how】a buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "a",
        "trans": [
            "BufferParameters A value class containing the parameters which specify how【a】buffer should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "BufferParameters A value class containing the parameters which specify how a【buffer】should be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "should",
        "trans": [
            "BufferParameters A value class containing the parameters which specify how a buffer【should】be constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "be",
        "trans": [
            "BufferParameters A value class containing the parameters which specify how a buffer should【be】constructed.",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "constructed.",
        "trans": [
            "BufferParameters A value class containing the parameters which specify how a buffer should be【constructed.】",
            "　　　一个类包含的参数值"
        ]
    },
    {
        "name": "OffsetCurveBuilder",
        "trans": [
            "【OffsetCurveBuilder】Computes the raw offset curve for a single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "Computes",
        "trans": [
            "OffsetCurveBuilder【Computes】the raw offset curve for a single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OffsetCurveBuilder Computes【the】raw offset curve for a single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "raw",
        "trans": [
            "OffsetCurveBuilder Computes the【raw】offset curve for a single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "offset",
        "trans": [
            "OffsetCurveBuilder Computes the raw【offset】curve for a single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "curve",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset【curve】for a single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "for",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve【for】a single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for【a】single Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "single",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for a【single】Geometry component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for a single【Geometry】component (ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "component",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for a single Geometry【component】(ring, line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "(ring,",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for a single Geometry component【(ring,】line or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "line",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for a single Geometry component (ring,【line】or point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "or",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for a single Geometry component (ring, line【or】point).",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "point).",
        "trans": [
            "OffsetCurveBuilder Computes the raw offset curve for a single Geometry component (ring, line or【point).】",
            "　　　计算原始曲线的"
        ]
    },
    {
        "name": "OffsetCurveSetBuilder",
        "trans": [
            "【OffsetCurveSetBuilder】Creates all the raw offset curves for a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "OffsetCurveSetBuilder【Creates】all the raw offset curves for a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "all",
        "trans": [
            "OffsetCurveSetBuilder Creates【all】the raw offset curves for a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "OffsetCurveSetBuilder Creates all【the】raw offset curves for a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "raw",
        "trans": [
            "OffsetCurveSetBuilder Creates all the【raw】offset curves for a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "offset",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw【offset】curves for a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "curves",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw offset【curves】for a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "for",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw offset curves【for】a buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw offset curves for【a】buffer of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw offset curves for a【buffer】of a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw offset curves for a buffer【of】a Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw offset curves for a buffer of【a】Geometry.",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "Geometry.",
        "trans": [
            "OffsetCurveSetBuilder Creates all the raw offset curves for a buffer of a【Geometry.】",
            "　　　创建一个缓冲区的所有原始偏置曲线几何。"
        ]
    },
    {
        "name": "VariableBuffer",
        "trans": [
            "【VariableBuffer】Creates a buffer polygon with a varying buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "Creates",
        "trans": [
            "VariableBuffer【Creates】a buffer polygon with a varying buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "a",
        "trans": [
            "VariableBuffer Creates【a】buffer polygon with a varying buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "VariableBuffer Creates a【buffer】polygon with a varying buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "polygon",
        "trans": [
            "VariableBuffer Creates a buffer【polygon】with a varying buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "with",
        "trans": [
            "VariableBuffer Creates a buffer polygon【with】a varying buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "a",
        "trans": [
            "VariableBuffer Creates a buffer polygon with【a】varying buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "varying",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a【varying】buffer distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "buffer",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying【buffer】distance at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying buffer【distance】at each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "at",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying buffer distance【at】each vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "each",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying buffer distance at【each】vertex along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "vertex",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying buffer distance at each【vertex】along a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "along",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying buffer distance at each vertex【along】a line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "a",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying buffer distance at each vertex along【a】line.",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "line.",
        "trans": [
            "VariableBuffer Creates a buffer polygon with a varying buffer distance at each vertex along a【line.】",
            "　　　创建一个缓冲区多边形与不同的缓冲距离"
        ]
    },
    {
        "name": "PointPairDistance",
        "trans": [
            "【PointPairDistance】Contains a pair of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "Contains",
        "trans": [
            "PointPairDistance【Contains】a pair of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "a",
        "trans": [
            "PointPairDistance Contains【a】pair of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "pair",
        "trans": [
            "PointPairDistance Contains a【pair】of points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "of",
        "trans": [
            "PointPairDistance Contains a pair【of】points and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "points",
        "trans": [
            "PointPairDistance Contains a pair of【points】and the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "and",
        "trans": [
            "PointPairDistance Contains a pair of points【and】the distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "the",
        "trans": [
            "PointPairDistance Contains a pair of points and【the】distance between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "PointPairDistance Contains a pair of points and the【distance】between them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "between",
        "trans": [
            "PointPairDistance Contains a pair of points and the distance【between】them.",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "them.",
        "trans": [
            "PointPairDistance Contains a pair of points and the distance between【them.】",
            "　　　包含两个点和它们之间的距离。"
        ]
    },
    {
        "name": "ConnectedElementLocationFilter",
        "trans": [
            "【ConnectedElementLocationFilter】A ConnectedElementPointFilter extracts a single point from each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "A",
        "trans": [
            "ConnectedElementLocationFilter【A】ConnectedElementPointFilter extracts a single point from each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "ConnectedElementPointFilter",
        "trans": [
            "ConnectedElementLocationFilter A【ConnectedElementPointFilter】extracts a single point from each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "extracts",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter【extracts】a single point from each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts【a】single point from each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "single",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a【single】point from each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "point",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single【point】from each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "from",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point【from】each connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "each",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from【each】connected element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "connected",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each【connected】element in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "element",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each connected【element】in a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "in",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each connected element【in】a Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each connected element in【a】Geometry (e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each connected element in a【Geometry】(e.g.",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "(e.g.",
        "trans": [
            "ConnectedElementLocationFilter A ConnectedElementPointFilter extracts a single point from each connected element in a Geometry【(e.g.】",
            "　　　一个单点ConnectedElementPointFilter提取物"
        ]
    },
    {
        "name": "ConnectedElementPointFilter",
        "trans": [
            "【ConnectedElementPointFilter】Extracts a single point from each connected element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "Extracts",
        "trans": [
            "ConnectedElementPointFilter【Extracts】a single point from each connected element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConnectedElementPointFilter Extracts【a】single point from each connected element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "single",
        "trans": [
            "ConnectedElementPointFilter Extracts a【single】point from each connected element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "point",
        "trans": [
            "ConnectedElementPointFilter Extracts a single【point】from each connected element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "from",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point【from】each connected element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "each",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point from【each】connected element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "connected",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point from each【connected】element in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "element",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point from each connected【element】in a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "in",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point from each connected element【in】a Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "a",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point from each connected element in【a】Geometry (e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point from each connected element in a【Geometry】(e.g.",
            "　　　提取一个点"
        ]
    },
    {
        "name": "(e.g.",
        "trans": [
            "ConnectedElementPointFilter Extracts a single point from each connected element in a Geometry【(e.g.】",
            "　　　提取一个点"
        ]
    },
    {
        "name": "DistanceOp",
        "trans": [
            "【DistanceOp】Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "Find",
        "trans": [
            "DistanceOp【Find】two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "two",
        "trans": [
            "DistanceOp Find【two】points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "points",
        "trans": [
            "DistanceOp Find two【points】on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "on",
        "trans": [
            "DistanceOp Find two points【on】two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "two",
        "trans": [
            "DistanceOp Find two points on【two】Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "Geometrys",
        "trans": [
            "DistanceOp Find two points on two【Geometrys】which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "which",
        "trans": [
            "DistanceOp Find two points on two Geometrys【which】lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "lie",
        "trans": [
            "DistanceOp Find two points on two Geometrys which【lie】within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "within",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie【within】a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "a",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within【a】given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "given",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a【given】distance, or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "distance,",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given【distance,】or else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "or",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance,【or】else are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "else",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or【else】are the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "are",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else【are】the nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are【the】nearest points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "nearest",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the【nearest】points on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "points",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest【points】on the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "on",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points【on】the geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on【the】geometries (in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "geometries",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the【geometries】(in which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "(in",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries【(in】which case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "which",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in【which】case this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "case",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which【case】this also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "this",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case【this】also provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "also",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this【also】provides the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "provides",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also【provides】the distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides【the】distance between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "distance",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the【distance】between the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "between",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance【between】the geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "the",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between【the】geometries).",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "geometries).",
        "trans": [
            "DistanceOp Find two points on two Geometrys which lie within a given distance, or else are the nearest points on the geometries (in which case this also provides the distance between the【geometries).】",
            "　　　找到两个点两个几何谎言"
        ]
    },
    {
        "name": "FacetSequence",
        "trans": [
            "【FacetSequence】Represents a sequence of facets (points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "Represents",
        "trans": [
            "FacetSequence【Represents】a sequence of facets (points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FacetSequence Represents【a】sequence of facets (points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "sequence",
        "trans": [
            "FacetSequence Represents a【sequence】of facets (points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "of",
        "trans": [
            "FacetSequence Represents a sequence【of】facets (points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "facets",
        "trans": [
            "FacetSequence Represents a sequence of【facets】(points or line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "(points",
        "trans": [
            "FacetSequence Represents a sequence of facets【(points】or line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "or",
        "trans": [
            "FacetSequence Represents a sequence of facets (points【or】line segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "line",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or【line】segments) of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "segments)",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line【segments)】of a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "of",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments)【of】a Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of【a】Geometry specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "Geometry",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a【Geometry】specified by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "specified",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a Geometry【specified】by a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "by",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified【by】a subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified by【a】subsequence of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "subsequence",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified by a【subsequence】of a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "of",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified by a subsequence【of】a CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "a",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified by a subsequence of【a】CoordinateSequence.",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "CoordinateSequence.",
        "trans": [
            "FacetSequence Represents a sequence of facets (points or line segments) of a Geometry specified by a subsequence of a【CoordinateSequence.】",
            "　　　代表一个方面(点或线段)序列"
        ]
    },
    {
        "name": "FacetSequenceTreeBuilder",
        "trans": [
            "【FacetSequenceTreeBuilder】",
            "　　　FacetSequenceTreeBuilder"
        ]
    }
]